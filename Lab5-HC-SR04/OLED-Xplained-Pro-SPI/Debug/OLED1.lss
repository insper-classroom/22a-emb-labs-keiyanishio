
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008aec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408aec  00408aec  00018aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e0  20400000  00408af4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000308  204009e0  004094d4  000209e0  2**2
                  ALLOC
  4 .stack        00002000  20400ce8  004097dc  000209e0  2**0
                  ALLOC
  5 .heap         00000200  20402ce8  0040b7dc  000209e0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a0e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00017786  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000330f  00000000  00000000  000381ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005a56  00000000  00000000  0003b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ab8  00000000  00000000  00040f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a30  00000000  00000000  00041a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a317  00000000  00000000  0004243a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f8c9  00000000  00000000  0004c751  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000901bb  00000000  00000000  0005c01a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003698  00000000  00000000  000ec1d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 2c 40 20 05 2b 40 00 b5 2b 40 00 b5 2b 40 00     .,@ .+@..+@..+@.
  400010:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 00 00 00 00     .+@..+@..+@.....
	...
  40002c:	b5 2b 40 00 b5 2b 40 00 00 00 00 00 b5 2b 40 00     .+@..+@......+@.
  40003c:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .+@..+@..+@..+@.
  40004c:	4d 30 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     M0@..+@..+@..+@.
  40005c:	b5 2b 40 00 b5 2b 40 00 00 00 00 00 75 22 40 00     .+@..+@.....u"@.
  40006c:	8d 22 40 00 a5 22 40 00 b5 2b 40 00 b5 2b 40 00     ."@.."@..+@..+@.
  40007c:	b5 2b 40 00 bd 22 40 00 d5 22 40 00 b5 2b 40 00     .+@.."@.."@..+@.
  40008c:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .+@..+@..+@..+@.
  40009c:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .+@..+@..+@..+@.
  4000ac:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .+@..+@..+@..+@.
  4000bc:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .+@..+@..+@..+@.
  4000cc:	b5 2b 40 00 00 00 00 00 b5 2b 40 00 00 00 00 00     .+@......+@.....
  4000dc:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .+@..+@..+@..+@.
  4000ec:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .+@..+@..+@..+@.
  4000fc:	b5 2b 40 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .+@..+@..+@..+@.
  40010c:	b5 2b 40 00 b5 2b 40 00 00 00 00 00 00 00 00 00     .+@..+@.........
  40011c:	00 00 00 00 b5 2b 40 00 b5 2b 40 00 b5 2b 40 00     .....+@..+@..+@.
  40012c:	b5 2b 40 00 b5 2b 40 00 00 00 00 00 b5 2b 40 00     .+@..+@......+@.
  40013c:	b5 2b 40 00                                         .+@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e0 	.word	0x204009e0
  40015c:	00000000 	.word	0x00000000
  400160:	00408af4 	.word	0x00408af4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408af4 	.word	0x00408af4
  4001a0:	204009e4 	.word	0x204009e4
  4001a4:	00408af4 	.word	0x00408af4
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
  4001b4:	460b      	mov	r3, r1
  4001b6:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001b8:	887a      	ldrh	r2, [r7, #2]
  4001ba:	4b07      	ldr	r3, [pc, #28]	; (4001d8 <rtt_init+0x2c>)
  4001bc:	681b      	ldr	r3, [r3, #0]
  4001be:	4313      	orrs	r3, r2
  4001c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  4001c4:	687b      	ldr	r3, [r7, #4]
  4001c6:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  4001c8:	2300      	movs	r3, #0
}
  4001ca:	4618      	mov	r0, r3
  4001cc:	370c      	adds	r7, #12
  4001ce:	46bd      	mov	sp, r7
  4001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	204009fc 	.word	0x204009fc

004001dc <rtt_sel_source>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
  4001dc:	b480      	push	{r7}
  4001de:	b083      	sub	sp, #12
  4001e0:	af00      	add	r7, sp, #0
  4001e2:	6078      	str	r0, [r7, #4]
  4001e4:	460b      	mov	r3, r1
  4001e6:	70fb      	strb	r3, [r7, #3]
	if(is_rtc_sel) {
  4001e8:	78fb      	ldrb	r3, [r7, #3]
  4001ea:	2b00      	cmp	r3, #0
  4001ec:	d00d      	beq.n	40020a <rtt_sel_source+0x2e>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <rtt_sel_source+0x54>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001f6:	4a0e      	ldr	r2, [pc, #56]	; (400230 <rtt_sel_source+0x54>)
  4001f8:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	681a      	ldr	r2, [r3, #0]
  4001fe:	4b0c      	ldr	r3, [pc, #48]	; (400230 <rtt_sel_source+0x54>)
  400200:	681b      	ldr	r3, [r3, #0]
  400202:	431a      	orrs	r2, r3
  400204:	687b      	ldr	r3, [r7, #4]
  400206:	601a      	str	r2, [r3, #0]
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	}
}
  400208:	e00c      	b.n	400224 <rtt_sel_source+0x48>
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40020a:	4b09      	ldr	r3, [pc, #36]	; (400230 <rtt_sel_source+0x54>)
  40020c:	681b      	ldr	r3, [r3, #0]
  40020e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400212:	4a07      	ldr	r2, [pc, #28]	; (400230 <rtt_sel_source+0x54>)
  400214:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400216:	687b      	ldr	r3, [r7, #4]
  400218:	681a      	ldr	r2, [r3, #0]
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <rtt_sel_source+0x54>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	431a      	orrs	r2, r3
  400220:	687b      	ldr	r3, [r7, #4]
  400222:	601a      	str	r2, [r3, #0]
}
  400224:	bf00      	nop
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr
  400230:	204009fc 	.word	0x204009fc

00400234 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  400234:	b480      	push	{r7}
  400236:	b085      	sub	sp, #20
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
  40023c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	681b      	ldr	r3, [r3, #0]
  400242:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  400244:	68fa      	ldr	r2, [r7, #12]
  400246:	683b      	ldr	r3, [r7, #0]
  400248:	4313      	orrs	r3, r2
  40024a:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40024c:	4b06      	ldr	r3, [pc, #24]	; (400268 <rtt_enable_interrupt+0x34>)
  40024e:	681b      	ldr	r3, [r3, #0]
  400250:	68fa      	ldr	r2, [r7, #12]
  400252:	4313      	orrs	r3, r2
  400254:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400256:	687b      	ldr	r3, [r7, #4]
  400258:	68fa      	ldr	r2, [r7, #12]
  40025a:	601a      	str	r2, [r3, #0]
}
  40025c:	bf00      	nop
  40025e:	3714      	adds	r7, #20
  400260:	46bd      	mov	sp, r7
  400262:	f85d 7b04 	ldr.w	r7, [sp], #4
  400266:	4770      	bx	lr
  400268:	204009fc 	.word	0x204009fc

0040026c <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  40026c:	b480      	push	{r7}
  40026e:	b085      	sub	sp, #20
  400270:	af00      	add	r7, sp, #0
  400272:	6078      	str	r0, [r7, #4]
  400274:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  400276:	2300      	movs	r3, #0
  400278:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  40027a:	687b      	ldr	r3, [r7, #4]
  40027c:	681b      	ldr	r3, [r3, #0]
  40027e:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  400280:	683b      	ldr	r3, [r7, #0]
  400282:	43db      	mvns	r3, r3
  400284:	68fa      	ldr	r2, [r7, #12]
  400286:	4013      	ands	r3, r2
  400288:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40028a:	4b07      	ldr	r3, [pc, #28]	; (4002a8 <rtt_disable_interrupt+0x3c>)
  40028c:	681b      	ldr	r3, [r3, #0]
  40028e:	68fa      	ldr	r2, [r7, #12]
  400290:	4313      	orrs	r3, r2
  400292:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	68fa      	ldr	r2, [r7, #12]
  400298:	601a      	str	r2, [r3, #0]
}
  40029a:	bf00      	nop
  40029c:	3714      	adds	r7, #20
  40029e:	46bd      	mov	sp, r7
  4002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a4:	4770      	bx	lr
  4002a6:	bf00      	nop
  4002a8:	204009fc 	.word	0x204009fc

004002ac <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b085      	sub	sp, #20
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	689b      	ldr	r3, [r3, #8]
  4002b8:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  4002ba:	e002      	b.n	4002c2 <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  4002bc:	687b      	ldr	r3, [r7, #4]
  4002be:	689b      	ldr	r3, [r3, #8]
  4002c0:	60fb      	str	r3, [r7, #12]
	while (rtt_val != p_rtt->RTT_VR) {
  4002c2:	687b      	ldr	r3, [r7, #4]
  4002c4:	689a      	ldr	r2, [r3, #8]
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	429a      	cmp	r2, r3
  4002ca:	d1f7      	bne.n	4002bc <rtt_read_timer_value+0x10>
	}

	return rtt_val;
  4002cc:	68fb      	ldr	r3, [r7, #12]
}
  4002ce:	4618      	mov	r0, r3
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  4002da:	b480      	push	{r7}
  4002dc:	b083      	sub	sp, #12
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  4002e2:	687b      	ldr	r3, [r7, #4]
  4002e4:	68db      	ldr	r3, [r3, #12]
}
  4002e6:	4618      	mov	r0, r3
  4002e8:	370c      	adds	r7, #12
  4002ea:	46bd      	mov	sp, r7
  4002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f0:	4770      	bx	lr
	...

004002f4 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b084      	sub	sp, #16
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4002fe:	687b      	ldr	r3, [r7, #4]
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400306:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40030c:	480d      	ldr	r0, [pc, #52]	; (400344 <rtt_write_alarm_time+0x50>)
  40030e:	4b0e      	ldr	r3, [pc, #56]	; (400348 <rtt_write_alarm_time+0x54>)
  400310:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400312:	683b      	ldr	r3, [r7, #0]
  400314:	2b00      	cmp	r3, #0
  400316:	d104      	bne.n	400322 <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	f04f 32ff 	mov.w	r2, #4294967295
  40031e:	605a      	str	r2, [r3, #4]
  400320:	e003      	b.n	40032a <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400322:	683b      	ldr	r3, [r7, #0]
  400324:	1e5a      	subs	r2, r3, #1
  400326:	687b      	ldr	r3, [r7, #4]
  400328:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	2b00      	cmp	r3, #0
  40032e:	d004      	beq.n	40033a <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400334:	4803      	ldr	r0, [pc, #12]	; (400344 <rtt_write_alarm_time+0x50>)
  400336:	4b05      	ldr	r3, [pc, #20]	; (40034c <rtt_write_alarm_time+0x58>)
  400338:	4798      	blx	r3
	}

	return 0;
  40033a:	2300      	movs	r3, #0
}
  40033c:	4618      	mov	r0, r3
  40033e:	3710      	adds	r7, #16
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	400e1830 	.word	0x400e1830
  400348:	0040026d 	.word	0x0040026d
  40034c:	00400235 	.word	0x00400235

00400350 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  400350:	b480      	push	{r7}
  400352:	b083      	sub	sp, #12
  400354:	af00      	add	r7, sp, #0
  400356:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	685b      	ldr	r3, [r3, #4]
  40035c:	f003 0302 	and.w	r3, r3, #2
  400360:	2b00      	cmp	r3, #0
  400362:	d001      	beq.n	400368 <spi_get_peripheral_select_mode+0x18>
		return 1;
  400364:	2301      	movs	r3, #1
  400366:	e000      	b.n	40036a <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  400368:	2300      	movs	r3, #0
	}
}
  40036a:	4618      	mov	r0, r3
  40036c:	370c      	adds	r7, #12
  40036e:	46bd      	mov	sp, r7
  400370:	f85d 7b04 	ldr.w	r7, [sp], #4
  400374:	4770      	bx	lr
	...

00400378 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400378:	b580      	push	{r7, lr}
  40037a:	b082      	sub	sp, #8
  40037c:	af00      	add	r7, sp, #0
  40037e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400380:	6878      	ldr	r0, [r7, #4]
  400382:	4b03      	ldr	r3, [pc, #12]	; (400390 <sysclk_enable_peripheral_clock+0x18>)
  400384:	4798      	blx	r3
}
  400386:	bf00      	nop
  400388:	3708      	adds	r7, #8
  40038a:	46bd      	mov	sp, r7
  40038c:	bd80      	pop	{r7, pc}
  40038e:	bf00      	nop
  400390:	004025b1 	.word	0x004025b1

00400394 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	4a09      	ldr	r2, [pc, #36]	; (4003c4 <spi_enable_clock+0x30>)
  4003a0:	4293      	cmp	r3, r2
  4003a2:	d103      	bne.n	4003ac <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  4003a4:	2015      	movs	r0, #21
  4003a6:	4b08      	ldr	r3, [pc, #32]	; (4003c8 <spi_enable_clock+0x34>)
  4003a8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4003aa:	e006      	b.n	4003ba <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4003ac:	687b      	ldr	r3, [r7, #4]
  4003ae:	4a07      	ldr	r2, [pc, #28]	; (4003cc <spi_enable_clock+0x38>)
  4003b0:	4293      	cmp	r3, r2
  4003b2:	d102      	bne.n	4003ba <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4003b4:	202a      	movs	r0, #42	; 0x2a
  4003b6:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <spi_enable_clock+0x34>)
  4003b8:	4798      	blx	r3
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	40008000 	.word	0x40008000
  4003c8:	00400379 	.word	0x00400379
  4003cc:	40058000 	.word	0x40058000

004003d0 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4003d0:	b480      	push	{r7}
  4003d2:	b083      	sub	sp, #12
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003da:	687b      	ldr	r3, [r7, #4]
  4003dc:	685b      	ldr	r3, [r3, #4]
  4003de:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4003e2:	687b      	ldr	r3, [r7, #4]
  4003e4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003e6:	687b      	ldr	r3, [r7, #4]
  4003e8:	685a      	ldr	r2, [r3, #4]
  4003ea:	683b      	ldr	r3, [r7, #0]
  4003ec:	041b      	lsls	r3, r3, #16
  4003ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4003f2:	431a      	orrs	r2, r3
  4003f4:	687b      	ldr	r3, [r7, #4]
  4003f6:	605a      	str	r2, [r3, #4]
}
  4003f8:	bf00      	nop
  4003fa:	370c      	adds	r7, #12
  4003fc:	46bd      	mov	sp, r7
  4003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400402:	4770      	bx	lr

00400404 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400404:	b580      	push	{r7, lr}
  400406:	b084      	sub	sp, #16
  400408:	af00      	add	r7, sp, #0
  40040a:	6078      	str	r0, [r7, #4]
  40040c:	4608      	mov	r0, r1
  40040e:	4611      	mov	r1, r2
  400410:	461a      	mov	r2, r3
  400412:	4603      	mov	r3, r0
  400414:	807b      	strh	r3, [r7, #2]
  400416:	460b      	mov	r3, r1
  400418:	707b      	strb	r3, [r7, #1]
  40041a:	4613      	mov	r3, r2
  40041c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40041e:	f643 2398 	movw	r3, #15000	; 0x3a98
  400422:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400424:	e006      	b.n	400434 <spi_write+0x30>
		if (!timeout--) {
  400426:	68fb      	ldr	r3, [r7, #12]
  400428:	1e5a      	subs	r2, r3, #1
  40042a:	60fa      	str	r2, [r7, #12]
  40042c:	2b00      	cmp	r3, #0
  40042e:	d101      	bne.n	400434 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  400430:	2301      	movs	r3, #1
  400432:	e020      	b.n	400476 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	691b      	ldr	r3, [r3, #16]
  400438:	f003 0302 	and.w	r3, r3, #2
  40043c:	2b00      	cmp	r3, #0
  40043e:	d0f2      	beq.n	400426 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400440:	6878      	ldr	r0, [r7, #4]
  400442:	4b0f      	ldr	r3, [pc, #60]	; (400480 <spi_write+0x7c>)
  400444:	4798      	blx	r3
  400446:	4603      	mov	r3, r0
  400448:	2b00      	cmp	r3, #0
  40044a:	d00e      	beq.n	40046a <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40044c:	887a      	ldrh	r2, [r7, #2]
  40044e:	787b      	ldrb	r3, [r7, #1]
  400450:	041b      	lsls	r3, r3, #16
  400452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400456:	4313      	orrs	r3, r2
  400458:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  40045a:	783b      	ldrb	r3, [r7, #0]
  40045c:	2b00      	cmp	r3, #0
  40045e:	d006      	beq.n	40046e <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  400460:	68bb      	ldr	r3, [r7, #8]
  400462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400466:	60bb      	str	r3, [r7, #8]
  400468:	e001      	b.n	40046e <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  40046a:	887b      	ldrh	r3, [r7, #2]
  40046c:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  40046e:	687b      	ldr	r3, [r7, #4]
  400470:	68ba      	ldr	r2, [r7, #8]
  400472:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  400474:	2300      	movs	r3, #0
}
  400476:	4618      	mov	r0, r3
  400478:	3710      	adds	r7, #16
  40047a:	46bd      	mov	sp, r7
  40047c:	bd80      	pop	{r7, pc}
  40047e:	bf00      	nop
  400480:	00400351 	.word	0x00400351

00400484 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  400484:	b480      	push	{r7}
  400486:	b085      	sub	sp, #20
  400488:	af00      	add	r7, sp, #0
  40048a:	60f8      	str	r0, [r7, #12]
  40048c:	60b9      	str	r1, [r7, #8]
  40048e:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2b00      	cmp	r3, #0
  400494:	d00c      	beq.n	4004b0 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400496:	68fb      	ldr	r3, [r7, #12]
  400498:	68ba      	ldr	r2, [r7, #8]
  40049a:	320c      	adds	r2, #12
  40049c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004a0:	f043 0101 	orr.w	r1, r3, #1
  4004a4:	68fb      	ldr	r3, [r7, #12]
  4004a6:	68ba      	ldr	r2, [r7, #8]
  4004a8:	320c      	adds	r2, #12
  4004aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4004ae:	e00b      	b.n	4004c8 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	68ba      	ldr	r2, [r7, #8]
  4004b4:	320c      	adds	r2, #12
  4004b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004ba:	f023 0101 	bic.w	r1, r3, #1
  4004be:	68fb      	ldr	r3, [r7, #12]
  4004c0:	68ba      	ldr	r2, [r7, #8]
  4004c2:	320c      	adds	r2, #12
  4004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4004c8:	bf00      	nop
  4004ca:	3714      	adds	r7, #20
  4004cc:	46bd      	mov	sp, r7
  4004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004d2:	4770      	bx	lr

004004d4 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4004d4:	b480      	push	{r7}
  4004d6:	b085      	sub	sp, #20
  4004d8:	af00      	add	r7, sp, #0
  4004da:	60f8      	str	r0, [r7, #12]
  4004dc:	60b9      	str	r1, [r7, #8]
  4004de:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4004e0:	687b      	ldr	r3, [r7, #4]
  4004e2:	2b00      	cmp	r3, #0
  4004e4:	d00c      	beq.n	400500 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004e6:	68fb      	ldr	r3, [r7, #12]
  4004e8:	68ba      	ldr	r2, [r7, #8]
  4004ea:	320c      	adds	r2, #12
  4004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004f0:	f043 0102 	orr.w	r1, r3, #2
  4004f4:	68fb      	ldr	r3, [r7, #12]
  4004f6:	68ba      	ldr	r2, [r7, #8]
  4004f8:	320c      	adds	r2, #12
  4004fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  4004fe:	e00b      	b.n	400518 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400500:	68fb      	ldr	r3, [r7, #12]
  400502:	68ba      	ldr	r2, [r7, #8]
  400504:	320c      	adds	r2, #12
  400506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40050a:	f023 0102 	bic.w	r1, r3, #2
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	68ba      	ldr	r2, [r7, #8]
  400512:	320c      	adds	r2, #12
  400514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400518:	bf00      	nop
  40051a:	3714      	adds	r7, #20
  40051c:	46bd      	mov	sp, r7
  40051e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400522:	4770      	bx	lr

00400524 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400524:	b480      	push	{r7}
  400526:	b085      	sub	sp, #20
  400528:	af00      	add	r7, sp, #0
  40052a:	60f8      	str	r0, [r7, #12]
  40052c:	60b9      	str	r1, [r7, #8]
  40052e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	2b04      	cmp	r3, #4
  400534:	d118      	bne.n	400568 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	68ba      	ldr	r2, [r7, #8]
  40053a:	320c      	adds	r2, #12
  40053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400540:	f023 0108 	bic.w	r1, r3, #8
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	68ba      	ldr	r2, [r7, #8]
  400548:	320c      	adds	r2, #12
  40054a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40054e:	68fb      	ldr	r3, [r7, #12]
  400550:	68ba      	ldr	r2, [r7, #8]
  400552:	320c      	adds	r2, #12
  400554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400558:	f043 0104 	orr.w	r1, r3, #4
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	68ba      	ldr	r2, [r7, #8]
  400560:	320c      	adds	r2, #12
  400562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  400566:	e02a      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	2b00      	cmp	r3, #0
  40056c:	d118      	bne.n	4005a0 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40056e:	68fb      	ldr	r3, [r7, #12]
  400570:	68ba      	ldr	r2, [r7, #8]
  400572:	320c      	adds	r2, #12
  400574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400578:	f023 0108 	bic.w	r1, r3, #8
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	68ba      	ldr	r2, [r7, #8]
  400580:	320c      	adds	r2, #12
  400582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	68ba      	ldr	r2, [r7, #8]
  40058a:	320c      	adds	r2, #12
  40058c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400590:	f023 0104 	bic.w	r1, r3, #4
  400594:	68fb      	ldr	r3, [r7, #12]
  400596:	68ba      	ldr	r2, [r7, #8]
  400598:	320c      	adds	r2, #12
  40059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40059e:	e00e      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	2b08      	cmp	r3, #8
  4005a4:	d10b      	bne.n	4005be <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	68ba      	ldr	r2, [r7, #8]
  4005aa:	320c      	adds	r2, #12
  4005ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005b0:	f043 0108 	orr.w	r1, r3, #8
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	68ba      	ldr	r2, [r7, #8]
  4005b8:	320c      	adds	r2, #12
  4005ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4005be:	bf00      	nop
  4005c0:	3714      	adds	r7, #20
  4005c2:	46bd      	mov	sp, r7
  4005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c8:	4770      	bx	lr

004005ca <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005ca:	b480      	push	{r7}
  4005cc:	b085      	sub	sp, #20
  4005ce:	af00      	add	r7, sp, #0
  4005d0:	60f8      	str	r0, [r7, #12]
  4005d2:	60b9      	str	r1, [r7, #8]
  4005d4:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	68ba      	ldr	r2, [r7, #8]
  4005da:	320c      	adds	r2, #12
  4005dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005e0:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	68ba      	ldr	r2, [r7, #8]
  4005e8:	320c      	adds	r2, #12
  4005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	68ba      	ldr	r2, [r7, #8]
  4005f2:	320c      	adds	r2, #12
  4005f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	ea42 0103 	orr.w	r1, r2, r3
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	68ba      	ldr	r2, [r7, #8]
  400602:	320c      	adds	r2, #12
  400604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400608:	bf00      	nop
  40060a:	3714      	adds	r7, #20
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400614:	b480      	push	{r7}
  400616:	b085      	sub	sp, #20
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40061e:	683a      	ldr	r2, [r7, #0]
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	4413      	add	r3, r2
  400624:	1e5a      	subs	r2, r3, #1
  400626:	687b      	ldr	r3, [r7, #4]
  400628:	fbb2 f3f3 	udiv	r3, r2, r3
  40062c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	2b00      	cmp	r3, #0
  400632:	dd02      	ble.n	40063a <spi_calc_baudrate_div+0x26>
  400634:	68fb      	ldr	r3, [r7, #12]
  400636:	2bff      	cmp	r3, #255	; 0xff
  400638:	dd02      	ble.n	400640 <spi_calc_baudrate_div+0x2c>
		return -1;
  40063a:	f04f 33ff 	mov.w	r3, #4294967295
  40063e:	e001      	b.n	400644 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	b21b      	sxth	r3, r3
}
  400644:	4618      	mov	r0, r3
  400646:	3714      	adds	r7, #20
  400648:	46bd      	mov	sp, r7
  40064a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40064e:	4770      	bx	lr

00400650 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400650:	b480      	push	{r7}
  400652:	b085      	sub	sp, #20
  400654:	af00      	add	r7, sp, #0
  400656:	60f8      	str	r0, [r7, #12]
  400658:	60b9      	str	r1, [r7, #8]
  40065a:	4613      	mov	r3, r2
  40065c:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40065e:	79fb      	ldrb	r3, [r7, #7]
  400660:	2b00      	cmp	r3, #0
  400662:	d102      	bne.n	40066a <spi_set_baudrate_div+0x1a>
        return -1;
  400664:	f04f 33ff 	mov.w	r3, #4294967295
  400668:	e01b      	b.n	4006a2 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	68ba      	ldr	r2, [r7, #8]
  40066e:	320c      	adds	r2, #12
  400670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400674:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	68ba      	ldr	r2, [r7, #8]
  40067c:	320c      	adds	r2, #12
  40067e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	68ba      	ldr	r2, [r7, #8]
  400686:	320c      	adds	r2, #12
  400688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  40068c:	79fb      	ldrb	r3, [r7, #7]
  40068e:	021b      	lsls	r3, r3, #8
  400690:	b29b      	uxth	r3, r3
  400692:	ea42 0103 	orr.w	r1, r2, r3
  400696:	68fb      	ldr	r3, [r7, #12]
  400698:	68ba      	ldr	r2, [r7, #8]
  40069a:	320c      	adds	r2, #12
  40069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4006a0:	2300      	movs	r3, #0
}
  4006a2:	4618      	mov	r0, r3
  4006a4:	3714      	adds	r7, #20
  4006a6:	46bd      	mov	sp, r7
  4006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ac:	4770      	bx	lr
	...

004006b0 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  4006b8:	4a04      	ldr	r2, [pc, #16]	; (4006cc <gfx_mono_set_framebuffer+0x1c>)
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	6013      	str	r3, [r2, #0]
}
  4006be:	bf00      	nop
  4006c0:	370c      	adds	r7, #12
  4006c2:	46bd      	mov	sp, r7
  4006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006c8:	4770      	bx	lr
  4006ca:	bf00      	nop
  4006cc:	20400a00 	.word	0x20400a00

004006d0 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  4006d0:	b480      	push	{r7}
  4006d2:	b083      	sub	sp, #12
  4006d4:	af00      	add	r7, sp, #0
  4006d6:	4603      	mov	r3, r0
  4006d8:	71fb      	strb	r3, [r7, #7]
  4006da:	460b      	mov	r3, r1
  4006dc:	71bb      	strb	r3, [r7, #6]
  4006de:	4613      	mov	r3, r2
  4006e0:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4006e2:	4b08      	ldr	r3, [pc, #32]	; (400704 <gfx_mono_framebuffer_put_byte+0x34>)
  4006e4:	681a      	ldr	r2, [r3, #0]
  4006e6:	79fb      	ldrb	r3, [r7, #7]
  4006e8:	01db      	lsls	r3, r3, #7
  4006ea:	4619      	mov	r1, r3
  4006ec:	79bb      	ldrb	r3, [r7, #6]
  4006ee:	440b      	add	r3, r1
  4006f0:	4413      	add	r3, r2
  4006f2:	797a      	ldrb	r2, [r7, #5]
  4006f4:	701a      	strb	r2, [r3, #0]
}
  4006f6:	bf00      	nop
  4006f8:	370c      	adds	r7, #12
  4006fa:	46bd      	mov	sp, r7
  4006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400700:	4770      	bx	lr
  400702:	bf00      	nop
  400704:	20400a00 	.word	0x20400a00

00400708 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400708:	b480      	push	{r7}
  40070a:	b083      	sub	sp, #12
  40070c:	af00      	add	r7, sp, #0
  40070e:	4603      	mov	r3, r0
  400710:	460a      	mov	r2, r1
  400712:	71fb      	strb	r3, [r7, #7]
  400714:	4613      	mov	r3, r2
  400716:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400718:	4b07      	ldr	r3, [pc, #28]	; (400738 <gfx_mono_framebuffer_get_byte+0x30>)
  40071a:	681a      	ldr	r2, [r3, #0]
  40071c:	79fb      	ldrb	r3, [r7, #7]
  40071e:	01db      	lsls	r3, r3, #7
  400720:	4619      	mov	r1, r3
  400722:	79bb      	ldrb	r3, [r7, #6]
  400724:	440b      	add	r3, r1
  400726:	4413      	add	r3, r2
  400728:	781b      	ldrb	r3, [r3, #0]
}
  40072a:	4618      	mov	r0, r3
  40072c:	370c      	adds	r7, #12
  40072e:	46bd      	mov	sp, r7
  400730:	f85d 7b04 	ldr.w	r7, [sp], #4
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	20400a00 	.word	0x20400a00

0040073c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  40073c:	b590      	push	{r4, r7, lr}
  40073e:	b085      	sub	sp, #20
  400740:	af00      	add	r7, sp, #0
  400742:	4604      	mov	r4, r0
  400744:	4608      	mov	r0, r1
  400746:	4611      	mov	r1, r2
  400748:	461a      	mov	r2, r3
  40074a:	4623      	mov	r3, r4
  40074c:	71fb      	strb	r3, [r7, #7]
  40074e:	4603      	mov	r3, r0
  400750:	71bb      	strb	r3, [r7, #6]
  400752:	460b      	mov	r3, r1
  400754:	717b      	strb	r3, [r7, #5]
  400756:	4613      	mov	r3, r2
  400758:	713b      	strb	r3, [r7, #4]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  40075a:	79fa      	ldrb	r2, [r7, #7]
  40075c:	797b      	ldrb	r3, [r7, #5]
  40075e:	4413      	add	r3, r2
  400760:	2b80      	cmp	r3, #128	; 0x80
  400762:	dd06      	ble.n	400772 <gfx_mono_generic_draw_horizontal_line+0x36>
		length = GFX_MONO_LCD_WIDTH - x;
  400764:	79fb      	ldrb	r3, [r7, #7]
  400766:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
  40076a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  40076e:	3380      	adds	r3, #128	; 0x80
  400770:	717b      	strb	r3, [r7, #5]
	}

	page = y / 8;
  400772:	79bb      	ldrb	r3, [r7, #6]
  400774:	08db      	lsrs	r3, r3, #3
  400776:	73fb      	strb	r3, [r7, #15]
	pixelmask = (1 << (y - (page * 8)));
  400778:	79ba      	ldrb	r2, [r7, #6]
  40077a:	7bfb      	ldrb	r3, [r7, #15]
  40077c:	00db      	lsls	r3, r3, #3
  40077e:	1ad3      	subs	r3, r2, r3
  400780:	2201      	movs	r2, #1
  400782:	fa02 f303 	lsl.w	r3, r2, r3
  400786:	73bb      	strb	r3, [r7, #14]

	if (length == 0) {
  400788:	797b      	ldrb	r3, [r7, #5]
  40078a:	2b00      	cmp	r3, #0
  40078c:	d066      	beq.n	40085c <gfx_mono_generic_draw_horizontal_line+0x120>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  40078e:	793b      	ldrb	r3, [r7, #4]
  400790:	2b01      	cmp	r3, #1
  400792:	d01c      	beq.n	4007ce <gfx_mono_generic_draw_horizontal_line+0x92>
  400794:	2b02      	cmp	r3, #2
  400796:	d05b      	beq.n	400850 <gfx_mono_generic_draw_horizontal_line+0x114>
  400798:	2b00      	cmp	r3, #0
  40079a:	d03b      	beq.n	400814 <gfx_mono_generic_draw_horizontal_line+0xd8>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
  40079c:	e05f      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  40079e:	79fa      	ldrb	r2, [r7, #7]
  4007a0:	797b      	ldrb	r3, [r7, #5]
  4007a2:	4413      	add	r3, r2
  4007a4:	b2da      	uxtb	r2, r3
  4007a6:	7bfb      	ldrb	r3, [r7, #15]
  4007a8:	4611      	mov	r1, r2
  4007aa:	4618      	mov	r0, r3
  4007ac:	4b2d      	ldr	r3, [pc, #180]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  4007ae:	4798      	blx	r3
  4007b0:	4603      	mov	r3, r0
  4007b2:	737b      	strb	r3, [r7, #13]
			temp |= pixelmask;
  4007b4:	7b7a      	ldrb	r2, [r7, #13]
  4007b6:	7bbb      	ldrb	r3, [r7, #14]
  4007b8:	4313      	orrs	r3, r2
  4007ba:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  4007bc:	79fa      	ldrb	r2, [r7, #7]
  4007be:	797b      	ldrb	r3, [r7, #5]
  4007c0:	4413      	add	r3, r2
  4007c2:	b2d9      	uxtb	r1, r3
  4007c4:	7b7a      	ldrb	r2, [r7, #13]
  4007c6:	7bf8      	ldrb	r0, [r7, #15]
  4007c8:	2300      	movs	r3, #0
  4007ca:	4c27      	ldr	r4, [pc, #156]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  4007cc:	47a0      	blx	r4
		while (length-- > 0) {
  4007ce:	797b      	ldrb	r3, [r7, #5]
  4007d0:	1e5a      	subs	r2, r3, #1
  4007d2:	717a      	strb	r2, [r7, #5]
  4007d4:	2b00      	cmp	r3, #0
  4007d6:	d1e2      	bne.n	40079e <gfx_mono_generic_draw_horizontal_line+0x62>
		break;
  4007d8:	e041      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  4007da:	79fa      	ldrb	r2, [r7, #7]
  4007dc:	797b      	ldrb	r3, [r7, #5]
  4007de:	4413      	add	r3, r2
  4007e0:	b2da      	uxtb	r2, r3
  4007e2:	7bfb      	ldrb	r3, [r7, #15]
  4007e4:	4611      	mov	r1, r2
  4007e6:	4618      	mov	r0, r3
  4007e8:	4b1e      	ldr	r3, [pc, #120]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  4007ea:	4798      	blx	r3
  4007ec:	4603      	mov	r3, r0
  4007ee:	737b      	strb	r3, [r7, #13]
			temp &= ~pixelmask;
  4007f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
  4007f4:	43db      	mvns	r3, r3
  4007f6:	b25a      	sxtb	r2, r3
  4007f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
  4007fc:	4013      	ands	r3, r2
  4007fe:	b25b      	sxtb	r3, r3
  400800:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400802:	79fa      	ldrb	r2, [r7, #7]
  400804:	797b      	ldrb	r3, [r7, #5]
  400806:	4413      	add	r3, r2
  400808:	b2d9      	uxtb	r1, r3
  40080a:	7b7a      	ldrb	r2, [r7, #13]
  40080c:	7bf8      	ldrb	r0, [r7, #15]
  40080e:	2300      	movs	r3, #0
  400810:	4c15      	ldr	r4, [pc, #84]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400812:	47a0      	blx	r4
		while (length-- > 0) {
  400814:	797b      	ldrb	r3, [r7, #5]
  400816:	1e5a      	subs	r2, r3, #1
  400818:	717a      	strb	r2, [r7, #5]
  40081a:	2b00      	cmp	r3, #0
  40081c:	d1dd      	bne.n	4007da <gfx_mono_generic_draw_horizontal_line+0x9e>
		break;
  40081e:	e01e      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400820:	79fa      	ldrb	r2, [r7, #7]
  400822:	797b      	ldrb	r3, [r7, #5]
  400824:	4413      	add	r3, r2
  400826:	b2da      	uxtb	r2, r3
  400828:	7bfb      	ldrb	r3, [r7, #15]
  40082a:	4611      	mov	r1, r2
  40082c:	4618      	mov	r0, r3
  40082e:	4b0d      	ldr	r3, [pc, #52]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400830:	4798      	blx	r3
  400832:	4603      	mov	r3, r0
  400834:	737b      	strb	r3, [r7, #13]
			temp ^= pixelmask;
  400836:	7b7a      	ldrb	r2, [r7, #13]
  400838:	7bbb      	ldrb	r3, [r7, #14]
  40083a:	4053      	eors	r3, r2
  40083c:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  40083e:	79fa      	ldrb	r2, [r7, #7]
  400840:	797b      	ldrb	r3, [r7, #5]
  400842:	4413      	add	r3, r2
  400844:	b2d9      	uxtb	r1, r3
  400846:	7b7a      	ldrb	r2, [r7, #13]
  400848:	7bf8      	ldrb	r0, [r7, #15]
  40084a:	2300      	movs	r3, #0
  40084c:	4c06      	ldr	r4, [pc, #24]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  40084e:	47a0      	blx	r4
		while (length-- > 0) {
  400850:	797b      	ldrb	r3, [r7, #5]
  400852:	1e5a      	subs	r2, r3, #1
  400854:	717a      	strb	r2, [r7, #5]
  400856:	2b00      	cmp	r3, #0
  400858:	d1e2      	bne.n	400820 <gfx_mono_generic_draw_horizontal_line+0xe4>
		break;
  40085a:	e000      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
		return;
  40085c:	bf00      	nop
	}
}
  40085e:	3714      	adds	r7, #20
  400860:	46bd      	mov	sp, r7
  400862:	bd90      	pop	{r4, r7, pc}
  400864:	00400c79 	.word	0x00400c79
  400868:	00400bf5 	.word	0x00400bf5

0040086c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40086c:	b590      	push	{r4, r7, lr}
  40086e:	b083      	sub	sp, #12
  400870:	af00      	add	r7, sp, #0
  400872:	4604      	mov	r4, r0
  400874:	4608      	mov	r0, r1
  400876:	4611      	mov	r1, r2
  400878:	461a      	mov	r2, r3
  40087a:	4623      	mov	r3, r4
  40087c:	71fb      	strb	r3, [r7, #7]
  40087e:	4603      	mov	r3, r0
  400880:	71bb      	strb	r3, [r7, #6]
  400882:	460b      	mov	r3, r1
  400884:	717b      	strb	r3, [r7, #5]
  400886:	4613      	mov	r3, r2
  400888:	713b      	strb	r3, [r7, #4]
	if (height == 0) {
  40088a:	793b      	ldrb	r3, [r7, #4]
  40088c:	2b00      	cmp	r3, #0
  40088e:	d00f      	beq.n	4008b0 <gfx_mono_generic_draw_filled_rect+0x44>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
  400890:	e008      	b.n	4008a4 <gfx_mono_generic_draw_filled_rect+0x38>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400892:	79ba      	ldrb	r2, [r7, #6]
  400894:	793b      	ldrb	r3, [r7, #4]
  400896:	4413      	add	r3, r2
  400898:	b2d9      	uxtb	r1, r3
  40089a:	7e3b      	ldrb	r3, [r7, #24]
  40089c:	797a      	ldrb	r2, [r7, #5]
  40089e:	79f8      	ldrb	r0, [r7, #7]
  4008a0:	4c05      	ldr	r4, [pc, #20]	; (4008b8 <gfx_mono_generic_draw_filled_rect+0x4c>)
  4008a2:	47a0      	blx	r4
	while (height-- > 0) {
  4008a4:	793b      	ldrb	r3, [r7, #4]
  4008a6:	1e5a      	subs	r2, r3, #1
  4008a8:	713a      	strb	r2, [r7, #4]
  4008aa:	2b00      	cmp	r3, #0
  4008ac:	d1f1      	bne.n	400892 <gfx_mono_generic_draw_filled_rect+0x26>
  4008ae:	e000      	b.n	4008b2 <gfx_mono_generic_draw_filled_rect+0x46>
		return;
  4008b0:	bf00      	nop
	}
}
  4008b2:	370c      	adds	r7, #12
  4008b4:	46bd      	mov	sp, r7
  4008b6:	bd90      	pop	{r4, r7, pc}
  4008b8:	0040073d 	.word	0x0040073d

004008bc <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
  4008bc:	b580      	push	{r7, lr}
  4008be:	b086      	sub	sp, #24
  4008c0:	af00      	add	r7, sp, #0
  4008c2:	603b      	str	r3, [r7, #0]
  4008c4:	4603      	mov	r3, r0
  4008c6:	71fb      	strb	r3, [r7, #7]
  4008c8:	460b      	mov	r3, r1
  4008ca:	71bb      	strb	r3, [r7, #6]
  4008cc:	4613      	mov	r3, r2
  4008ce:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
  4008d0:	79bb      	ldrb	r3, [r7, #6]
  4008d2:	743b      	strb	r3, [r7, #16]
	gfx_coord_t inc_y = y;
  4008d4:	797b      	ldrb	r3, [r7, #5]
  4008d6:	73fb      	strb	r3, [r7, #15]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4008d8:	683b      	ldr	r3, [r7, #0]
  4008da:	7a1b      	ldrb	r3, [r3, #8]
  4008dc:	08db      	lsrs	r3, r3, #3
  4008de:	74fb      	strb	r3, [r7, #19]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4008e0:	683b      	ldr	r3, [r7, #0]
  4008e2:	7a1b      	ldrb	r3, [r3, #8]
  4008e4:	f003 0307 	and.w	r3, r3, #7
  4008e8:	b2db      	uxtb	r3, r3
  4008ea:	2b00      	cmp	r3, #0
  4008ec:	d002      	beq.n	4008f4 <gfx_mono_draw_char_progmem+0x38>
		char_row_size++;
  4008ee:	7cfb      	ldrb	r3, [r7, #19]
  4008f0:	3301      	adds	r3, #1
  4008f2:	74fb      	strb	r3, [r7, #19]
	}

	glyph_data_offset = char_row_size * font->height *
  4008f4:	7cfb      	ldrb	r3, [r7, #19]
  4008f6:	b29a      	uxth	r2, r3
  4008f8:	683b      	ldr	r3, [r7, #0]
  4008fa:	7a5b      	ldrb	r3, [r3, #9]
  4008fc:	b29b      	uxth	r3, r3
  4008fe:	fb12 f303 	smulbb	r3, r2, r3
  400902:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
  400904:	79fb      	ldrb	r3, [r7, #7]
  400906:	6839      	ldr	r1, [r7, #0]
  400908:	7a89      	ldrb	r1, [r1, #10]
  40090a:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
  40090c:	b29b      	uxth	r3, r3
  40090e:	fb12 f303 	smulbb	r3, r2, r3
  400912:	81bb      	strh	r3, [r7, #12]
	glyph_data = font->data.progmem + glyph_data_offset;
  400914:	683b      	ldr	r3, [r7, #0]
  400916:	685a      	ldr	r2, [r3, #4]
  400918:	89bb      	ldrh	r3, [r7, #12]
  40091a:	4413      	add	r3, r2
  40091c:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
  40091e:	683b      	ldr	r3, [r7, #0]
  400920:	7a5b      	ldrb	r3, [r3, #9]
  400922:	74bb      	strb	r3, [r7, #18]

	do {
		uint8_t glyph_byte = 0;
  400924:	2300      	movs	r3, #0
  400926:	73bb      	strb	r3, [r7, #14]
		uint8_t pixelsToDraw = font->width;
  400928:	683b      	ldr	r3, [r7, #0]
  40092a:	7a1b      	ldrb	r3, [r3, #8]
  40092c:	72fb      	strb	r3, [r7, #11]

		for (i = 0; i < pixelsToDraw; i++) {
  40092e:	2300      	movs	r3, #0
  400930:	747b      	strb	r3, [r7, #17]
  400932:	e01e      	b.n	400972 <gfx_mono_draw_char_progmem+0xb6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400934:	7c7b      	ldrb	r3, [r7, #17]
  400936:	f003 0307 	and.w	r3, r3, #7
  40093a:	b2db      	uxtb	r3, r3
  40093c:	2b00      	cmp	r3, #0
  40093e:	d105      	bne.n	40094c <gfx_mono_draw_char_progmem+0x90>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400940:	697b      	ldr	r3, [r7, #20]
  400942:	781b      	ldrb	r3, [r3, #0]
  400944:	73bb      	strb	r3, [r7, #14]
				glyph_data++;
  400946:	697b      	ldr	r3, [r7, #20]
  400948:	3301      	adds	r3, #1
  40094a:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
  40094c:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400950:	2b00      	cmp	r3, #0
  400952:	da05      	bge.n	400960 <gfx_mono_draw_char_progmem+0xa4>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400954:	7bf9      	ldrb	r1, [r7, #15]
  400956:	7c3b      	ldrb	r3, [r7, #16]
  400958:	2201      	movs	r2, #1
  40095a:	4618      	mov	r0, r3
  40095c:	4b0e      	ldr	r3, [pc, #56]	; (400998 <gfx_mono_draw_char_progmem+0xdc>)
  40095e:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
  400960:	7c3b      	ldrb	r3, [r7, #16]
  400962:	3301      	adds	r3, #1
  400964:	743b      	strb	r3, [r7, #16]
			glyph_byte <<= 1;
  400966:	7bbb      	ldrb	r3, [r7, #14]
  400968:	005b      	lsls	r3, r3, #1
  40096a:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < pixelsToDraw; i++) {
  40096c:	7c7b      	ldrb	r3, [r7, #17]
  40096e:	3301      	adds	r3, #1
  400970:	747b      	strb	r3, [r7, #17]
  400972:	7c7a      	ldrb	r2, [r7, #17]
  400974:	7afb      	ldrb	r3, [r7, #11]
  400976:	429a      	cmp	r2, r3
  400978:	d3dc      	bcc.n	400934 <gfx_mono_draw_char_progmem+0x78>
		}

		inc_y += 1;
  40097a:	7bfb      	ldrb	r3, [r7, #15]
  40097c:	3301      	adds	r3, #1
  40097e:	73fb      	strb	r3, [r7, #15]
		inc_x = x;
  400980:	79bb      	ldrb	r3, [r7, #6]
  400982:	743b      	strb	r3, [r7, #16]
		rows_left--;
  400984:	7cbb      	ldrb	r3, [r7, #18]
  400986:	3b01      	subs	r3, #1
  400988:	74bb      	strb	r3, [r7, #18]
	} while (rows_left > 0);
  40098a:	7cbb      	ldrb	r3, [r7, #18]
  40098c:	2b00      	cmp	r3, #0
  40098e:	d1c9      	bne.n	400924 <gfx_mono_draw_char_progmem+0x68>
}
  400990:	bf00      	nop
  400992:	3718      	adds	r7, #24
  400994:	46bd      	mov	sp, r7
  400996:	bd80      	pop	{r7, pc}
  400998:	00400b59 	.word	0x00400b59

0040099c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40099c:	b590      	push	{r4, r7, lr}
  40099e:	b085      	sub	sp, #20
  4009a0:	af02      	add	r7, sp, #8
  4009a2:	603b      	str	r3, [r7, #0]
  4009a4:	4603      	mov	r3, r0
  4009a6:	71fb      	strb	r3, [r7, #7]
  4009a8:	460b      	mov	r3, r1
  4009aa:	71bb      	strb	r3, [r7, #6]
  4009ac:	4613      	mov	r3, r2
  4009ae:	717b      	strb	r3, [r7, #5]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4009b0:	683b      	ldr	r3, [r7, #0]
  4009b2:	7a1a      	ldrb	r2, [r3, #8]
  4009b4:	683b      	ldr	r3, [r7, #0]
  4009b6:	7a5c      	ldrb	r4, [r3, #9]
  4009b8:	7979      	ldrb	r1, [r7, #5]
  4009ba:	79b8      	ldrb	r0, [r7, #6]
  4009bc:	2300      	movs	r3, #0
  4009be:	9300      	str	r3, [sp, #0]
  4009c0:	4623      	mov	r3, r4
  4009c2:	4c09      	ldr	r4, [pc, #36]	; (4009e8 <gfx_mono_draw_char+0x4c>)
  4009c4:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
  4009c6:	683b      	ldr	r3, [r7, #0]
  4009c8:	781b      	ldrb	r3, [r3, #0]
  4009ca:	2b00      	cmp	r3, #0
  4009cc:	d000      	beq.n	4009d0 <gfx_mono_draw_char+0x34>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
  4009ce:	e006      	b.n	4009de <gfx_mono_draw_char+0x42>
		gfx_mono_draw_char_progmem(c, x, y, font);
  4009d0:	797a      	ldrb	r2, [r7, #5]
  4009d2:	79b9      	ldrb	r1, [r7, #6]
  4009d4:	79f8      	ldrb	r0, [r7, #7]
  4009d6:	683b      	ldr	r3, [r7, #0]
  4009d8:	4c04      	ldr	r4, [pc, #16]	; (4009ec <gfx_mono_draw_char+0x50>)
  4009da:	47a0      	blx	r4
		break;
  4009dc:	bf00      	nop
	}
}
  4009de:	bf00      	nop
  4009e0:	370c      	adds	r7, #12
  4009e2:	46bd      	mov	sp, r7
  4009e4:	bd90      	pop	{r4, r7, pc}
  4009e6:	bf00      	nop
  4009e8:	0040086d 	.word	0x0040086d
  4009ec:	004008bd 	.word	0x004008bd

004009f0 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4009f0:	b590      	push	{r4, r7, lr}
  4009f2:	b087      	sub	sp, #28
  4009f4:	af00      	add	r7, sp, #0
  4009f6:	60f8      	str	r0, [r7, #12]
  4009f8:	607b      	str	r3, [r7, #4]
  4009fa:	460b      	mov	r3, r1
  4009fc:	72fb      	strb	r3, [r7, #11]
  4009fe:	4613      	mov	r3, r2
  400a00:	72bb      	strb	r3, [r7, #10]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
  400a02:	7afb      	ldrb	r3, [r7, #11]
  400a04:	75fb      	strb	r3, [r7, #23]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
  400a06:	68fb      	ldr	r3, [r7, #12]
  400a08:	781b      	ldrb	r3, [r3, #0]
  400a0a:	2b0a      	cmp	r3, #10
  400a0c:	d109      	bne.n	400a22 <gfx_mono_draw_string+0x32>
			x = start_of_string_position_x;
  400a0e:	7dfb      	ldrb	r3, [r7, #23]
  400a10:	72fb      	strb	r3, [r7, #11]
			y += font->height + 1;
  400a12:	687b      	ldr	r3, [r7, #4]
  400a14:	7a5a      	ldrb	r2, [r3, #9]
  400a16:	7abb      	ldrb	r3, [r7, #10]
  400a18:	4413      	add	r3, r2
  400a1a:	b2db      	uxtb	r3, r3
  400a1c:	3301      	adds	r3, #1
  400a1e:	72bb      	strb	r3, [r7, #10]
  400a20:	e00f      	b.n	400a42 <gfx_mono_draw_string+0x52>
		} else if (*str == '\r') {
  400a22:	68fb      	ldr	r3, [r7, #12]
  400a24:	781b      	ldrb	r3, [r3, #0]
  400a26:	2b0d      	cmp	r3, #13
  400a28:	d00b      	beq.n	400a42 <gfx_mono_draw_string+0x52>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400a2a:	68fb      	ldr	r3, [r7, #12]
  400a2c:	7818      	ldrb	r0, [r3, #0]
  400a2e:	7aba      	ldrb	r2, [r7, #10]
  400a30:	7af9      	ldrb	r1, [r7, #11]
  400a32:	687b      	ldr	r3, [r7, #4]
  400a34:	4c08      	ldr	r4, [pc, #32]	; (400a58 <gfx_mono_draw_string+0x68>)
  400a36:	47a0      	blx	r4
			x += font->width;
  400a38:	687b      	ldr	r3, [r7, #4]
  400a3a:	7a1a      	ldrb	r2, [r3, #8]
  400a3c:	7afb      	ldrb	r3, [r7, #11]
  400a3e:	4413      	add	r3, r2
  400a40:	72fb      	strb	r3, [r7, #11]
		}
	} while (*(++str));
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	3301      	adds	r3, #1
  400a46:	60fb      	str	r3, [r7, #12]
  400a48:	68fb      	ldr	r3, [r7, #12]
  400a4a:	781b      	ldrb	r3, [r3, #0]
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d1da      	bne.n	400a06 <gfx_mono_draw_string+0x16>
}
  400a50:	bf00      	nop
  400a52:	371c      	adds	r7, #28
  400a54:	46bd      	mov	sp, r7
  400a56:	bd90      	pop	{r4, r7, pc}
  400a58:	0040099d 	.word	0x0040099d

00400a5c <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  400a5c:	b580      	push	{r7, lr}
  400a5e:	b082      	sub	sp, #8
  400a60:	af00      	add	r7, sp, #0
  400a62:	4603      	mov	r3, r0
  400a64:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400a66:	79fb      	ldrb	r3, [r7, #7]
  400a68:	f003 030f 	and.w	r3, r3, #15
  400a6c:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400a6e:	79fb      	ldrb	r3, [r7, #7]
  400a70:	f063 034f 	orn	r3, r3, #79	; 0x4f
  400a74:	b2db      	uxtb	r3, r3
  400a76:	4618      	mov	r0, r3
  400a78:	4b02      	ldr	r3, [pc, #8]	; (400a84 <ssd1306_set_page_address+0x28>)
  400a7a:	4798      	blx	r3
	
}
  400a7c:	bf00      	nop
  400a7e:	3708      	adds	r7, #8
  400a80:	46bd      	mov	sp, r7
  400a82:	bd80      	pop	{r7, pc}
  400a84:	00401361 	.word	0x00401361

00400a88 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  400a88:	b580      	push	{r7, lr}
  400a8a:	b082      	sub	sp, #8
  400a8c:	af00      	add	r7, sp, #0
  400a8e:	4603      	mov	r3, r0
  400a90:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  400a92:	79fb      	ldrb	r3, [r7, #7]
  400a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400a98:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400a9a:	79fb      	ldrb	r3, [r7, #7]
  400a9c:	091b      	lsrs	r3, r3, #4
  400a9e:	b2db      	uxtb	r3, r3
  400aa0:	f043 0310 	orr.w	r3, r3, #16
  400aa4:	b2db      	uxtb	r3, r3
  400aa6:	4618      	mov	r0, r3
  400aa8:	4b06      	ldr	r3, [pc, #24]	; (400ac4 <ssd1306_set_column_address+0x3c>)
  400aaa:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400aac:	79fb      	ldrb	r3, [r7, #7]
  400aae:	f003 030f 	and.w	r3, r3, #15
  400ab2:	b2db      	uxtb	r3, r3
  400ab4:	4618      	mov	r0, r3
  400ab6:	4b03      	ldr	r3, [pc, #12]	; (400ac4 <ssd1306_set_column_address+0x3c>)
  400ab8:	4798      	blx	r3
}
  400aba:	bf00      	nop
  400abc:	3708      	adds	r7, #8
  400abe:	46bd      	mov	sp, r7
  400ac0:	bd80      	pop	{r7, pc}
  400ac2:	bf00      	nop
  400ac4:	00401361 	.word	0x00401361

00400ac8 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  400ac8:	b580      	push	{r7, lr}
  400aca:	b082      	sub	sp, #8
  400acc:	af00      	add	r7, sp, #0
  400ace:	4603      	mov	r3, r0
  400ad0:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  400ad2:	79fb      	ldrb	r3, [r7, #7]
  400ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400ad8:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400ada:	79fb      	ldrb	r3, [r7, #7]
  400adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400ae0:	b2db      	uxtb	r3, r3
  400ae2:	4618      	mov	r0, r3
  400ae4:	4b02      	ldr	r3, [pc, #8]	; (400af0 <ssd1306_set_display_start_line_address+0x28>)
  400ae6:	4798      	blx	r3
}
  400ae8:	bf00      	nop
  400aea:	3708      	adds	r7, #8
  400aec:	46bd      	mov	sp, r7
  400aee:	bd80      	pop	{r7, pc}
  400af0:	00401361 	.word	0x00401361

00400af4 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400af4:	b590      	push	{r4, r7, lr}
  400af6:	b083      	sub	sp, #12
  400af8:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400afa:	4812      	ldr	r0, [pc, #72]	; (400b44 <gfx_mono_ssd1306_init+0x50>)
  400afc:	4b12      	ldr	r3, [pc, #72]	; (400b48 <gfx_mono_ssd1306_init+0x54>)
  400afe:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  400b00:	4b12      	ldr	r3, [pc, #72]	; (400b4c <gfx_mono_ssd1306_init+0x58>)
  400b02:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400b04:	2000      	movs	r0, #0
  400b06:	4b12      	ldr	r3, [pc, #72]	; (400b50 <gfx_mono_ssd1306_init+0x5c>)
  400b08:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b0a:	2300      	movs	r3, #0
  400b0c:	71fb      	strb	r3, [r7, #7]
  400b0e:	e012      	b.n	400b36 <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b10:	2300      	movs	r3, #0
  400b12:	71bb      	strb	r3, [r7, #6]
  400b14:	e008      	b.n	400b28 <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b16:	79b9      	ldrb	r1, [r7, #6]
  400b18:	79f8      	ldrb	r0, [r7, #7]
  400b1a:	2301      	movs	r3, #1
  400b1c:	2200      	movs	r2, #0
  400b1e:	4c0d      	ldr	r4, [pc, #52]	; (400b54 <gfx_mono_ssd1306_init+0x60>)
  400b20:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b22:	79bb      	ldrb	r3, [r7, #6]
  400b24:	3301      	adds	r3, #1
  400b26:	71bb      	strb	r3, [r7, #6]
  400b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400b2c:	2b00      	cmp	r3, #0
  400b2e:	daf2      	bge.n	400b16 <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b30:	79fb      	ldrb	r3, [r7, #7]
  400b32:	3301      	adds	r3, #1
  400b34:	71fb      	strb	r3, [r7, #7]
  400b36:	79fb      	ldrb	r3, [r7, #7]
  400b38:	2b03      	cmp	r3, #3
  400b3a:	d9e9      	bls.n	400b10 <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400b3c:	bf00      	nop
  400b3e:	370c      	adds	r7, #12
  400b40:	46bd      	mov	sp, r7
  400b42:	bd90      	pop	{r4, r7, pc}
  400b44:	20400a04 	.word	0x20400a04
  400b48:	004006b1 	.word	0x004006b1
  400b4c:	004012b1 	.word	0x004012b1
  400b50:	00400ac9 	.word	0x00400ac9
  400b54:	00400bf5 	.word	0x00400bf5

00400b58 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
  400b58:	b590      	push	{r4, r7, lr}
  400b5a:	b085      	sub	sp, #20
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	4603      	mov	r3, r0
  400b60:	71fb      	strb	r3, [r7, #7]
  400b62:	460b      	mov	r3, r1
  400b64:	71bb      	strb	r3, [r7, #6]
  400b66:	4613      	mov	r3, r2
  400b68:	717b      	strb	r3, [r7, #5]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b6e:	2b00      	cmp	r3, #0
  400b70:	db38      	blt.n	400be4 <gfx_mono_ssd1306_draw_pixel+0x8c>
  400b72:	79bb      	ldrb	r3, [r7, #6]
  400b74:	2b1f      	cmp	r3, #31
  400b76:	d835      	bhi.n	400be4 <gfx_mono_ssd1306_draw_pixel+0x8c>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400b78:	79bb      	ldrb	r3, [r7, #6]
  400b7a:	08db      	lsrs	r3, r3, #3
  400b7c:	73bb      	strb	r3, [r7, #14]
	pixel_mask = (1 << (y - (page * 8)));
  400b7e:	79ba      	ldrb	r2, [r7, #6]
  400b80:	7bbb      	ldrb	r3, [r7, #14]
  400b82:	00db      	lsls	r3, r3, #3
  400b84:	1ad3      	subs	r3, r2, r3
  400b86:	2201      	movs	r2, #1
  400b88:	fa02 f303 	lsl.w	r3, r2, r3
  400b8c:	737b      	strb	r3, [r7, #13]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
  400b8e:	79fa      	ldrb	r2, [r7, #7]
  400b90:	7bbb      	ldrb	r3, [r7, #14]
  400b92:	4611      	mov	r1, r2
  400b94:	4618      	mov	r0, r3
  400b96:	4b15      	ldr	r3, [pc, #84]	; (400bec <gfx_mono_ssd1306_draw_pixel+0x94>)
  400b98:	4798      	blx	r3
  400b9a:	4603      	mov	r3, r0
  400b9c:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  400b9e:	797b      	ldrb	r3, [r7, #5]
  400ba0:	2b01      	cmp	r3, #1
  400ba2:	d004      	beq.n	400bae <gfx_mono_ssd1306_draw_pixel+0x56>
  400ba4:	2b02      	cmp	r3, #2
  400ba6:	d011      	beq.n	400bcc <gfx_mono_ssd1306_draw_pixel+0x74>
  400ba8:	2b00      	cmp	r3, #0
  400baa:	d005      	beq.n	400bb8 <gfx_mono_ssd1306_draw_pixel+0x60>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
  400bac:	e013      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value |= pixel_mask;
  400bae:	7bfa      	ldrb	r2, [r7, #15]
  400bb0:	7b7b      	ldrb	r3, [r7, #13]
  400bb2:	4313      	orrs	r3, r2
  400bb4:	73fb      	strb	r3, [r7, #15]
		break;
  400bb6:	e00e      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value &= ~pixel_mask;
  400bb8:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400bbc:	43db      	mvns	r3, r3
  400bbe:	b25a      	sxtb	r2, r3
  400bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  400bc4:	4013      	ands	r3, r2
  400bc6:	b25b      	sxtb	r3, r3
  400bc8:	73fb      	strb	r3, [r7, #15]
		break;
  400bca:	e004      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value ^= pixel_mask;
  400bcc:	7bfa      	ldrb	r2, [r7, #15]
  400bce:	7b7b      	ldrb	r3, [r7, #13]
  400bd0:	4053      	eors	r3, r2
  400bd2:	73fb      	strb	r3, [r7, #15]
		break;
  400bd4:	bf00      	nop
	}

	gfx_mono_put_byte(page, x, pixel_value);
  400bd6:	7bfa      	ldrb	r2, [r7, #15]
  400bd8:	79f9      	ldrb	r1, [r7, #7]
  400bda:	7bb8      	ldrb	r0, [r7, #14]
  400bdc:	2300      	movs	r3, #0
  400bde:	4c04      	ldr	r4, [pc, #16]	; (400bf0 <gfx_mono_ssd1306_draw_pixel+0x98>)
  400be0:	47a0      	blx	r4
  400be2:	e000      	b.n	400be6 <gfx_mono_ssd1306_draw_pixel+0x8e>
		return;
  400be4:	bf00      	nop
}
  400be6:	3714      	adds	r7, #20
  400be8:	46bd      	mov	sp, r7
  400bea:	bd90      	pop	{r4, r7, pc}
  400bec:	00400c79 	.word	0x00400c79
  400bf0:	00400bf5 	.word	0x00400bf5

00400bf4 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400bf4:	b590      	push	{r4, r7, lr}
  400bf6:	b083      	sub	sp, #12
  400bf8:	af00      	add	r7, sp, #0
  400bfa:	4604      	mov	r4, r0
  400bfc:	4608      	mov	r0, r1
  400bfe:	4611      	mov	r1, r2
  400c00:	461a      	mov	r2, r3
  400c02:	4623      	mov	r3, r4
  400c04:	71fb      	strb	r3, [r7, #7]
  400c06:	4603      	mov	r3, r0
  400c08:	71bb      	strb	r3, [r7, #6]
  400c0a:	460b      	mov	r3, r1
  400c0c:	717b      	strb	r3, [r7, #5]
  400c0e:	4613      	mov	r3, r2
  400c10:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400c12:	793b      	ldrb	r3, [r7, #4]
  400c14:	f083 0301 	eor.w	r3, r3, #1
  400c18:	b2db      	uxtb	r3, r3
  400c1a:	2b00      	cmp	r3, #0
  400c1c:	d00a      	beq.n	400c34 <gfx_mono_ssd1306_put_byte+0x40>
  400c1e:	79ba      	ldrb	r2, [r7, #6]
  400c20:	79fb      	ldrb	r3, [r7, #7]
  400c22:	4611      	mov	r1, r2
  400c24:	4618      	mov	r0, r3
  400c26:	4b0f      	ldr	r3, [pc, #60]	; (400c64 <gfx_mono_ssd1306_put_byte+0x70>)
  400c28:	4798      	blx	r3
  400c2a:	4603      	mov	r3, r0
  400c2c:	461a      	mov	r2, r3
  400c2e:	797b      	ldrb	r3, [r7, #5]
  400c30:	4293      	cmp	r3, r2
  400c32:	d012      	beq.n	400c5a <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400c34:	797a      	ldrb	r2, [r7, #5]
  400c36:	79b9      	ldrb	r1, [r7, #6]
  400c38:	79fb      	ldrb	r3, [r7, #7]
  400c3a:	4618      	mov	r0, r3
  400c3c:	4b0a      	ldr	r3, [pc, #40]	; (400c68 <gfx_mono_ssd1306_put_byte+0x74>)
  400c3e:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  400c40:	79fb      	ldrb	r3, [r7, #7]
  400c42:	4618      	mov	r0, r3
  400c44:	4b09      	ldr	r3, [pc, #36]	; (400c6c <gfx_mono_ssd1306_put_byte+0x78>)
  400c46:	4798      	blx	r3
	ssd1306_set_column_address(column);
  400c48:	79bb      	ldrb	r3, [r7, #6]
  400c4a:	4618      	mov	r0, r3
  400c4c:	4b08      	ldr	r3, [pc, #32]	; (400c70 <gfx_mono_ssd1306_put_byte+0x7c>)
  400c4e:	4798      	blx	r3

	ssd1306_write_data(data);
  400c50:	797b      	ldrb	r3, [r7, #5]
  400c52:	4618      	mov	r0, r3
  400c54:	4b07      	ldr	r3, [pc, #28]	; (400c74 <gfx_mono_ssd1306_put_byte+0x80>)
  400c56:	4798      	blx	r3
  400c58:	e000      	b.n	400c5c <gfx_mono_ssd1306_put_byte+0x68>
		return;
  400c5a:	bf00      	nop
}
  400c5c:	370c      	adds	r7, #12
  400c5e:	46bd      	mov	sp, r7
  400c60:	bd90      	pop	{r4, r7, pc}
  400c62:	bf00      	nop
  400c64:	00400709 	.word	0x00400709
  400c68:	004006d1 	.word	0x004006d1
  400c6c:	00400a5d 	.word	0x00400a5d
  400c70:	00400a89 	.word	0x00400a89
  400c74:	00401405 	.word	0x00401405

00400c78 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400c78:	b580      	push	{r7, lr}
  400c7a:	b082      	sub	sp, #8
  400c7c:	af00      	add	r7, sp, #0
  400c7e:	4603      	mov	r3, r0
  400c80:	460a      	mov	r2, r1
  400c82:	71fb      	strb	r3, [r7, #7]
  400c84:	4613      	mov	r3, r2
  400c86:	71bb      	strb	r3, [r7, #6]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400c88:	79ba      	ldrb	r2, [r7, #6]
  400c8a:	79fb      	ldrb	r3, [r7, #7]
  400c8c:	4611      	mov	r1, r2
  400c8e:	4618      	mov	r0, r3
  400c90:	4b03      	ldr	r3, [pc, #12]	; (400ca0 <gfx_mono_ssd1306_get_byte+0x28>)
  400c92:	4798      	blx	r3
  400c94:	4603      	mov	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400c96:	4618      	mov	r0, r3
  400c98:	3708      	adds	r7, #8
  400c9a:	46bd      	mov	sp, r7
  400c9c:	bd80      	pop	{r7, pc}
  400c9e:	bf00      	nop
  400ca0:	00400709 	.word	0x00400709

00400ca4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400ca4:	b480      	push	{r7}
  400ca6:	b083      	sub	sp, #12
  400ca8:	af00      	add	r7, sp, #0
  400caa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400cac:	687b      	ldr	r3, [r7, #4]
  400cae:	2b07      	cmp	r3, #7
  400cb0:	d825      	bhi.n	400cfe <osc_get_rate+0x5a>
  400cb2:	a201      	add	r2, pc, #4	; (adr r2, 400cb8 <osc_get_rate+0x14>)
  400cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cb8:	00400cd9 	.word	0x00400cd9
  400cbc:	00400cdf 	.word	0x00400cdf
  400cc0:	00400ce5 	.word	0x00400ce5
  400cc4:	00400ceb 	.word	0x00400ceb
  400cc8:	00400cef 	.word	0x00400cef
  400ccc:	00400cf3 	.word	0x00400cf3
  400cd0:	00400cf7 	.word	0x00400cf7
  400cd4:	00400cfb 	.word	0x00400cfb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400cd8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400cdc:	e010      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ce2:	e00d      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ce8:	e00a      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400cea:	4b08      	ldr	r3, [pc, #32]	; (400d0c <osc_get_rate+0x68>)
  400cec:	e008      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400cee:	4b08      	ldr	r3, [pc, #32]	; (400d10 <osc_get_rate+0x6c>)
  400cf0:	e006      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400cf2:	4b08      	ldr	r3, [pc, #32]	; (400d14 <osc_get_rate+0x70>)
  400cf4:	e004      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400cf6:	4b07      	ldr	r3, [pc, #28]	; (400d14 <osc_get_rate+0x70>)
  400cf8:	e002      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400cfa:	4b06      	ldr	r3, [pc, #24]	; (400d14 <osc_get_rate+0x70>)
  400cfc:	e000      	b.n	400d00 <osc_get_rate+0x5c>
	}

	return 0;
  400cfe:	2300      	movs	r3, #0
}
  400d00:	4618      	mov	r0, r3
  400d02:	370c      	adds	r7, #12
  400d04:	46bd      	mov	sp, r7
  400d06:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d0a:	4770      	bx	lr
  400d0c:	003d0900 	.word	0x003d0900
  400d10:	007a1200 	.word	0x007a1200
  400d14:	00b71b00 	.word	0x00b71b00

00400d18 <sysclk_get_main_hz>:
{
  400d18:	b580      	push	{r7, lr}
  400d1a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400d1c:	2006      	movs	r0, #6
  400d1e:	4b05      	ldr	r3, [pc, #20]	; (400d34 <sysclk_get_main_hz+0x1c>)
  400d20:	4798      	blx	r3
  400d22:	4602      	mov	r2, r0
  400d24:	4613      	mov	r3, r2
  400d26:	009b      	lsls	r3, r3, #2
  400d28:	4413      	add	r3, r2
  400d2a:	009a      	lsls	r2, r3, #2
  400d2c:	4413      	add	r3, r2
}
  400d2e:	4618      	mov	r0, r3
  400d30:	bd80      	pop	{r7, pc}
  400d32:	bf00      	nop
  400d34:	00400ca5 	.word	0x00400ca5

00400d38 <sysclk_get_cpu_hz>:
{
  400d38:	b580      	push	{r7, lr}
  400d3a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400d3c:	4b02      	ldr	r3, [pc, #8]	; (400d48 <sysclk_get_cpu_hz+0x10>)
  400d3e:	4798      	blx	r3
  400d40:	4603      	mov	r3, r0
}
  400d42:	4618      	mov	r0, r3
  400d44:	bd80      	pop	{r7, pc}
  400d46:	bf00      	nop
  400d48:	00400d19 	.word	0x00400d19

00400d4c <sysclk_get_peripheral_hz>:
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400d50:	4b02      	ldr	r3, [pc, #8]	; (400d5c <sysclk_get_peripheral_hz+0x10>)
  400d52:	4798      	blx	r3
  400d54:	4603      	mov	r3, r0
  400d56:	085b      	lsrs	r3, r3, #1
}
  400d58:	4618      	mov	r0, r3
  400d5a:	bd80      	pop	{r7, pc}
  400d5c:	00400d19 	.word	0x00400d19

00400d60 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  400d60:	b480      	push	{r7}
  400d62:	b089      	sub	sp, #36	; 0x24
  400d64:	af00      	add	r7, sp, #0
  400d66:	6078      	str	r0, [r7, #4]
  400d68:	687b      	ldr	r3, [r7, #4]
  400d6a:	61fb      	str	r3, [r7, #28]
  400d6c:	69fb      	ldr	r3, [r7, #28]
  400d6e:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400d70:	69bb      	ldr	r3, [r7, #24]
  400d72:	095a      	lsrs	r2, r3, #5
  400d74:	69fb      	ldr	r3, [r7, #28]
  400d76:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400d78:	697b      	ldr	r3, [r7, #20]
  400d7a:	f003 031f 	and.w	r3, r3, #31
  400d7e:	2101      	movs	r1, #1
  400d80:	fa01 f303 	lsl.w	r3, r1, r3
  400d84:	613a      	str	r2, [r7, #16]
  400d86:	60fb      	str	r3, [r7, #12]
  400d88:	693b      	ldr	r3, [r7, #16]
  400d8a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400d8c:	68ba      	ldr	r2, [r7, #8]
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <ioport_enable_pin+0x48>)
  400d90:	4413      	add	r3, r2
  400d92:	025b      	lsls	r3, r3, #9
  400d94:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400d96:	68fb      	ldr	r3, [r7, #12]
  400d98:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  400d9a:	bf00      	nop
  400d9c:	3724      	adds	r7, #36	; 0x24
  400d9e:	46bd      	mov	sp, r7
  400da0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da4:	4770      	bx	lr
  400da6:	bf00      	nop
  400da8:	00200707 	.word	0x00200707

00400dac <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400dac:	b480      	push	{r7}
  400dae:	b08d      	sub	sp, #52	; 0x34
  400db0:	af00      	add	r7, sp, #0
  400db2:	6078      	str	r0, [r7, #4]
  400db4:	6039      	str	r1, [r7, #0]
  400db6:	687b      	ldr	r3, [r7, #4]
  400db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  400dba:	683b      	ldr	r3, [r7, #0]
  400dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  400dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400dc0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400dc4:	095a      	lsrs	r2, r3, #5
  400dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400dc8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400dca:	6a3b      	ldr	r3, [r7, #32]
  400dcc:	f003 031f 	and.w	r3, r3, #31
  400dd0:	2101      	movs	r1, #1
  400dd2:	fa01 f303 	lsl.w	r3, r1, r3
  400dd6:	61fa      	str	r2, [r7, #28]
  400dd8:	61bb      	str	r3, [r7, #24]
  400dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400ddc:	617b      	str	r3, [r7, #20]
  400dde:	69fb      	ldr	r3, [r7, #28]
  400de0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400de2:	693a      	ldr	r2, [r7, #16]
  400de4:	4b37      	ldr	r3, [pc, #220]	; (400ec4 <ioport_set_pin_mode+0x118>)
  400de6:	4413      	add	r3, r2
  400de8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400dea:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400dec:	697b      	ldr	r3, [r7, #20]
  400dee:	f003 0308 	and.w	r3, r3, #8
  400df2:	2b00      	cmp	r3, #0
  400df4:	d003      	beq.n	400dfe <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400df6:	68fb      	ldr	r3, [r7, #12]
  400df8:	69ba      	ldr	r2, [r7, #24]
  400dfa:	665a      	str	r2, [r3, #100]	; 0x64
  400dfc:	e002      	b.n	400e04 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400dfe:	68fb      	ldr	r3, [r7, #12]
  400e00:	69ba      	ldr	r2, [r7, #24]
  400e02:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400e04:	697b      	ldr	r3, [r7, #20]
  400e06:	f003 0310 	and.w	r3, r3, #16
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d004      	beq.n	400e18 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400e0e:	68fb      	ldr	r3, [r7, #12]
  400e10:	69ba      	ldr	r2, [r7, #24]
  400e12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400e16:	e003      	b.n	400e20 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400e18:	68fb      	ldr	r3, [r7, #12]
  400e1a:	69ba      	ldr	r2, [r7, #24]
  400e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400e20:	697b      	ldr	r3, [r7, #20]
  400e22:	f003 0320 	and.w	r3, r3, #32
  400e26:	2b00      	cmp	r3, #0
  400e28:	d003      	beq.n	400e32 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400e2a:	68fb      	ldr	r3, [r7, #12]
  400e2c:	69ba      	ldr	r2, [r7, #24]
  400e2e:	651a      	str	r2, [r3, #80]	; 0x50
  400e30:	e002      	b.n	400e38 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	69ba      	ldr	r2, [r7, #24]
  400e36:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400e38:	697b      	ldr	r3, [r7, #20]
  400e3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400e3e:	2b00      	cmp	r3, #0
  400e40:	d003      	beq.n	400e4a <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400e42:	68fb      	ldr	r3, [r7, #12]
  400e44:	69ba      	ldr	r2, [r7, #24]
  400e46:	621a      	str	r2, [r3, #32]
  400e48:	e002      	b.n	400e50 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400e4a:	68fb      	ldr	r3, [r7, #12]
  400e4c:	69ba      	ldr	r2, [r7, #24]
  400e4e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400e50:	697b      	ldr	r3, [r7, #20]
  400e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400e56:	2b00      	cmp	r3, #0
  400e58:	d004      	beq.n	400e64 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400e5a:	68fb      	ldr	r3, [r7, #12]
  400e5c:	69ba      	ldr	r2, [r7, #24]
  400e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400e62:	e003      	b.n	400e6c <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400e64:	68fb      	ldr	r3, [r7, #12]
  400e66:	69ba      	ldr	r2, [r7, #24]
  400e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400e6c:	697b      	ldr	r3, [r7, #20]
  400e6e:	f003 0301 	and.w	r3, r3, #1
  400e72:	2b00      	cmp	r3, #0
  400e74:	d006      	beq.n	400e84 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400e76:	68fb      	ldr	r3, [r7, #12]
  400e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e7a:	69bb      	ldr	r3, [r7, #24]
  400e7c:	431a      	orrs	r2, r3
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	671a      	str	r2, [r3, #112]	; 0x70
  400e82:	e006      	b.n	400e92 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400e84:	68fb      	ldr	r3, [r7, #12]
  400e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e88:	69bb      	ldr	r3, [r7, #24]
  400e8a:	43db      	mvns	r3, r3
  400e8c:	401a      	ands	r2, r3
  400e8e:	68fb      	ldr	r3, [r7, #12]
  400e90:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400e92:	697b      	ldr	r3, [r7, #20]
  400e94:	f003 0302 	and.w	r3, r3, #2
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d006      	beq.n	400eaa <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400e9c:	68fb      	ldr	r3, [r7, #12]
  400e9e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ea0:	69bb      	ldr	r3, [r7, #24]
  400ea2:	431a      	orrs	r2, r3
  400ea4:	68fb      	ldr	r3, [r7, #12]
  400ea6:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400ea8:	e006      	b.n	400eb8 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400eaa:	68fb      	ldr	r3, [r7, #12]
  400eac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400eae:	69bb      	ldr	r3, [r7, #24]
  400eb0:	43db      	mvns	r3, r3
  400eb2:	401a      	ands	r2, r3
  400eb4:	68fb      	ldr	r3, [r7, #12]
  400eb6:	675a      	str	r2, [r3, #116]	; 0x74
  400eb8:	bf00      	nop
  400eba:	3734      	adds	r7, #52	; 0x34
  400ebc:	46bd      	mov	sp, r7
  400ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ec2:	4770      	bx	lr
  400ec4:	00200707 	.word	0x00200707

00400ec8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400ec8:	b480      	push	{r7}
  400eca:	b08d      	sub	sp, #52	; 0x34
  400ecc:	af00      	add	r7, sp, #0
  400ece:	6078      	str	r0, [r7, #4]
  400ed0:	460b      	mov	r3, r1
  400ed2:	70fb      	strb	r3, [r7, #3]
  400ed4:	687b      	ldr	r3, [r7, #4]
  400ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  400ed8:	78fb      	ldrb	r3, [r7, #3]
  400eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400ee0:	627b      	str	r3, [r7, #36]	; 0x24
  400ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ee4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400ee6:	6a3b      	ldr	r3, [r7, #32]
  400ee8:	095b      	lsrs	r3, r3, #5
  400eea:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400eec:	69fa      	ldr	r2, [r7, #28]
  400eee:	4b17      	ldr	r3, [pc, #92]	; (400f4c <ioport_set_pin_dir+0x84>)
  400ef0:	4413      	add	r3, r2
  400ef2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400ef4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400efa:	2b01      	cmp	r3, #1
  400efc:	d109      	bne.n	400f12 <ioport_set_pin_dir+0x4a>
  400efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f00:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400f02:	697b      	ldr	r3, [r7, #20]
  400f04:	f003 031f 	and.w	r3, r3, #31
  400f08:	2201      	movs	r2, #1
  400f0a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f0c:	69bb      	ldr	r3, [r7, #24]
  400f0e:	611a      	str	r2, [r3, #16]
  400f10:	e00c      	b.n	400f2c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400f12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400f16:	2b00      	cmp	r3, #0
  400f18:	d108      	bne.n	400f2c <ioport_set_pin_dir+0x64>
  400f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f1c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400f1e:	693b      	ldr	r3, [r7, #16]
  400f20:	f003 031f 	and.w	r3, r3, #31
  400f24:	2201      	movs	r2, #1
  400f26:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f28:	69bb      	ldr	r3, [r7, #24]
  400f2a:	615a      	str	r2, [r3, #20]
  400f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f2e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400f30:	68fb      	ldr	r3, [r7, #12]
  400f32:	f003 031f 	and.w	r3, r3, #31
  400f36:	2201      	movs	r2, #1
  400f38:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f3a:	69bb      	ldr	r3, [r7, #24]
  400f3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400f40:	bf00      	nop
  400f42:	3734      	adds	r7, #52	; 0x34
  400f44:	46bd      	mov	sp, r7
  400f46:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4a:	4770      	bx	lr
  400f4c:	00200707 	.word	0x00200707

00400f50 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400f50:	b480      	push	{r7}
  400f52:	b08b      	sub	sp, #44	; 0x2c
  400f54:	af00      	add	r7, sp, #0
  400f56:	6078      	str	r0, [r7, #4]
  400f58:	460b      	mov	r3, r1
  400f5a:	70fb      	strb	r3, [r7, #3]
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	627b      	str	r3, [r7, #36]	; 0x24
  400f60:	78fb      	ldrb	r3, [r7, #3]
  400f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f68:	61fb      	str	r3, [r7, #28]
  400f6a:	69fb      	ldr	r3, [r7, #28]
  400f6c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400f6e:	69bb      	ldr	r3, [r7, #24]
  400f70:	095b      	lsrs	r3, r3, #5
  400f72:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400f74:	697a      	ldr	r2, [r7, #20]
  400f76:	4b10      	ldr	r3, [pc, #64]	; (400fb8 <ioport_set_pin_level+0x68>)
  400f78:	4413      	add	r3, r2
  400f7a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400f7c:	613b      	str	r3, [r7, #16]

	if (level) {
  400f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400f82:	2b00      	cmp	r3, #0
  400f84:	d009      	beq.n	400f9a <ioport_set_pin_level+0x4a>
  400f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f88:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400f8a:	68fb      	ldr	r3, [r7, #12]
  400f8c:	f003 031f 	and.w	r3, r3, #31
  400f90:	2201      	movs	r2, #1
  400f92:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f94:	693b      	ldr	r3, [r7, #16]
  400f96:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400f98:	e008      	b.n	400fac <ioport_set_pin_level+0x5c>
  400f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f9c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400f9e:	68bb      	ldr	r3, [r7, #8]
  400fa0:	f003 031f 	and.w	r3, r3, #31
  400fa4:	2201      	movs	r2, #1
  400fa6:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400fa8:	693b      	ldr	r3, [r7, #16]
  400faa:	635a      	str	r2, [r3, #52]	; 0x34
  400fac:	bf00      	nop
  400fae:	372c      	adds	r7, #44	; 0x2c
  400fb0:	46bd      	mov	sp, r7
  400fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb6:	4770      	bx	lr
  400fb8:	00200707 	.word	0x00200707

00400fbc <spi_reset>:
{
  400fbc:	b480      	push	{r7}
  400fbe:	b083      	sub	sp, #12
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2280      	movs	r2, #128	; 0x80
  400fc8:	601a      	str	r2, [r3, #0]
}
  400fca:	bf00      	nop
  400fcc:	370c      	adds	r7, #12
  400fce:	46bd      	mov	sp, r7
  400fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fd4:	4770      	bx	lr

00400fd6 <spi_enable>:
{
  400fd6:	b480      	push	{r7}
  400fd8:	b083      	sub	sp, #12
  400fda:	af00      	add	r7, sp, #0
  400fdc:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400fde:	687b      	ldr	r3, [r7, #4]
  400fe0:	2201      	movs	r2, #1
  400fe2:	601a      	str	r2, [r3, #0]
}
  400fe4:	bf00      	nop
  400fe6:	370c      	adds	r7, #12
  400fe8:	46bd      	mov	sp, r7
  400fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fee:	4770      	bx	lr

00400ff0 <spi_disable>:
{
  400ff0:	b480      	push	{r7}
  400ff2:	b083      	sub	sp, #12
  400ff4:	af00      	add	r7, sp, #0
  400ff6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400ff8:	687b      	ldr	r3, [r7, #4]
  400ffa:	2202      	movs	r2, #2
  400ffc:	601a      	str	r2, [r3, #0]
}
  400ffe:	bf00      	nop
  401000:	370c      	adds	r7, #12
  401002:	46bd      	mov	sp, r7
  401004:	f85d 7b04 	ldr.w	r7, [sp], #4
  401008:	4770      	bx	lr

0040100a <spi_set_master_mode>:
{
  40100a:	b480      	push	{r7}
  40100c:	b083      	sub	sp, #12
  40100e:	af00      	add	r7, sp, #0
  401010:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401012:	687b      	ldr	r3, [r7, #4]
  401014:	685b      	ldr	r3, [r3, #4]
  401016:	f043 0201 	orr.w	r2, r3, #1
  40101a:	687b      	ldr	r3, [r7, #4]
  40101c:	605a      	str	r2, [r3, #4]
}
  40101e:	bf00      	nop
  401020:	370c      	adds	r7, #12
  401022:	46bd      	mov	sp, r7
  401024:	f85d 7b04 	ldr.w	r7, [sp], #4
  401028:	4770      	bx	lr

0040102a <spi_set_fixed_peripheral_select>:
{
  40102a:	b480      	push	{r7}
  40102c:	b083      	sub	sp, #12
  40102e:	af00      	add	r7, sp, #0
  401030:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401032:	687b      	ldr	r3, [r7, #4]
  401034:	685b      	ldr	r3, [r3, #4]
  401036:	f023 0202 	bic.w	r2, r3, #2
  40103a:	687b      	ldr	r3, [r7, #4]
  40103c:	605a      	str	r2, [r3, #4]
}
  40103e:	bf00      	nop
  401040:	370c      	adds	r7, #12
  401042:	46bd      	mov	sp, r7
  401044:	f85d 7b04 	ldr.w	r7, [sp], #4
  401048:	4770      	bx	lr

0040104a <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  40104a:	b480      	push	{r7}
  40104c:	b083      	sub	sp, #12
  40104e:	af00      	add	r7, sp, #0
  401050:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401052:	687b      	ldr	r3, [r7, #4]
  401054:	685b      	ldr	r3, [r3, #4]
  401056:	f043 0210 	orr.w	r2, r3, #16
  40105a:	687b      	ldr	r3, [r7, #4]
  40105c:	605a      	str	r2, [r3, #4]
}
  40105e:	bf00      	nop
  401060:	370c      	adds	r7, #12
  401062:	46bd      	mov	sp, r7
  401064:	f85d 7b04 	ldr.w	r7, [sp], #4
  401068:	4770      	bx	lr

0040106a <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  40106a:	b480      	push	{r7}
  40106c:	b083      	sub	sp, #12
  40106e:	af00      	add	r7, sp, #0
  401070:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  401072:	687b      	ldr	r3, [r7, #4]
  401074:	685b      	ldr	r3, [r3, #4]
  401076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  40107a:	687b      	ldr	r3, [r7, #4]
  40107c:	605a      	str	r2, [r3, #4]
}
  40107e:	bf00      	nop
  401080:	370c      	adds	r7, #12
  401082:	46bd      	mov	sp, r7
  401084:	f85d 7b04 	ldr.w	r7, [sp], #4
  401088:	4770      	bx	lr
	...

0040108c <ssd1306_hard_reset>:
{
  40108c:	b580      	push	{r7, lr}
  40108e:	b082      	sub	sp, #8
  401090:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  401092:	4b0f      	ldr	r3, [pc, #60]	; (4010d0 <ssd1306_hard_reset+0x44>)
  401094:	4798      	blx	r3
  401096:	4602      	mov	r2, r0
  401098:	4b0e      	ldr	r3, [pc, #56]	; (4010d4 <ssd1306_hard_reset+0x48>)
  40109a:	fba3 2302 	umull	r2, r3, r3, r2
  40109e:	0c9a      	lsrs	r2, r3, #18
  4010a0:	4613      	mov	r3, r2
  4010a2:	009b      	lsls	r3, r3, #2
  4010a4:	4413      	add	r3, r2
  4010a6:	005b      	lsls	r3, r3, #1
  4010a8:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  4010aa:	2100      	movs	r1, #0
  4010ac:	2051      	movs	r0, #81	; 0x51
  4010ae:	4b0a      	ldr	r3, [pc, #40]	; (4010d8 <ssd1306_hard_reset+0x4c>)
  4010b0:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  4010b2:	6878      	ldr	r0, [r7, #4]
  4010b4:	4b09      	ldr	r3, [pc, #36]	; (4010dc <ssd1306_hard_reset+0x50>)
  4010b6:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4010b8:	2101      	movs	r1, #1
  4010ba:	2051      	movs	r0, #81	; 0x51
  4010bc:	4b06      	ldr	r3, [pc, #24]	; (4010d8 <ssd1306_hard_reset+0x4c>)
  4010be:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  4010c0:	6878      	ldr	r0, [r7, #4]
  4010c2:	4b06      	ldr	r3, [pc, #24]	; (4010dc <ssd1306_hard_reset+0x50>)
  4010c4:	4798      	blx	r3
}
  4010c6:	bf00      	nop
  4010c8:	3708      	adds	r7, #8
  4010ca:	46bd      	mov	sp, r7
  4010cc:	bd80      	pop	{r7, pc}
  4010ce:	bf00      	nop
  4010d0:	00400d39 	.word	0x00400d39
  4010d4:	431bde83 	.word	0x431bde83
  4010d8:	00400f51 	.word	0x00400f51
  4010dc:	20400001 	.word	0x20400001

004010e0 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  4010e0:	b580      	push	{r7, lr}
  4010e2:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4010e4:	20af      	movs	r0, #175	; 0xaf
  4010e6:	4b02      	ldr	r3, [pc, #8]	; (4010f0 <ssd1306_display_on+0x10>)
  4010e8:	4798      	blx	r3
}
  4010ea:	bf00      	nop
  4010ec:	bd80      	pop	{r7, pc}
  4010ee:	bf00      	nop
  4010f0:	00401361 	.word	0x00401361

004010f4 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  4010f4:	b580      	push	{r7, lr}
  4010f6:	b082      	sub	sp, #8
  4010f8:	af00      	add	r7, sp, #0
  4010fa:	4603      	mov	r3, r0
  4010fc:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4010fe:	2081      	movs	r0, #129	; 0x81
  401100:	4b05      	ldr	r3, [pc, #20]	; (401118 <ssd1306_set_contrast+0x24>)
  401102:	4798      	blx	r3
	ssd1306_write_command(contrast);
  401104:	79fb      	ldrb	r3, [r7, #7]
  401106:	4618      	mov	r0, r3
  401108:	4b03      	ldr	r3, [pc, #12]	; (401118 <ssd1306_set_contrast+0x24>)
  40110a:	4798      	blx	r3
	return contrast;
  40110c:	79fb      	ldrb	r3, [r7, #7]
}
  40110e:	4618      	mov	r0, r3
  401110:	3708      	adds	r7, #8
  401112:	46bd      	mov	sp, r7
  401114:	bd80      	pop	{r7, pc}
  401116:	bf00      	nop
  401118:	00401361 	.word	0x00401361

0040111c <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  40111c:	b580      	push	{r7, lr}
  40111e:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  401120:	20a6      	movs	r0, #166	; 0xa6
  401122:	4b02      	ldr	r3, [pc, #8]	; (40112c <ssd1306_display_invert_disable+0x10>)
  401124:	4798      	blx	r3
}
  401126:	bf00      	nop
  401128:	bd80      	pop	{r7, pc}
  40112a:	bf00      	nop
  40112c:	00401361 	.word	0x00401361

00401130 <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  401130:	b590      	push	{r4, r7, lr}
  401132:	b083      	sub	sp, #12
  401134:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  401136:	2101      	movs	r1, #1
  401138:	2051      	movs	r0, #81	; 0x51
  40113a:	4b46      	ldr	r3, [pc, #280]	; (401254 <ssd1306_interface_init+0x124>)
  40113c:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  40113e:	2101      	movs	r1, #1
  401140:	2023      	movs	r0, #35	; 0x23
  401142:	4b44      	ldr	r3, [pc, #272]	; (401254 <ssd1306_interface_init+0x124>)
  401144:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  401146:	2108      	movs	r1, #8
  401148:	2051      	movs	r0, #81	; 0x51
  40114a:	4b43      	ldr	r3, [pc, #268]	; (401258 <ssd1306_interface_init+0x128>)
  40114c:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  40114e:	2108      	movs	r1, #8
  401150:	2023      	movs	r0, #35	; 0x23
  401152:	4b41      	ldr	r3, [pc, #260]	; (401258 <ssd1306_interface_init+0x128>)
  401154:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  401156:	2023      	movs	r0, #35	; 0x23
  401158:	4b40      	ldr	r3, [pc, #256]	; (40125c <ssd1306_interface_init+0x12c>)
  40115a:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  40115c:	2051      	movs	r0, #81	; 0x51
  40115e:	4b3f      	ldr	r3, [pc, #252]	; (40125c <ssd1306_interface_init+0x12c>)
  401160:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  401162:	2101      	movs	r1, #1
  401164:	2023      	movs	r0, #35	; 0x23
  401166:	4b3e      	ldr	r3, [pc, #248]	; (401260 <ssd1306_interface_init+0x130>)
  401168:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  40116a:	2101      	movs	r1, #1
  40116c:	2051      	movs	r0, #81	; 0x51
  40116e:	4b3c      	ldr	r3, [pc, #240]	; (401260 <ssd1306_interface_init+0x130>)
  401170:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  401172:	2300      	movs	r3, #0
  401174:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401178:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40117c:	4839      	ldr	r0, [pc, #228]	; (401264 <ssd1306_interface_init+0x134>)
  40117e:	4c3a      	ldr	r4, [pc, #232]	; (401268 <ssd1306_interface_init+0x138>)
  401180:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  401182:	2300      	movs	r3, #0
  401184:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401188:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40118c:	4835      	ldr	r0, [pc, #212]	; (401264 <ssd1306_interface_init+0x134>)
  40118e:	4c36      	ldr	r4, [pc, #216]	; (401268 <ssd1306_interface_init+0x138>)
  401190:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401192:	2300      	movs	r3, #0
  401194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401198:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40119c:	4831      	ldr	r0, [pc, #196]	; (401264 <ssd1306_interface_init+0x134>)
  40119e:	4c32      	ldr	r4, [pc, #200]	; (401268 <ssd1306_interface_init+0x138>)
  4011a0:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4011a2:	2300      	movs	r3, #0
  4011a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4011a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011ac:	482d      	ldr	r0, [pc, #180]	; (401264 <ssd1306_interface_init+0x134>)
  4011ae:	4c2e      	ldr	r4, [pc, #184]	; (401268 <ssd1306_interface_init+0x138>)
  4011b0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4011b2:	2300      	movs	r3, #0
  4011b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4011b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011bc:	4829      	ldr	r0, [pc, #164]	; (401264 <ssd1306_interface_init+0x134>)
  4011be:	4c2a      	ldr	r4, [pc, #168]	; (401268 <ssd1306_interface_init+0x138>)
  4011c0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4011c2:	2300      	movs	r3, #0
  4011c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4011c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011cc:	4825      	ldr	r0, [pc, #148]	; (401264 <ssd1306_interface_init+0x134>)
  4011ce:	4c26      	ldr	r4, [pc, #152]	; (401268 <ssd1306_interface_init+0x138>)
  4011d0:	47a0      	blx	r4
		
		spi_disable(SPI0);
  4011d2:	4826      	ldr	r0, [pc, #152]	; (40126c <ssd1306_interface_init+0x13c>)
  4011d4:	4b26      	ldr	r3, [pc, #152]	; (401270 <ssd1306_interface_init+0x140>)
  4011d6:	4798      	blx	r3
		spi_reset(SPI0);
  4011d8:	4824      	ldr	r0, [pc, #144]	; (40126c <ssd1306_interface_init+0x13c>)
  4011da:	4b26      	ldr	r3, [pc, #152]	; (401274 <ssd1306_interface_init+0x144>)
  4011dc:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  4011de:	4823      	ldr	r0, [pc, #140]	; (40126c <ssd1306_interface_init+0x13c>)
  4011e0:	4b25      	ldr	r3, [pc, #148]	; (401278 <ssd1306_interface_init+0x148>)
  4011e2:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4011e4:	2208      	movs	r2, #8
  4011e6:	2101      	movs	r1, #1
  4011e8:	4820      	ldr	r0, [pc, #128]	; (40126c <ssd1306_interface_init+0x13c>)
  4011ea:	4b24      	ldr	r3, [pc, #144]	; (40127c <ssd1306_interface_init+0x14c>)
  4011ec:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4011ee:	2200      	movs	r2, #0
  4011f0:	2101      	movs	r1, #1
  4011f2:	481e      	ldr	r0, [pc, #120]	; (40126c <ssd1306_interface_init+0x13c>)
  4011f4:	4b22      	ldr	r3, [pc, #136]	; (401280 <ssd1306_interface_init+0x150>)
  4011f6:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4011f8:	2200      	movs	r2, #0
  4011fa:	2101      	movs	r1, #1
  4011fc:	481b      	ldr	r0, [pc, #108]	; (40126c <ssd1306_interface_init+0x13c>)
  4011fe:	4b21      	ldr	r3, [pc, #132]	; (401284 <ssd1306_interface_init+0x154>)
  401200:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  401202:	481a      	ldr	r0, [pc, #104]	; (40126c <ssd1306_interface_init+0x13c>)
  401204:	4b20      	ldr	r3, [pc, #128]	; (401288 <ssd1306_interface_init+0x158>)
  401206:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  401208:	2200      	movs	r2, #0
  40120a:	2101      	movs	r1, #1
  40120c:	4817      	ldr	r0, [pc, #92]	; (40126c <ssd1306_interface_init+0x13c>)
  40120e:	4b1f      	ldr	r3, [pc, #124]	; (40128c <ssd1306_interface_init+0x15c>)
  401210:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  401212:	4816      	ldr	r0, [pc, #88]	; (40126c <ssd1306_interface_init+0x13c>)
  401214:	4b1e      	ldr	r3, [pc, #120]	; (401290 <ssd1306_interface_init+0x160>)
  401216:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  401218:	4814      	ldr	r0, [pc, #80]	; (40126c <ssd1306_interface_init+0x13c>)
  40121a:	4b1e      	ldr	r3, [pc, #120]	; (401294 <ssd1306_interface_init+0x164>)
  40121c:	4798      	blx	r3
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  40121e:	4b1e      	ldr	r3, [pc, #120]	; (401298 <ssd1306_interface_init+0x168>)
  401220:	4798      	blx	r3
  401222:	4603      	mov	r3, r0
  401224:	4619      	mov	r1, r3
  401226:	481d      	ldr	r0, [pc, #116]	; (40129c <ssd1306_interface_init+0x16c>)
  401228:	4b1d      	ldr	r3, [pc, #116]	; (4012a0 <ssd1306_interface_init+0x170>)
  40122a:	4798      	blx	r3
  40122c:	4603      	mov	r3, r0
  40122e:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  401230:	687b      	ldr	r3, [r7, #4]
  401232:	b2db      	uxtb	r3, r3
  401234:	461a      	mov	r2, r3
  401236:	2101      	movs	r1, #1
  401238:	480c      	ldr	r0, [pc, #48]	; (40126c <ssd1306_interface_init+0x13c>)
  40123a:	4b1a      	ldr	r3, [pc, #104]	; (4012a4 <ssd1306_interface_init+0x174>)
  40123c:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40123e:	480b      	ldr	r0, [pc, #44]	; (40126c <ssd1306_interface_init+0x13c>)
  401240:	4b19      	ldr	r3, [pc, #100]	; (4012a8 <ssd1306_interface_init+0x178>)
  401242:	4798      	blx	r3
		
		spi_enable(SPI0);
  401244:	4809      	ldr	r0, [pc, #36]	; (40126c <ssd1306_interface_init+0x13c>)
  401246:	4b19      	ldr	r3, [pc, #100]	; (4012ac <ssd1306_interface_init+0x17c>)
  401248:	4798      	blx	r3
}
  40124a:	bf00      	nop
  40124c:	370c      	adds	r7, #12
  40124e:	46bd      	mov	sp, r7
  401250:	bd90      	pop	{r4, r7, pc}
  401252:	bf00      	nop
  401254:	00400ec9 	.word	0x00400ec9
  401258:	00400dad 	.word	0x00400dad
  40125c:	00400d61 	.word	0x00400d61
  401260:	00400f51 	.word	0x00400f51
  401264:	400e1400 	.word	0x400e1400
  401268:	00401f81 	.word	0x00401f81
  40126c:	40008000 	.word	0x40008000
  401270:	00400ff1 	.word	0x00400ff1
  401274:	00400fbd 	.word	0x00400fbd
  401278:	0040100b 	.word	0x0040100b
  40127c:	00400525 	.word	0x00400525
  401280:	00400485 	.word	0x00400485
  401284:	004004d5 	.word	0x004004d5
  401288:	0040102b 	.word	0x0040102b
  40128c:	004005cb 	.word	0x004005cb
  401290:	0040106b 	.word	0x0040106b
  401294:	0040104b 	.word	0x0040104b
  401298:	00400d4d 	.word	0x00400d4d
  40129c:	001e8480 	.word	0x001e8480
  4012a0:	00400615 	.word	0x00400615
  4012a4:	00400651 	.word	0x00400651
  4012a8:	00400395 	.word	0x00400395
  4012ac:	00400fd7 	.word	0x00400fd7

004012b0 <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  4012b0:	b580      	push	{r7, lr}
  4012b2:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  4012b4:	4b23      	ldr	r3, [pc, #140]	; (401344 <ssd1306_init+0x94>)
  4012b6:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  4012b8:	4b23      	ldr	r3, [pc, #140]	; (401348 <ssd1306_init+0x98>)
  4012ba:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4012bc:	2101      	movs	r1, #1
  4012be:	2051      	movs	r0, #81	; 0x51
  4012c0:	4b22      	ldr	r3, [pc, #136]	; (40134c <ssd1306_init+0x9c>)
  4012c2:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4012c4:	20a8      	movs	r0, #168	; 0xa8
  4012c6:	4b22      	ldr	r3, [pc, #136]	; (401350 <ssd1306_init+0xa0>)
  4012c8:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  4012ca:	201f      	movs	r0, #31
  4012cc:	4b20      	ldr	r3, [pc, #128]	; (401350 <ssd1306_init+0xa0>)
  4012ce:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4012d0:	20d3      	movs	r0, #211	; 0xd3
  4012d2:	4b1f      	ldr	r3, [pc, #124]	; (401350 <ssd1306_init+0xa0>)
  4012d4:	4798      	blx	r3
	ssd1306_write_command(0x00);
  4012d6:	2000      	movs	r0, #0
  4012d8:	4b1d      	ldr	r3, [pc, #116]	; (401350 <ssd1306_init+0xa0>)
  4012da:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4012dc:	2040      	movs	r0, #64	; 0x40
  4012de:	4b1c      	ldr	r3, [pc, #112]	; (401350 <ssd1306_init+0xa0>)
  4012e0:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4012e2:	20a1      	movs	r0, #161	; 0xa1
  4012e4:	4b1a      	ldr	r3, [pc, #104]	; (401350 <ssd1306_init+0xa0>)
  4012e6:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4012e8:	20c8      	movs	r0, #200	; 0xc8
  4012ea:	4b19      	ldr	r3, [pc, #100]	; (401350 <ssd1306_init+0xa0>)
  4012ec:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4012ee:	20da      	movs	r0, #218	; 0xda
  4012f0:	4b17      	ldr	r3, [pc, #92]	; (401350 <ssd1306_init+0xa0>)
  4012f2:	4798      	blx	r3
	ssd1306_write_command(0x02);
  4012f4:	2002      	movs	r0, #2
  4012f6:	4b16      	ldr	r3, [pc, #88]	; (401350 <ssd1306_init+0xa0>)
  4012f8:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  4012fa:	208f      	movs	r0, #143	; 0x8f
  4012fc:	4b15      	ldr	r3, [pc, #84]	; (401354 <ssd1306_init+0xa4>)
  4012fe:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  401300:	20a4      	movs	r0, #164	; 0xa4
  401302:	4b13      	ldr	r3, [pc, #76]	; (401350 <ssd1306_init+0xa0>)
  401304:	4798      	blx	r3

	ssd1306_display_invert_disable();
  401306:	4b14      	ldr	r3, [pc, #80]	; (401358 <ssd1306_init+0xa8>)
  401308:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40130a:	20d5      	movs	r0, #213	; 0xd5
  40130c:	4b10      	ldr	r3, [pc, #64]	; (401350 <ssd1306_init+0xa0>)
  40130e:	4798      	blx	r3
	ssd1306_write_command(0x80);
  401310:	2080      	movs	r0, #128	; 0x80
  401312:	4b0f      	ldr	r3, [pc, #60]	; (401350 <ssd1306_init+0xa0>)
  401314:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  401316:	208d      	movs	r0, #141	; 0x8d
  401318:	4b0d      	ldr	r3, [pc, #52]	; (401350 <ssd1306_init+0xa0>)
  40131a:	4798      	blx	r3
	ssd1306_write_command(0x14);
  40131c:	2014      	movs	r0, #20
  40131e:	4b0c      	ldr	r3, [pc, #48]	; (401350 <ssd1306_init+0xa0>)
  401320:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  401322:	20db      	movs	r0, #219	; 0xdb
  401324:	4b0a      	ldr	r3, [pc, #40]	; (401350 <ssd1306_init+0xa0>)
  401326:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401328:	2040      	movs	r0, #64	; 0x40
  40132a:	4b09      	ldr	r3, [pc, #36]	; (401350 <ssd1306_init+0xa0>)
  40132c:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40132e:	20d9      	movs	r0, #217	; 0xd9
  401330:	4b07      	ldr	r3, [pc, #28]	; (401350 <ssd1306_init+0xa0>)
  401332:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  401334:	20f1      	movs	r0, #241	; 0xf1
  401336:	4b06      	ldr	r3, [pc, #24]	; (401350 <ssd1306_init+0xa0>)
  401338:	4798      	blx	r3

	
	ssd1306_display_on();
  40133a:	4b08      	ldr	r3, [pc, #32]	; (40135c <ssd1306_init+0xac>)
  40133c:	4798      	blx	r3
}
  40133e:	bf00      	nop
  401340:	bd80      	pop	{r7, pc}
  401342:	bf00      	nop
  401344:	00401131 	.word	0x00401131
  401348:	0040108d 	.word	0x0040108d
  40134c:	00400f51 	.word	0x00400f51
  401350:	00401361 	.word	0x00401361
  401354:	004010f5 	.word	0x004010f5
  401358:	0040111d 	.word	0x0040111d
  40135c:	004010e1 	.word	0x004010e1

00401360 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  401360:	b5f0      	push	{r4, r5, r6, r7, lr}
  401362:	b083      	sub	sp, #12
  401364:	af00      	add	r7, sp, #0
  401366:	4603      	mov	r3, r0
  401368:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  40136a:	2100      	movs	r1, #0
  40136c:	2023      	movs	r0, #35	; 0x23
  40136e:	4b1c      	ldr	r3, [pc, #112]	; (4013e0 <ssd1306_write_command+0x80>)
  401370:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401372:	2101      	movs	r1, #1
  401374:	481b      	ldr	r0, [pc, #108]	; (4013e4 <ssd1306_write_command+0x84>)
  401376:	4b1c      	ldr	r3, [pc, #112]	; (4013e8 <ssd1306_write_command+0x88>)
  401378:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  40137a:	79fb      	ldrb	r3, [r7, #7]
  40137c:	b299      	uxth	r1, r3
  40137e:	2301      	movs	r3, #1
  401380:	2201      	movs	r2, #1
  401382:	4818      	ldr	r0, [pc, #96]	; (4013e4 <ssd1306_write_command+0x84>)
  401384:	4c19      	ldr	r4, [pc, #100]	; (4013ec <ssd1306_write_command+0x8c>)
  401386:	47a0      	blx	r4
	delay_us(10);
  401388:	4b19      	ldr	r3, [pc, #100]	; (4013f0 <ssd1306_write_command+0x90>)
  40138a:	4798      	blx	r3
  40138c:	4603      	mov	r3, r0
  40138e:	4619      	mov	r1, r3
  401390:	f04f 0200 	mov.w	r2, #0
  401394:	460b      	mov	r3, r1
  401396:	4614      	mov	r4, r2
  401398:	00a6      	lsls	r6, r4, #2
  40139a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40139e:	009d      	lsls	r5, r3, #2
  4013a0:	462b      	mov	r3, r5
  4013a2:	4634      	mov	r4, r6
  4013a4:	185b      	adds	r3, r3, r1
  4013a6:	eb44 0402 	adc.w	r4, r4, r2
  4013aa:	18db      	adds	r3, r3, r3
  4013ac:	eb44 0404 	adc.w	r4, r4, r4
  4013b0:	4619      	mov	r1, r3
  4013b2:	4622      	mov	r2, r4
  4013b4:	4b0f      	ldr	r3, [pc, #60]	; (4013f4 <ssd1306_write_command+0x94>)
  4013b6:	f04f 0400 	mov.w	r4, #0
  4013ba:	18cd      	adds	r5, r1, r3
  4013bc:	eb42 0604 	adc.w	r6, r2, r4
  4013c0:	4628      	mov	r0, r5
  4013c2:	4631      	mov	r1, r6
  4013c4:	4c0c      	ldr	r4, [pc, #48]	; (4013f8 <ssd1306_write_command+0x98>)
  4013c6:	4a0d      	ldr	r2, [pc, #52]	; (4013fc <ssd1306_write_command+0x9c>)
  4013c8:	f04f 0300 	mov.w	r3, #0
  4013cc:	47a0      	blx	r4
  4013ce:	4603      	mov	r3, r0
  4013d0:	460c      	mov	r4, r1
  4013d2:	4618      	mov	r0, r3
  4013d4:	4b0a      	ldr	r3, [pc, #40]	; (401400 <ssd1306_write_command+0xa0>)
  4013d6:	4798      	blx	r3
}
  4013d8:	bf00      	nop
  4013da:	370c      	adds	r7, #12
  4013dc:	46bd      	mov	sp, r7
  4013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013e0:	00400f51 	.word	0x00400f51
  4013e4:	40008000 	.word	0x40008000
  4013e8:	004003d1 	.word	0x004003d1
  4013ec:	00400405 	.word	0x00400405
  4013f0:	00400d39 	.word	0x00400d39
  4013f4:	005a83df 	.word	0x005a83df
  4013f8:	00403c41 	.word	0x00403c41
  4013fc:	005a83e0 	.word	0x005a83e0
  401400:	20400001 	.word	0x20400001

00401404 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401404:	b5f0      	push	{r4, r5, r6, r7, lr}
  401406:	b083      	sub	sp, #12
  401408:	af00      	add	r7, sp, #0
  40140a:	4603      	mov	r3, r0
  40140c:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  40140e:	2101      	movs	r1, #1
  401410:	2023      	movs	r0, #35	; 0x23
  401412:	4b1c      	ldr	r3, [pc, #112]	; (401484 <ssd1306_write_data+0x80>)
  401414:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401416:	2101      	movs	r1, #1
  401418:	481b      	ldr	r0, [pc, #108]	; (401488 <ssd1306_write_data+0x84>)
  40141a:	4b1c      	ldr	r3, [pc, #112]	; (40148c <ssd1306_write_data+0x88>)
  40141c:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40141e:	79fb      	ldrb	r3, [r7, #7]
  401420:	b299      	uxth	r1, r3
  401422:	2301      	movs	r3, #1
  401424:	2201      	movs	r2, #1
  401426:	4818      	ldr	r0, [pc, #96]	; (401488 <ssd1306_write_data+0x84>)
  401428:	4c19      	ldr	r4, [pc, #100]	; (401490 <ssd1306_write_data+0x8c>)
  40142a:	47a0      	blx	r4
	delay_us(10);
  40142c:	4b19      	ldr	r3, [pc, #100]	; (401494 <ssd1306_write_data+0x90>)
  40142e:	4798      	blx	r3
  401430:	4603      	mov	r3, r0
  401432:	4619      	mov	r1, r3
  401434:	f04f 0200 	mov.w	r2, #0
  401438:	460b      	mov	r3, r1
  40143a:	4614      	mov	r4, r2
  40143c:	00a6      	lsls	r6, r4, #2
  40143e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401442:	009d      	lsls	r5, r3, #2
  401444:	462b      	mov	r3, r5
  401446:	4634      	mov	r4, r6
  401448:	185b      	adds	r3, r3, r1
  40144a:	eb44 0402 	adc.w	r4, r4, r2
  40144e:	18db      	adds	r3, r3, r3
  401450:	eb44 0404 	adc.w	r4, r4, r4
  401454:	4619      	mov	r1, r3
  401456:	4622      	mov	r2, r4
  401458:	4b0f      	ldr	r3, [pc, #60]	; (401498 <ssd1306_write_data+0x94>)
  40145a:	f04f 0400 	mov.w	r4, #0
  40145e:	18cd      	adds	r5, r1, r3
  401460:	eb42 0604 	adc.w	r6, r2, r4
  401464:	4628      	mov	r0, r5
  401466:	4631      	mov	r1, r6
  401468:	4c0c      	ldr	r4, [pc, #48]	; (40149c <ssd1306_write_data+0x98>)
  40146a:	4a0d      	ldr	r2, [pc, #52]	; (4014a0 <ssd1306_write_data+0x9c>)
  40146c:	f04f 0300 	mov.w	r3, #0
  401470:	47a0      	blx	r4
  401472:	4603      	mov	r3, r0
  401474:	460c      	mov	r4, r1
  401476:	4618      	mov	r0, r3
  401478:	4b0a      	ldr	r3, [pc, #40]	; (4014a4 <ssd1306_write_data+0xa0>)
  40147a:	4798      	blx	r3
}
  40147c:	bf00      	nop
  40147e:	370c      	adds	r7, #12
  401480:	46bd      	mov	sp, r7
  401482:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401484:	00400f51 	.word	0x00400f51
  401488:	40008000 	.word	0x40008000
  40148c:	004003d1 	.word	0x004003d1
  401490:	00400405 	.word	0x00400405
  401494:	00400d39 	.word	0x00400d39
  401498:	005a83df 	.word	0x005a83df
  40149c:	00403c41 	.word	0x00403c41
  4014a0:	005a83e0 	.word	0x005a83e0
  4014a4:	20400001 	.word	0x20400001

004014a8 <osc_enable>:
{
  4014a8:	b580      	push	{r7, lr}
  4014aa:	b082      	sub	sp, #8
  4014ac:	af00      	add	r7, sp, #0
  4014ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4014b0:	687b      	ldr	r3, [r7, #4]
  4014b2:	2b07      	cmp	r3, #7
  4014b4:	d831      	bhi.n	40151a <osc_enable+0x72>
  4014b6:	a201      	add	r2, pc, #4	; (adr r2, 4014bc <osc_enable+0x14>)
  4014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014bc:	00401519 	.word	0x00401519
  4014c0:	004014dd 	.word	0x004014dd
  4014c4:	004014e5 	.word	0x004014e5
  4014c8:	004014ed 	.word	0x004014ed
  4014cc:	004014f5 	.word	0x004014f5
  4014d0:	004014fd 	.word	0x004014fd
  4014d4:	00401505 	.word	0x00401505
  4014d8:	0040150f 	.word	0x0040150f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4014dc:	2000      	movs	r0, #0
  4014de:	4b11      	ldr	r3, [pc, #68]	; (401524 <osc_enable+0x7c>)
  4014e0:	4798      	blx	r3
		break;
  4014e2:	e01a      	b.n	40151a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4014e4:	2001      	movs	r0, #1
  4014e6:	4b0f      	ldr	r3, [pc, #60]	; (401524 <osc_enable+0x7c>)
  4014e8:	4798      	blx	r3
		break;
  4014ea:	e016      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4014ec:	2000      	movs	r0, #0
  4014ee:	4b0e      	ldr	r3, [pc, #56]	; (401528 <osc_enable+0x80>)
  4014f0:	4798      	blx	r3
		break;
  4014f2:	e012      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4014f4:	2010      	movs	r0, #16
  4014f6:	4b0c      	ldr	r3, [pc, #48]	; (401528 <osc_enable+0x80>)
  4014f8:	4798      	blx	r3
		break;
  4014fa:	e00e      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4014fc:	2020      	movs	r0, #32
  4014fe:	4b0a      	ldr	r3, [pc, #40]	; (401528 <osc_enable+0x80>)
  401500:	4798      	blx	r3
		break;
  401502:	e00a      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401504:	213e      	movs	r1, #62	; 0x3e
  401506:	2000      	movs	r0, #0
  401508:	4b08      	ldr	r3, [pc, #32]	; (40152c <osc_enable+0x84>)
  40150a:	4798      	blx	r3
		break;
  40150c:	e005      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40150e:	213e      	movs	r1, #62	; 0x3e
  401510:	2001      	movs	r0, #1
  401512:	4b06      	ldr	r3, [pc, #24]	; (40152c <osc_enable+0x84>)
  401514:	4798      	blx	r3
		break;
  401516:	e000      	b.n	40151a <osc_enable+0x72>
		break;
  401518:	bf00      	nop
}
  40151a:	bf00      	nop
  40151c:	3708      	adds	r7, #8
  40151e:	46bd      	mov	sp, r7
  401520:	bd80      	pop	{r7, pc}
  401522:	bf00      	nop
  401524:	004023ed 	.word	0x004023ed
  401528:	00402459 	.word	0x00402459
  40152c:	004024c9 	.word	0x004024c9

00401530 <osc_is_ready>:
{
  401530:	b580      	push	{r7, lr}
  401532:	b082      	sub	sp, #8
  401534:	af00      	add	r7, sp, #0
  401536:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401538:	687b      	ldr	r3, [r7, #4]
  40153a:	2b07      	cmp	r3, #7
  40153c:	d826      	bhi.n	40158c <osc_is_ready+0x5c>
  40153e:	a201      	add	r2, pc, #4	; (adr r2, 401544 <osc_is_ready+0x14>)
  401540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401544:	00401565 	.word	0x00401565
  401548:	00401569 	.word	0x00401569
  40154c:	00401569 	.word	0x00401569
  401550:	0040157b 	.word	0x0040157b
  401554:	0040157b 	.word	0x0040157b
  401558:	0040157b 	.word	0x0040157b
  40155c:	0040157b 	.word	0x0040157b
  401560:	0040157b 	.word	0x0040157b
		return 1;
  401564:	2301      	movs	r3, #1
  401566:	e012      	b.n	40158e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401568:	4b0b      	ldr	r3, [pc, #44]	; (401598 <osc_is_ready+0x68>)
  40156a:	4798      	blx	r3
  40156c:	4603      	mov	r3, r0
  40156e:	2b00      	cmp	r3, #0
  401570:	bf14      	ite	ne
  401572:	2301      	movne	r3, #1
  401574:	2300      	moveq	r3, #0
  401576:	b2db      	uxtb	r3, r3
  401578:	e009      	b.n	40158e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40157a:	4b08      	ldr	r3, [pc, #32]	; (40159c <osc_is_ready+0x6c>)
  40157c:	4798      	blx	r3
  40157e:	4603      	mov	r3, r0
  401580:	2b00      	cmp	r3, #0
  401582:	bf14      	ite	ne
  401584:	2301      	movne	r3, #1
  401586:	2300      	moveq	r3, #0
  401588:	b2db      	uxtb	r3, r3
  40158a:	e000      	b.n	40158e <osc_is_ready+0x5e>
	return 0;
  40158c:	2300      	movs	r3, #0
}
  40158e:	4618      	mov	r0, r3
  401590:	3708      	adds	r7, #8
  401592:	46bd      	mov	sp, r7
  401594:	bd80      	pop	{r7, pc}
  401596:	bf00      	nop
  401598:	00402425 	.word	0x00402425
  40159c:	00402541 	.word	0x00402541

004015a0 <osc_get_rate>:
{
  4015a0:	b480      	push	{r7}
  4015a2:	b083      	sub	sp, #12
  4015a4:	af00      	add	r7, sp, #0
  4015a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015a8:	687b      	ldr	r3, [r7, #4]
  4015aa:	2b07      	cmp	r3, #7
  4015ac:	d825      	bhi.n	4015fa <osc_get_rate+0x5a>
  4015ae:	a201      	add	r2, pc, #4	; (adr r2, 4015b4 <osc_get_rate+0x14>)
  4015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4015b4:	004015d5 	.word	0x004015d5
  4015b8:	004015db 	.word	0x004015db
  4015bc:	004015e1 	.word	0x004015e1
  4015c0:	004015e7 	.word	0x004015e7
  4015c4:	004015eb 	.word	0x004015eb
  4015c8:	004015ef 	.word	0x004015ef
  4015cc:	004015f3 	.word	0x004015f3
  4015d0:	004015f7 	.word	0x004015f7
		return OSC_SLCK_32K_RC_HZ;
  4015d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4015d8:	e010      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4015da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015de:	e00d      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4015e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015e4:	e00a      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4015e6:	4b08      	ldr	r3, [pc, #32]	; (401608 <osc_get_rate+0x68>)
  4015e8:	e008      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4015ea:	4b08      	ldr	r3, [pc, #32]	; (40160c <osc_get_rate+0x6c>)
  4015ec:	e006      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4015ee:	4b08      	ldr	r3, [pc, #32]	; (401610 <osc_get_rate+0x70>)
  4015f0:	e004      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4015f2:	4b07      	ldr	r3, [pc, #28]	; (401610 <osc_get_rate+0x70>)
  4015f4:	e002      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4015f6:	4b06      	ldr	r3, [pc, #24]	; (401610 <osc_get_rate+0x70>)
  4015f8:	e000      	b.n	4015fc <osc_get_rate+0x5c>
	return 0;
  4015fa:	2300      	movs	r3, #0
}
  4015fc:	4618      	mov	r0, r3
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	f85d 7b04 	ldr.w	r7, [sp], #4
  401606:	4770      	bx	lr
  401608:	003d0900 	.word	0x003d0900
  40160c:	007a1200 	.word	0x007a1200
  401610:	00b71b00 	.word	0x00b71b00

00401614 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401614:	b580      	push	{r7, lr}
  401616:	b082      	sub	sp, #8
  401618:	af00      	add	r7, sp, #0
  40161a:	4603      	mov	r3, r0
  40161c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40161e:	bf00      	nop
  401620:	79fb      	ldrb	r3, [r7, #7]
  401622:	4618      	mov	r0, r3
  401624:	4b05      	ldr	r3, [pc, #20]	; (40163c <osc_wait_ready+0x28>)
  401626:	4798      	blx	r3
  401628:	4603      	mov	r3, r0
  40162a:	f083 0301 	eor.w	r3, r3, #1
  40162e:	b2db      	uxtb	r3, r3
  401630:	2b00      	cmp	r3, #0
  401632:	d1f5      	bne.n	401620 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401634:	bf00      	nop
  401636:	3708      	adds	r7, #8
  401638:	46bd      	mov	sp, r7
  40163a:	bd80      	pop	{r7, pc}
  40163c:	00401531 	.word	0x00401531

00401640 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401640:	b580      	push	{r7, lr}
  401642:	b086      	sub	sp, #24
  401644:	af00      	add	r7, sp, #0
  401646:	60f8      	str	r0, [r7, #12]
  401648:	607a      	str	r2, [r7, #4]
  40164a:	603b      	str	r3, [r7, #0]
  40164c:	460b      	mov	r3, r1
  40164e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  401650:	687b      	ldr	r3, [r7, #4]
  401652:	2b00      	cmp	r3, #0
  401654:	d107      	bne.n	401666 <pll_config_init+0x26>
  401656:	683b      	ldr	r3, [r7, #0]
  401658:	2b00      	cmp	r3, #0
  40165a:	d104      	bne.n	401666 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  40165c:	68fb      	ldr	r3, [r7, #12]
  40165e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  401662:	601a      	str	r2, [r3, #0]
  401664:	e019      	b.n	40169a <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401666:	7afb      	ldrb	r3, [r7, #11]
  401668:	4618      	mov	r0, r3
  40166a:	4b0e      	ldr	r3, [pc, #56]	; (4016a4 <pll_config_init+0x64>)
  40166c:	4798      	blx	r3
  40166e:	4602      	mov	r2, r0
  401670:	687b      	ldr	r3, [r7, #4]
  401672:	fbb2 f3f3 	udiv	r3, r2, r3
  401676:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401678:	697b      	ldr	r3, [r7, #20]
  40167a:	683a      	ldr	r2, [r7, #0]
  40167c:	fb02 f303 	mul.w	r3, r2, r3
  401680:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401682:	683b      	ldr	r3, [r7, #0]
  401684:	3b01      	subs	r3, #1
  401686:	041a      	lsls	r2, r3, #16
  401688:	4b07      	ldr	r3, [pc, #28]	; (4016a8 <pll_config_init+0x68>)
  40168a:	4013      	ands	r3, r2
  40168c:	687a      	ldr	r2, [r7, #4]
  40168e:	b2d2      	uxtb	r2, r2
  401690:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401692:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401696:	68fb      	ldr	r3, [r7, #12]
  401698:	601a      	str	r2, [r3, #0]
	}
}
  40169a:	bf00      	nop
  40169c:	3718      	adds	r7, #24
  40169e:	46bd      	mov	sp, r7
  4016a0:	bd80      	pop	{r7, pc}
  4016a2:	bf00      	nop
  4016a4:	004015a1 	.word	0x004015a1
  4016a8:	07ff0000 	.word	0x07ff0000

004016ac <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4016ac:	b580      	push	{r7, lr}
  4016ae:	b082      	sub	sp, #8
  4016b0:	af00      	add	r7, sp, #0
  4016b2:	6078      	str	r0, [r7, #4]
  4016b4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4016b6:	683b      	ldr	r3, [r7, #0]
  4016b8:	2b00      	cmp	r3, #0
  4016ba:	d108      	bne.n	4016ce <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4016bc:	4b09      	ldr	r3, [pc, #36]	; (4016e4 <pll_enable+0x38>)
  4016be:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4016c0:	4a09      	ldr	r2, [pc, #36]	; (4016e8 <pll_enable+0x3c>)
  4016c2:	687b      	ldr	r3, [r7, #4]
  4016c4:	681b      	ldr	r3, [r3, #0]
  4016c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4016ca:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4016cc:	e005      	b.n	4016da <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4016ce:	4a06      	ldr	r2, [pc, #24]	; (4016e8 <pll_enable+0x3c>)
  4016d0:	687b      	ldr	r3, [r7, #4]
  4016d2:	681b      	ldr	r3, [r3, #0]
  4016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4016d8:	61d3      	str	r3, [r2, #28]
}
  4016da:	bf00      	nop
  4016dc:	3708      	adds	r7, #8
  4016de:	46bd      	mov	sp, r7
  4016e0:	bd80      	pop	{r7, pc}
  4016e2:	bf00      	nop
  4016e4:	0040255d 	.word	0x0040255d
  4016e8:	400e0600 	.word	0x400e0600

004016ec <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4016ec:	b580      	push	{r7, lr}
  4016ee:	b082      	sub	sp, #8
  4016f0:	af00      	add	r7, sp, #0
  4016f2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	2b00      	cmp	r3, #0
  4016f8:	d103      	bne.n	401702 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4016fa:	4b05      	ldr	r3, [pc, #20]	; (401710 <pll_is_locked+0x24>)
  4016fc:	4798      	blx	r3
  4016fe:	4603      	mov	r3, r0
  401700:	e002      	b.n	401708 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  401702:	4b04      	ldr	r3, [pc, #16]	; (401714 <pll_is_locked+0x28>)
  401704:	4798      	blx	r3
  401706:	4603      	mov	r3, r0
	}
}
  401708:	4618      	mov	r0, r3
  40170a:	3708      	adds	r7, #8
  40170c:	46bd      	mov	sp, r7
  40170e:	bd80      	pop	{r7, pc}
  401710:	00402579 	.word	0x00402579
  401714:	00402595 	.word	0x00402595

00401718 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401718:	b580      	push	{r7, lr}
  40171a:	b082      	sub	sp, #8
  40171c:	af00      	add	r7, sp, #0
  40171e:	4603      	mov	r3, r0
  401720:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401722:	79fb      	ldrb	r3, [r7, #7]
  401724:	3b03      	subs	r3, #3
  401726:	2b04      	cmp	r3, #4
  401728:	d808      	bhi.n	40173c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40172a:	79fb      	ldrb	r3, [r7, #7]
  40172c:	4618      	mov	r0, r3
  40172e:	4b06      	ldr	r3, [pc, #24]	; (401748 <pll_enable_source+0x30>)
  401730:	4798      	blx	r3
		osc_wait_ready(e_src);
  401732:	79fb      	ldrb	r3, [r7, #7]
  401734:	4618      	mov	r0, r3
  401736:	4b05      	ldr	r3, [pc, #20]	; (40174c <pll_enable_source+0x34>)
  401738:	4798      	blx	r3
		break;
  40173a:	e000      	b.n	40173e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40173c:	bf00      	nop
	}
}
  40173e:	bf00      	nop
  401740:	3708      	adds	r7, #8
  401742:	46bd      	mov	sp, r7
  401744:	bd80      	pop	{r7, pc}
  401746:	bf00      	nop
  401748:	004014a9 	.word	0x004014a9
  40174c:	00401615 	.word	0x00401615

00401750 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401750:	b580      	push	{r7, lr}
  401752:	b082      	sub	sp, #8
  401754:	af00      	add	r7, sp, #0
  401756:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401758:	bf00      	nop
  40175a:	6878      	ldr	r0, [r7, #4]
  40175c:	4b04      	ldr	r3, [pc, #16]	; (401770 <pll_wait_for_lock+0x20>)
  40175e:	4798      	blx	r3
  401760:	4603      	mov	r3, r0
  401762:	2b00      	cmp	r3, #0
  401764:	d0f9      	beq.n	40175a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401766:	2300      	movs	r3, #0
}
  401768:	4618      	mov	r0, r3
  40176a:	3708      	adds	r7, #8
  40176c:	46bd      	mov	sp, r7
  40176e:	bd80      	pop	{r7, pc}
  401770:	004016ed 	.word	0x004016ed

00401774 <sysclk_get_main_hz>:
{
  401774:	b580      	push	{r7, lr}
  401776:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401778:	2006      	movs	r0, #6
  40177a:	4b05      	ldr	r3, [pc, #20]	; (401790 <sysclk_get_main_hz+0x1c>)
  40177c:	4798      	blx	r3
  40177e:	4602      	mov	r2, r0
  401780:	4613      	mov	r3, r2
  401782:	009b      	lsls	r3, r3, #2
  401784:	4413      	add	r3, r2
  401786:	009a      	lsls	r2, r3, #2
  401788:	4413      	add	r3, r2
}
  40178a:	4618      	mov	r0, r3
  40178c:	bd80      	pop	{r7, pc}
  40178e:	bf00      	nop
  401790:	004015a1 	.word	0x004015a1

00401794 <sysclk_get_cpu_hz>:
{
  401794:	b580      	push	{r7, lr}
  401796:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401798:	4b02      	ldr	r3, [pc, #8]	; (4017a4 <sysclk_get_cpu_hz+0x10>)
  40179a:	4798      	blx	r3
  40179c:	4603      	mov	r3, r0
}
  40179e:	4618      	mov	r0, r3
  4017a0:	bd80      	pop	{r7, pc}
  4017a2:	bf00      	nop
  4017a4:	00401775 	.word	0x00401775

004017a8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4017a8:	b590      	push	{r4, r7, lr}
  4017aa:	b083      	sub	sp, #12
  4017ac:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4017ae:	4813      	ldr	r0, [pc, #76]	; (4017fc <sysclk_init+0x54>)
  4017b0:	4b13      	ldr	r3, [pc, #76]	; (401800 <sysclk_init+0x58>)
  4017b2:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4017b4:	2006      	movs	r0, #6
  4017b6:	4b13      	ldr	r3, [pc, #76]	; (401804 <sysclk_init+0x5c>)
  4017b8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4017ba:	1d38      	adds	r0, r7, #4
  4017bc:	2319      	movs	r3, #25
  4017be:	2201      	movs	r2, #1
  4017c0:	2106      	movs	r1, #6
  4017c2:	4c11      	ldr	r4, [pc, #68]	; (401808 <sysclk_init+0x60>)
  4017c4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4017c6:	1d3b      	adds	r3, r7, #4
  4017c8:	2100      	movs	r1, #0
  4017ca:	4618      	mov	r0, r3
  4017cc:	4b0f      	ldr	r3, [pc, #60]	; (40180c <sysclk_init+0x64>)
  4017ce:	4798      	blx	r3
		pll_wait_for_lock(0);
  4017d0:	2000      	movs	r0, #0
  4017d2:	4b0f      	ldr	r3, [pc, #60]	; (401810 <sysclk_init+0x68>)
  4017d4:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4017d6:	2002      	movs	r0, #2
  4017d8:	4b0e      	ldr	r3, [pc, #56]	; (401814 <sysclk_init+0x6c>)
  4017da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4017dc:	2000      	movs	r0, #0
  4017de:	4b0e      	ldr	r3, [pc, #56]	; (401818 <sysclk_init+0x70>)
  4017e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4017e2:	4b0e      	ldr	r3, [pc, #56]	; (40181c <sysclk_init+0x74>)
  4017e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4017e6:	4b0e      	ldr	r3, [pc, #56]	; (401820 <sysclk_init+0x78>)
  4017e8:	4798      	blx	r3
  4017ea:	4603      	mov	r3, r0
  4017ec:	4618      	mov	r0, r3
  4017ee:	4b04      	ldr	r3, [pc, #16]	; (401800 <sysclk_init+0x58>)
  4017f0:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4017f2:	bf00      	nop
  4017f4:	370c      	adds	r7, #12
  4017f6:	46bd      	mov	sp, r7
  4017f8:	bd90      	pop	{r4, r7, pc}
  4017fa:	bf00      	nop
  4017fc:	11e1a300 	.word	0x11e1a300
  401800:	00402d25 	.word	0x00402d25
  401804:	00401719 	.word	0x00401719
  401808:	00401641 	.word	0x00401641
  40180c:	004016ad 	.word	0x004016ad
  401810:	00401751 	.word	0x00401751
  401814:	004022ed 	.word	0x004022ed
  401818:	00402369 	.word	0x00402369
  40181c:	00402bbd 	.word	0x00402bbd
  401820:	00401795 	.word	0x00401795

00401824 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401824:	b480      	push	{r7}
  401826:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40182c:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401830:	4b09      	ldr	r3, [pc, #36]	; (401858 <SCB_EnableICache+0x34>)
  401832:	2200      	movs	r2, #0
  401834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401838:	4a07      	ldr	r2, [pc, #28]	; (401858 <SCB_EnableICache+0x34>)
  40183a:	4b07      	ldr	r3, [pc, #28]	; (401858 <SCB_EnableICache+0x34>)
  40183c:	695b      	ldr	r3, [r3, #20]
  40183e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401842:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  401844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401848:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  40184c:	bf00      	nop
  40184e:	46bd      	mov	sp, r7
  401850:	f85d 7b04 	ldr.w	r7, [sp], #4
  401854:	4770      	bx	lr
  401856:	bf00      	nop
  401858:	e000ed00 	.word	0xe000ed00

0040185c <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  40185c:	b480      	push	{r7}
  40185e:	b08b      	sub	sp, #44	; 0x2c
  401860:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401862:	4b26      	ldr	r3, [pc, #152]	; (4018fc <SCB_EnableDCache+0xa0>)
  401864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  401868:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40186a:	69fb      	ldr	r3, [r7, #28]
  40186c:	0b5b      	lsrs	r3, r3, #13
  40186e:	f3c3 030e 	ubfx	r3, r3, #0, #15
  401872:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401874:	69fb      	ldr	r3, [r7, #28]
  401876:	f003 0307 	and.w	r3, r3, #7
  40187a:	3304      	adds	r3, #4
  40187c:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  40187e:	69fb      	ldr	r3, [r7, #28]
  401880:	08db      	lsrs	r3, r3, #3
  401882:	f3c3 0309 	ubfx	r3, r3, #0, #10
  401886:	617b      	str	r3, [r7, #20]
  401888:	697b      	ldr	r3, [r7, #20]
  40188a:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40188c:	68bb      	ldr	r3, [r7, #8]
  40188e:	fab3 f383 	clz	r3, r3
  401892:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  401894:	687b      	ldr	r3, [r7, #4]
  401896:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  401898:	f003 031f 	and.w	r3, r3, #31
  40189c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  40189e:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4018a2:	697b      	ldr	r3, [r7, #20]
  4018a4:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4018a6:	6a3a      	ldr	r2, [r7, #32]
  4018a8:	693b      	ldr	r3, [r7, #16]
  4018aa:	fa02 f303 	lsl.w	r3, r2, r3
  4018ae:	4619      	mov	r1, r3
  4018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4018b2:	69bb      	ldr	r3, [r7, #24]
  4018b4:	fa02 f303 	lsl.w	r3, r2, r3
  4018b8:	430b      	orrs	r3, r1
  4018ba:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  4018bc:	4a0f      	ldr	r2, [pc, #60]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018be:	68fb      	ldr	r3, [r7, #12]
  4018c0:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  4018c4:	6a3b      	ldr	r3, [r7, #32]
  4018c6:	1e5a      	subs	r2, r3, #1
  4018c8:	623a      	str	r2, [r7, #32]
  4018ca:	2b00      	cmp	r3, #0
  4018cc:	d1eb      	bne.n	4018a6 <SCB_EnableDCache+0x4a>
        } while(sets--);
  4018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4018d0:	1e5a      	subs	r2, r3, #1
  4018d2:	627a      	str	r2, [r7, #36]	; 0x24
  4018d4:	2b00      	cmp	r3, #0
  4018d6:	d1e4      	bne.n	4018a2 <SCB_EnableDCache+0x46>
  4018d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4018dc:	4a07      	ldr	r2, [pc, #28]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018de:	4b07      	ldr	r3, [pc, #28]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018e0:	695b      	ldr	r3, [r3, #20]
  4018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4018e6:	6153      	str	r3, [r2, #20]
  4018e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4018ec:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4018f0:	bf00      	nop
  4018f2:	372c      	adds	r7, #44	; 0x2c
  4018f4:	46bd      	mov	sp, r7
  4018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018fa:	4770      	bx	lr
  4018fc:	e000ed00 	.word	0xe000ed00

00401900 <sysclk_enable_peripheral_clock>:
{
  401900:	b580      	push	{r7, lr}
  401902:	b082      	sub	sp, #8
  401904:	af00      	add	r7, sp, #0
  401906:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401908:	6878      	ldr	r0, [r7, #4]
  40190a:	4b03      	ldr	r3, [pc, #12]	; (401918 <sysclk_enable_peripheral_clock+0x18>)
  40190c:	4798      	blx	r3
}
  40190e:	bf00      	nop
  401910:	3708      	adds	r7, #8
  401912:	46bd      	mov	sp, r7
  401914:	bd80      	pop	{r7, pc}
  401916:	bf00      	nop
  401918:	004025b1 	.word	0x004025b1

0040191c <ioport_init>:
{
  40191c:	b580      	push	{r7, lr}
  40191e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401920:	200a      	movs	r0, #10
  401922:	4b08      	ldr	r3, [pc, #32]	; (401944 <ioport_init+0x28>)
  401924:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401926:	200b      	movs	r0, #11
  401928:	4b06      	ldr	r3, [pc, #24]	; (401944 <ioport_init+0x28>)
  40192a:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  40192c:	200c      	movs	r0, #12
  40192e:	4b05      	ldr	r3, [pc, #20]	; (401944 <ioport_init+0x28>)
  401930:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  401932:	2010      	movs	r0, #16
  401934:	4b03      	ldr	r3, [pc, #12]	; (401944 <ioport_init+0x28>)
  401936:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401938:	2011      	movs	r0, #17
  40193a:	4b02      	ldr	r3, [pc, #8]	; (401944 <ioport_init+0x28>)
  40193c:	4798      	blx	r3
}
  40193e:	bf00      	nop
  401940:	bd80      	pop	{r7, pc}
  401942:	bf00      	nop
  401944:	00401901 	.word	0x00401901

00401948 <ioport_set_pin_mode>:
{
  401948:	b480      	push	{r7}
  40194a:	b08d      	sub	sp, #52	; 0x34
  40194c:	af00      	add	r7, sp, #0
  40194e:	6078      	str	r0, [r7, #4]
  401950:	6039      	str	r1, [r7, #0]
  401952:	687b      	ldr	r3, [r7, #4]
  401954:	62fb      	str	r3, [r7, #44]	; 0x2c
  401956:	683b      	ldr	r3, [r7, #0]
  401958:	62bb      	str	r3, [r7, #40]	; 0x28
  40195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40195c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401960:	095a      	lsrs	r2, r3, #5
  401962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401964:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401966:	6a3b      	ldr	r3, [r7, #32]
  401968:	f003 031f 	and.w	r3, r3, #31
  40196c:	2101      	movs	r1, #1
  40196e:	fa01 f303 	lsl.w	r3, r1, r3
  401972:	61fa      	str	r2, [r7, #28]
  401974:	61bb      	str	r3, [r7, #24]
  401976:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401978:	617b      	str	r3, [r7, #20]
  40197a:	69fb      	ldr	r3, [r7, #28]
  40197c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40197e:	693a      	ldr	r2, [r7, #16]
  401980:	4b37      	ldr	r3, [pc, #220]	; (401a60 <ioport_set_pin_mode+0x118>)
  401982:	4413      	add	r3, r2
  401984:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401986:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401988:	697b      	ldr	r3, [r7, #20]
  40198a:	f003 0308 	and.w	r3, r3, #8
  40198e:	2b00      	cmp	r3, #0
  401990:	d003      	beq.n	40199a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  401992:	68fb      	ldr	r3, [r7, #12]
  401994:	69ba      	ldr	r2, [r7, #24]
  401996:	665a      	str	r2, [r3, #100]	; 0x64
  401998:	e002      	b.n	4019a0 <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  40199a:	68fb      	ldr	r3, [r7, #12]
  40199c:	69ba      	ldr	r2, [r7, #24]
  40199e:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4019a0:	697b      	ldr	r3, [r7, #20]
  4019a2:	f003 0310 	and.w	r3, r3, #16
  4019a6:	2b00      	cmp	r3, #0
  4019a8:	d004      	beq.n	4019b4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4019aa:	68fb      	ldr	r3, [r7, #12]
  4019ac:	69ba      	ldr	r2, [r7, #24]
  4019ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4019b2:	e003      	b.n	4019bc <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  4019b4:	68fb      	ldr	r3, [r7, #12]
  4019b6:	69ba      	ldr	r2, [r7, #24]
  4019b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4019bc:	697b      	ldr	r3, [r7, #20]
  4019be:	f003 0320 	and.w	r3, r3, #32
  4019c2:	2b00      	cmp	r3, #0
  4019c4:	d003      	beq.n	4019ce <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4019c6:	68fb      	ldr	r3, [r7, #12]
  4019c8:	69ba      	ldr	r2, [r7, #24]
  4019ca:	651a      	str	r2, [r3, #80]	; 0x50
  4019cc:	e002      	b.n	4019d4 <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  4019ce:	68fb      	ldr	r3, [r7, #12]
  4019d0:	69ba      	ldr	r2, [r7, #24]
  4019d2:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4019d4:	697b      	ldr	r3, [r7, #20]
  4019d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4019da:	2b00      	cmp	r3, #0
  4019dc:	d003      	beq.n	4019e6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4019de:	68fb      	ldr	r3, [r7, #12]
  4019e0:	69ba      	ldr	r2, [r7, #24]
  4019e2:	621a      	str	r2, [r3, #32]
  4019e4:	e002      	b.n	4019ec <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  4019e6:	68fb      	ldr	r3, [r7, #12]
  4019e8:	69ba      	ldr	r2, [r7, #24]
  4019ea:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4019ec:	697b      	ldr	r3, [r7, #20]
  4019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4019f2:	2b00      	cmp	r3, #0
  4019f4:	d004      	beq.n	401a00 <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  4019f6:	68fb      	ldr	r3, [r7, #12]
  4019f8:	69ba      	ldr	r2, [r7, #24]
  4019fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4019fe:	e003      	b.n	401a08 <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  401a00:	68fb      	ldr	r3, [r7, #12]
  401a02:	69ba      	ldr	r2, [r7, #24]
  401a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401a08:	697b      	ldr	r3, [r7, #20]
  401a0a:	f003 0301 	and.w	r3, r3, #1
  401a0e:	2b00      	cmp	r3, #0
  401a10:	d006      	beq.n	401a20 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a16:	69bb      	ldr	r3, [r7, #24]
  401a18:	431a      	orrs	r2, r3
  401a1a:	68fb      	ldr	r3, [r7, #12]
  401a1c:	671a      	str	r2, [r3, #112]	; 0x70
  401a1e:	e006      	b.n	401a2e <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  401a20:	68fb      	ldr	r3, [r7, #12]
  401a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a24:	69bb      	ldr	r3, [r7, #24]
  401a26:	43db      	mvns	r3, r3
  401a28:	401a      	ands	r2, r3
  401a2a:	68fb      	ldr	r3, [r7, #12]
  401a2c:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401a2e:	697b      	ldr	r3, [r7, #20]
  401a30:	f003 0302 	and.w	r3, r3, #2
  401a34:	2b00      	cmp	r3, #0
  401a36:	d006      	beq.n	401a46 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401a38:	68fb      	ldr	r3, [r7, #12]
  401a3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a3c:	69bb      	ldr	r3, [r7, #24]
  401a3e:	431a      	orrs	r2, r3
  401a40:	68fb      	ldr	r3, [r7, #12]
  401a42:	675a      	str	r2, [r3, #116]	; 0x74
}
  401a44:	e006      	b.n	401a54 <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  401a46:	68fb      	ldr	r3, [r7, #12]
  401a48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a4a:	69bb      	ldr	r3, [r7, #24]
  401a4c:	43db      	mvns	r3, r3
  401a4e:	401a      	ands	r2, r3
  401a50:	68fb      	ldr	r3, [r7, #12]
  401a52:	675a      	str	r2, [r3, #116]	; 0x74
  401a54:	bf00      	nop
  401a56:	3734      	adds	r7, #52	; 0x34
  401a58:	46bd      	mov	sp, r7
  401a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a5e:	4770      	bx	lr
  401a60:	00200707 	.word	0x00200707

00401a64 <ioport_set_pin_dir>:
{
  401a64:	b480      	push	{r7}
  401a66:	b08d      	sub	sp, #52	; 0x34
  401a68:	af00      	add	r7, sp, #0
  401a6a:	6078      	str	r0, [r7, #4]
  401a6c:	460b      	mov	r3, r1
  401a6e:	70fb      	strb	r3, [r7, #3]
  401a70:	687b      	ldr	r3, [r7, #4]
  401a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  401a74:	78fb      	ldrb	r3, [r7, #3]
  401a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a7c:	627b      	str	r3, [r7, #36]	; 0x24
  401a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a80:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401a82:	6a3b      	ldr	r3, [r7, #32]
  401a84:	095b      	lsrs	r3, r3, #5
  401a86:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a88:	69fa      	ldr	r2, [r7, #28]
  401a8a:	4b17      	ldr	r3, [pc, #92]	; (401ae8 <ioport_set_pin_dir+0x84>)
  401a8c:	4413      	add	r3, r2
  401a8e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401a90:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401a92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401a96:	2b01      	cmp	r3, #1
  401a98:	d109      	bne.n	401aae <ioport_set_pin_dir+0x4a>
  401a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a9c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401a9e:	697b      	ldr	r3, [r7, #20]
  401aa0:	f003 031f 	and.w	r3, r3, #31
  401aa4:	2201      	movs	r2, #1
  401aa6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401aa8:	69bb      	ldr	r3, [r7, #24]
  401aaa:	611a      	str	r2, [r3, #16]
  401aac:	e00c      	b.n	401ac8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d108      	bne.n	401ac8 <ioport_set_pin_dir+0x64>
  401ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ab8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401aba:	693b      	ldr	r3, [r7, #16]
  401abc:	f003 031f 	and.w	r3, r3, #31
  401ac0:	2201      	movs	r2, #1
  401ac2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ac4:	69bb      	ldr	r3, [r7, #24]
  401ac6:	615a      	str	r2, [r3, #20]
  401ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401aca:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401acc:	68fb      	ldr	r3, [r7, #12]
  401ace:	f003 031f 	and.w	r3, r3, #31
  401ad2:	2201      	movs	r2, #1
  401ad4:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ad6:	69bb      	ldr	r3, [r7, #24]
  401ad8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401adc:	bf00      	nop
  401ade:	3734      	adds	r7, #52	; 0x34
  401ae0:	46bd      	mov	sp, r7
  401ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae6:	4770      	bx	lr
  401ae8:	00200707 	.word	0x00200707

00401aec <ioport_set_pin_level>:
{
  401aec:	b480      	push	{r7}
  401aee:	b08b      	sub	sp, #44	; 0x2c
  401af0:	af00      	add	r7, sp, #0
  401af2:	6078      	str	r0, [r7, #4]
  401af4:	460b      	mov	r3, r1
  401af6:	70fb      	strb	r3, [r7, #3]
  401af8:	687b      	ldr	r3, [r7, #4]
  401afa:	627b      	str	r3, [r7, #36]	; 0x24
  401afc:	78fb      	ldrb	r3, [r7, #3]
  401afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b04:	61fb      	str	r3, [r7, #28]
  401b06:	69fb      	ldr	r3, [r7, #28]
  401b08:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401b0a:	69bb      	ldr	r3, [r7, #24]
  401b0c:	095b      	lsrs	r3, r3, #5
  401b0e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b10:	697a      	ldr	r2, [r7, #20]
  401b12:	4b10      	ldr	r3, [pc, #64]	; (401b54 <ioport_set_pin_level+0x68>)
  401b14:	4413      	add	r3, r2
  401b16:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401b18:	613b      	str	r3, [r7, #16]
	if (level) {
  401b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401b1e:	2b00      	cmp	r3, #0
  401b20:	d009      	beq.n	401b36 <ioport_set_pin_level+0x4a>
  401b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b24:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401b26:	68fb      	ldr	r3, [r7, #12]
  401b28:	f003 031f 	and.w	r3, r3, #31
  401b2c:	2201      	movs	r2, #1
  401b2e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b30:	693b      	ldr	r3, [r7, #16]
  401b32:	631a      	str	r2, [r3, #48]	; 0x30
}
  401b34:	e008      	b.n	401b48 <ioport_set_pin_level+0x5c>
  401b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b38:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401b3a:	68bb      	ldr	r3, [r7, #8]
  401b3c:	f003 031f 	and.w	r3, r3, #31
  401b40:	2201      	movs	r2, #1
  401b42:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b44:	693b      	ldr	r3, [r7, #16]
  401b46:	635a      	str	r2, [r3, #52]	; 0x34
  401b48:	bf00      	nop
  401b4a:	372c      	adds	r7, #44	; 0x2c
  401b4c:	46bd      	mov	sp, r7
  401b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b52:	4770      	bx	lr
  401b54:	00200707 	.word	0x00200707

00401b58 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  401b58:	b480      	push	{r7}
  401b5a:	b08d      	sub	sp, #52	; 0x34
  401b5c:	af00      	add	r7, sp, #0
  401b5e:	6078      	str	r0, [r7, #4]
  401b60:	460b      	mov	r3, r1
  401b62:	70fb      	strb	r3, [r7, #3]
  401b64:	687b      	ldr	r3, [r7, #4]
  401b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b68:	78fb      	ldrb	r3, [r7, #3]
  401b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b70:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b74:	095a      	lsrs	r2, r3, #5
  401b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b78:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401b7a:	6a3b      	ldr	r3, [r7, #32]
  401b7c:	f003 031f 	and.w	r3, r3, #31
  401b80:	2101      	movs	r1, #1
  401b82:	fa01 f303 	lsl.w	r3, r1, r3
  401b86:	61fa      	str	r2, [r7, #28]
  401b88:	61bb      	str	r3, [r7, #24]
  401b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b8e:	75fb      	strb	r3, [r7, #23]
  401b90:	69fb      	ldr	r3, [r7, #28]
  401b92:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b94:	693a      	ldr	r2, [r7, #16]
  401b96:	4b23      	ldr	r3, [pc, #140]	; (401c24 <ioport_set_pin_sense_mode+0xcc>)
  401b98:	4413      	add	r3, r2
  401b9a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  401b9c:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  401b9e:	7dfb      	ldrb	r3, [r7, #23]
  401ba0:	3b01      	subs	r3, #1
  401ba2:	2b03      	cmp	r3, #3
  401ba4:	d82e      	bhi.n	401c04 <ioport_set_pin_sense_mode+0xac>
  401ba6:	a201      	add	r2, pc, #4	; (adr r2, 401bac <ioport_set_pin_sense_mode+0x54>)
  401ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401bac:	00401be1 	.word	0x00401be1
  401bb0:	00401bf3 	.word	0x00401bf3
  401bb4:	00401bbd 	.word	0x00401bbd
  401bb8:	00401bcf 	.word	0x00401bcf
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401bbc:	68fb      	ldr	r3, [r7, #12]
  401bbe:	69ba      	ldr	r2, [r7, #24]
  401bc0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401bc4:	68fb      	ldr	r3, [r7, #12]
  401bc6:	69ba      	ldr	r2, [r7, #24]
  401bc8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401bcc:	e01f      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401bce:	68fb      	ldr	r3, [r7, #12]
  401bd0:	69ba      	ldr	r2, [r7, #24]
  401bd2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401bd6:	68fb      	ldr	r3, [r7, #12]
  401bd8:	69ba      	ldr	r2, [r7, #24]
  401bda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401bde:	e016      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401be0:	68fb      	ldr	r3, [r7, #12]
  401be2:	69ba      	ldr	r2, [r7, #24]
  401be4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401be8:	68fb      	ldr	r3, [r7, #12]
  401bea:	69ba      	ldr	r2, [r7, #24]
  401bec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401bf0:	e00d      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	69ba      	ldr	r2, [r7, #24]
  401bf6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401bfa:	68fb      	ldr	r3, [r7, #12]
  401bfc:	69ba      	ldr	r2, [r7, #24]
  401bfe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401c02:	e004      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	69ba      	ldr	r2, [r7, #24]
  401c08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401c0c:	e003      	b.n	401c16 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401c0e:	68fb      	ldr	r3, [r7, #12]
  401c10:	69ba      	ldr	r2, [r7, #24]
  401c12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401c16:	bf00      	nop
  401c18:	3734      	adds	r7, #52	; 0x34
  401c1a:	46bd      	mov	sp, r7
  401c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c20:	4770      	bx	lr
  401c22:	bf00      	nop
  401c24:	00200707 	.word	0x00200707

00401c28 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401c28:	b480      	push	{r7}
  401c2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c30:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c34:	4a0c      	ldr	r2, [pc, #48]	; (401c68 <tcm_disable+0x40>)
  401c36:	4b0c      	ldr	r3, [pc, #48]	; (401c68 <tcm_disable+0x40>)
  401c38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401c3c:	f023 0301 	bic.w	r3, r3, #1
  401c40:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401c44:	4a08      	ldr	r2, [pc, #32]	; (401c68 <tcm_disable+0x40>)
  401c46:	4b08      	ldr	r3, [pc, #32]	; (401c68 <tcm_disable+0x40>)
  401c48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401c4c:	f023 0301 	bic.w	r3, r3, #1
  401c50:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c58:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401c5c:	bf00      	nop
  401c5e:	46bd      	mov	sp, r7
  401c60:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c64:	4770      	bx	lr
  401c66:	bf00      	nop
  401c68:	e000ed00 	.word	0xe000ed00

00401c6c <board_init>:
#endif

void board_init(void)
{
  401c6c:	b580      	push	{r7, lr}
  401c6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401c70:	4b13      	ldr	r3, [pc, #76]	; (401cc0 <board_init+0x54>)
  401c72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c76:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401c78:	4b12      	ldr	r3, [pc, #72]	; (401cc4 <board_init+0x58>)
  401c7a:	4798      	blx	r3
	SCB_EnableDCache();
  401c7c:	4b12      	ldr	r3, [pc, #72]	; (401cc8 <board_init+0x5c>)
  401c7e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c80:	4b12      	ldr	r3, [pc, #72]	; (401ccc <board_init+0x60>)
  401c82:	4a13      	ldr	r2, [pc, #76]	; (401cd0 <board_init+0x64>)
  401c84:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c86:	4b11      	ldr	r3, [pc, #68]	; (401ccc <board_init+0x60>)
  401c88:	4a12      	ldr	r2, [pc, #72]	; (401cd4 <board_init+0x68>)
  401c8a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401c8c:	4b12      	ldr	r3, [pc, #72]	; (401cd8 <board_init+0x6c>)
  401c8e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401c90:	4b12      	ldr	r3, [pc, #72]	; (401cdc <board_init+0x70>)
  401c92:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401c94:	2101      	movs	r1, #1
  401c96:	2048      	movs	r0, #72	; 0x48
  401c98:	4b11      	ldr	r3, [pc, #68]	; (401ce0 <board_init+0x74>)
  401c9a:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401c9c:	2101      	movs	r1, #1
  401c9e:	2048      	movs	r0, #72	; 0x48
  401ca0:	4b10      	ldr	r3, [pc, #64]	; (401ce4 <board_init+0x78>)
  401ca2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401ca4:	2100      	movs	r1, #0
  401ca6:	200b      	movs	r0, #11
  401ca8:	4b0d      	ldr	r3, [pc, #52]	; (401ce0 <board_init+0x74>)
  401caa:	4798      	blx	r3
  401cac:	2188      	movs	r1, #136	; 0x88
  401cae:	200b      	movs	r0, #11
  401cb0:	4b0d      	ldr	r3, [pc, #52]	; (401ce8 <board_init+0x7c>)
  401cb2:	4798      	blx	r3
  401cb4:	2102      	movs	r1, #2
  401cb6:	200b      	movs	r0, #11
  401cb8:	4b0c      	ldr	r3, [pc, #48]	; (401cec <board_init+0x80>)
  401cba:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  401cbc:	bf00      	nop
  401cbe:	bd80      	pop	{r7, pc}
  401cc0:	400e1850 	.word	0x400e1850
  401cc4:	00401825 	.word	0x00401825
  401cc8:	0040185d 	.word	0x0040185d
  401ccc:	400e0c00 	.word	0x400e0c00
  401cd0:	5a00080c 	.word	0x5a00080c
  401cd4:	5a00070c 	.word	0x5a00070c
  401cd8:	00401c29 	.word	0x00401c29
  401cdc:	0040191d 	.word	0x0040191d
  401ce0:	00401a65 	.word	0x00401a65
  401ce4:	00401aed 	.word	0x00401aed
  401ce8:	00401949 	.word	0x00401949
  401cec:	00401b59 	.word	0x00401b59

00401cf0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401cf0:	b480      	push	{r7}
  401cf2:	b085      	sub	sp, #20
  401cf4:	af00      	add	r7, sp, #0
  401cf6:	60f8      	str	r0, [r7, #12]
  401cf8:	60b9      	str	r1, [r7, #8]
  401cfa:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	2b00      	cmp	r3, #0
  401d00:	d003      	beq.n	401d0a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401d02:	68fb      	ldr	r3, [r7, #12]
  401d04:	68ba      	ldr	r2, [r7, #8]
  401d06:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401d08:	e002      	b.n	401d10 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401d0a:	68fb      	ldr	r3, [r7, #12]
  401d0c:	68ba      	ldr	r2, [r7, #8]
  401d0e:	661a      	str	r2, [r3, #96]	; 0x60
}
  401d10:	bf00      	nop
  401d12:	3714      	adds	r7, #20
  401d14:	46bd      	mov	sp, r7
  401d16:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d1a:	4770      	bx	lr

00401d1c <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401d1c:	b480      	push	{r7}
  401d1e:	b085      	sub	sp, #20
  401d20:	af00      	add	r7, sp, #0
  401d22:	60f8      	str	r0, [r7, #12]
  401d24:	60b9      	str	r1, [r7, #8]
  401d26:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401d28:	68fb      	ldr	r3, [r7, #12]
  401d2a:	68ba      	ldr	r2, [r7, #8]
  401d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401d30:	687b      	ldr	r3, [r7, #4]
  401d32:	005b      	lsls	r3, r3, #1
  401d34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401d38:	fbb2 f3f3 	udiv	r3, r2, r3
  401d3c:	3b01      	subs	r3, #1
  401d3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401d42:	68fb      	ldr	r3, [r7, #12]
  401d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401d48:	bf00      	nop
  401d4a:	3714      	adds	r7, #20
  401d4c:	46bd      	mov	sp, r7
  401d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d52:	4770      	bx	lr

00401d54 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401d54:	b480      	push	{r7}
  401d56:	b083      	sub	sp, #12
  401d58:	af00      	add	r7, sp, #0
  401d5a:	6078      	str	r0, [r7, #4]
  401d5c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401d5e:	687b      	ldr	r3, [r7, #4]
  401d60:	683a      	ldr	r2, [r7, #0]
  401d62:	631a      	str	r2, [r3, #48]	; 0x30
}
  401d64:	bf00      	nop
  401d66:	370c      	adds	r7, #12
  401d68:	46bd      	mov	sp, r7
  401d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d6e:	4770      	bx	lr

00401d70 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  401d70:	b480      	push	{r7}
  401d72:	b083      	sub	sp, #12
  401d74:	af00      	add	r7, sp, #0
  401d76:	6078      	str	r0, [r7, #4]
  401d78:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  401d7a:	687b      	ldr	r3, [r7, #4]
  401d7c:	683a      	ldr	r2, [r7, #0]
  401d7e:	635a      	str	r2, [r3, #52]	; 0x34
}
  401d80:	bf00      	nop
  401d82:	370c      	adds	r7, #12
  401d84:	46bd      	mov	sp, r7
  401d86:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d8a:	4770      	bx	lr

00401d8c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401d8c:	b480      	push	{r7}
  401d8e:	b087      	sub	sp, #28
  401d90:	af00      	add	r7, sp, #0
  401d92:	60f8      	str	r0, [r7, #12]
  401d94:	60b9      	str	r1, [r7, #8]
  401d96:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401d98:	68fb      	ldr	r3, [r7, #12]
  401d9a:	687a      	ldr	r2, [r7, #4]
  401d9c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401d9e:	68bb      	ldr	r3, [r7, #8]
  401da0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401da4:	d04a      	beq.n	401e3c <pio_set_peripheral+0xb0>
  401da6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401daa:	d808      	bhi.n	401dbe <pio_set_peripheral+0x32>
  401dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401db0:	d016      	beq.n	401de0 <pio_set_peripheral+0x54>
  401db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401db6:	d02c      	beq.n	401e12 <pio_set_peripheral+0x86>
  401db8:	2b00      	cmp	r3, #0
  401dba:	d069      	beq.n	401e90 <pio_set_peripheral+0x104>
  401dbc:	e064      	b.n	401e88 <pio_set_peripheral+0xfc>
  401dbe:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401dc2:	d065      	beq.n	401e90 <pio_set_peripheral+0x104>
  401dc4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401dc8:	d803      	bhi.n	401dd2 <pio_set_peripheral+0x46>
  401dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401dce:	d04a      	beq.n	401e66 <pio_set_peripheral+0xda>
  401dd0:	e05a      	b.n	401e88 <pio_set_peripheral+0xfc>
  401dd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401dd6:	d05b      	beq.n	401e90 <pio_set_peripheral+0x104>
  401dd8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401ddc:	d058      	beq.n	401e90 <pio_set_peripheral+0x104>
  401dde:	e053      	b.n	401e88 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401de0:	68fb      	ldr	r3, [r7, #12]
  401de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401de4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401de6:	68fb      	ldr	r3, [r7, #12]
  401de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401dea:	687b      	ldr	r3, [r7, #4]
  401dec:	43d9      	mvns	r1, r3
  401dee:	697b      	ldr	r3, [r7, #20]
  401df0:	400b      	ands	r3, r1
  401df2:	401a      	ands	r2, r3
  401df4:	68fb      	ldr	r3, [r7, #12]
  401df6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401df8:	68fb      	ldr	r3, [r7, #12]
  401dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401dfc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401dfe:	68fb      	ldr	r3, [r7, #12]
  401e00:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401e02:	687b      	ldr	r3, [r7, #4]
  401e04:	43d9      	mvns	r1, r3
  401e06:	697b      	ldr	r3, [r7, #20]
  401e08:	400b      	ands	r3, r1
  401e0a:	401a      	ands	r2, r3
  401e0c:	68fb      	ldr	r3, [r7, #12]
  401e0e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e10:	e03a      	b.n	401e88 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e12:	68fb      	ldr	r3, [r7, #12]
  401e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e16:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e18:	687a      	ldr	r2, [r7, #4]
  401e1a:	697b      	ldr	r3, [r7, #20]
  401e1c:	431a      	orrs	r2, r3
  401e1e:	68fb      	ldr	r3, [r7, #12]
  401e20:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e22:	68fb      	ldr	r3, [r7, #12]
  401e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e26:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401e28:	68fb      	ldr	r3, [r7, #12]
  401e2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401e2c:	687b      	ldr	r3, [r7, #4]
  401e2e:	43d9      	mvns	r1, r3
  401e30:	697b      	ldr	r3, [r7, #20]
  401e32:	400b      	ands	r3, r1
  401e34:	401a      	ands	r2, r3
  401e36:	68fb      	ldr	r3, [r7, #12]
  401e38:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e3a:	e025      	b.n	401e88 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e3c:	68fb      	ldr	r3, [r7, #12]
  401e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e40:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e42:	68fb      	ldr	r3, [r7, #12]
  401e44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401e46:	687b      	ldr	r3, [r7, #4]
  401e48:	43d9      	mvns	r1, r3
  401e4a:	697b      	ldr	r3, [r7, #20]
  401e4c:	400b      	ands	r3, r1
  401e4e:	401a      	ands	r2, r3
  401e50:	68fb      	ldr	r3, [r7, #12]
  401e52:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e54:	68fb      	ldr	r3, [r7, #12]
  401e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e58:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e5a:	687a      	ldr	r2, [r7, #4]
  401e5c:	697b      	ldr	r3, [r7, #20]
  401e5e:	431a      	orrs	r2, r3
  401e60:	68fb      	ldr	r3, [r7, #12]
  401e62:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e64:	e010      	b.n	401e88 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e66:	68fb      	ldr	r3, [r7, #12]
  401e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e6a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e6c:	687a      	ldr	r2, [r7, #4]
  401e6e:	697b      	ldr	r3, [r7, #20]
  401e70:	431a      	orrs	r2, r3
  401e72:	68fb      	ldr	r3, [r7, #12]
  401e74:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e76:	68fb      	ldr	r3, [r7, #12]
  401e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e7a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e7c:	687a      	ldr	r2, [r7, #4]
  401e7e:	697b      	ldr	r3, [r7, #20]
  401e80:	431a      	orrs	r2, r3
  401e82:	68fb      	ldr	r3, [r7, #12]
  401e84:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e86:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401e88:	68fb      	ldr	r3, [r7, #12]
  401e8a:	687a      	ldr	r2, [r7, #4]
  401e8c:	605a      	str	r2, [r3, #4]
  401e8e:	e000      	b.n	401e92 <pio_set_peripheral+0x106>
		return;
  401e90:	bf00      	nop
}
  401e92:	371c      	adds	r7, #28
  401e94:	46bd      	mov	sp, r7
  401e96:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e9a:	4770      	bx	lr

00401e9c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401e9c:	b580      	push	{r7, lr}
  401e9e:	b084      	sub	sp, #16
  401ea0:	af00      	add	r7, sp, #0
  401ea2:	60f8      	str	r0, [r7, #12]
  401ea4:	60b9      	str	r1, [r7, #8]
  401ea6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401ea8:	68b9      	ldr	r1, [r7, #8]
  401eaa:	68f8      	ldr	r0, [r7, #12]
  401eac:	4b19      	ldr	r3, [pc, #100]	; (401f14 <pio_set_input+0x78>)
  401eae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401eb0:	687b      	ldr	r3, [r7, #4]
  401eb2:	f003 0301 	and.w	r3, r3, #1
  401eb6:	461a      	mov	r2, r3
  401eb8:	68b9      	ldr	r1, [r7, #8]
  401eba:	68f8      	ldr	r0, [r7, #12]
  401ebc:	4b16      	ldr	r3, [pc, #88]	; (401f18 <pio_set_input+0x7c>)
  401ebe:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ec0:	687b      	ldr	r3, [r7, #4]
  401ec2:	f003 030a 	and.w	r3, r3, #10
  401ec6:	2b00      	cmp	r3, #0
  401ec8:	d003      	beq.n	401ed2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401eca:	68fb      	ldr	r3, [r7, #12]
  401ecc:	68ba      	ldr	r2, [r7, #8]
  401ece:	621a      	str	r2, [r3, #32]
  401ed0:	e002      	b.n	401ed8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401ed2:	68fb      	ldr	r3, [r7, #12]
  401ed4:	68ba      	ldr	r2, [r7, #8]
  401ed6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401ed8:	687b      	ldr	r3, [r7, #4]
  401eda:	f003 0302 	and.w	r3, r3, #2
  401ede:	2b00      	cmp	r3, #0
  401ee0:	d004      	beq.n	401eec <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401ee2:	68fb      	ldr	r3, [r7, #12]
  401ee4:	68ba      	ldr	r2, [r7, #8]
  401ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401eea:	e008      	b.n	401efe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401eec:	687b      	ldr	r3, [r7, #4]
  401eee:	f003 0308 	and.w	r3, r3, #8
  401ef2:	2b00      	cmp	r3, #0
  401ef4:	d003      	beq.n	401efe <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401ef6:	68fb      	ldr	r3, [r7, #12]
  401ef8:	68ba      	ldr	r2, [r7, #8]
  401efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401efe:	68fb      	ldr	r3, [r7, #12]
  401f00:	68ba      	ldr	r2, [r7, #8]
  401f02:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401f04:	68fb      	ldr	r3, [r7, #12]
  401f06:	68ba      	ldr	r2, [r7, #8]
  401f08:	601a      	str	r2, [r3, #0]
}
  401f0a:	bf00      	nop
  401f0c:	3710      	adds	r7, #16
  401f0e:	46bd      	mov	sp, r7
  401f10:	bd80      	pop	{r7, pc}
  401f12:	bf00      	nop
  401f14:	004020d5 	.word	0x004020d5
  401f18:	00401cf1 	.word	0x00401cf1

00401f1c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401f1c:	b580      	push	{r7, lr}
  401f1e:	b084      	sub	sp, #16
  401f20:	af00      	add	r7, sp, #0
  401f22:	60f8      	str	r0, [r7, #12]
  401f24:	60b9      	str	r1, [r7, #8]
  401f26:	607a      	str	r2, [r7, #4]
  401f28:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401f2a:	68b9      	ldr	r1, [r7, #8]
  401f2c:	68f8      	ldr	r0, [r7, #12]
  401f2e:	4b12      	ldr	r3, [pc, #72]	; (401f78 <pio_set_output+0x5c>)
  401f30:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401f32:	69ba      	ldr	r2, [r7, #24]
  401f34:	68b9      	ldr	r1, [r7, #8]
  401f36:	68f8      	ldr	r0, [r7, #12]
  401f38:	4b10      	ldr	r3, [pc, #64]	; (401f7c <pio_set_output+0x60>)
  401f3a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401f3c:	683b      	ldr	r3, [r7, #0]
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d003      	beq.n	401f4a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401f42:	68fb      	ldr	r3, [r7, #12]
  401f44:	68ba      	ldr	r2, [r7, #8]
  401f46:	651a      	str	r2, [r3, #80]	; 0x50
  401f48:	e002      	b.n	401f50 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401f4a:	68fb      	ldr	r3, [r7, #12]
  401f4c:	68ba      	ldr	r2, [r7, #8]
  401f4e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401f50:	687b      	ldr	r3, [r7, #4]
  401f52:	2b00      	cmp	r3, #0
  401f54:	d003      	beq.n	401f5e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401f56:	68fb      	ldr	r3, [r7, #12]
  401f58:	68ba      	ldr	r2, [r7, #8]
  401f5a:	631a      	str	r2, [r3, #48]	; 0x30
  401f5c:	e002      	b.n	401f64 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401f5e:	68fb      	ldr	r3, [r7, #12]
  401f60:	68ba      	ldr	r2, [r7, #8]
  401f62:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401f64:	68fb      	ldr	r3, [r7, #12]
  401f66:	68ba      	ldr	r2, [r7, #8]
  401f68:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401f6a:	68fb      	ldr	r3, [r7, #12]
  401f6c:	68ba      	ldr	r2, [r7, #8]
  401f6e:	601a      	str	r2, [r3, #0]
}
  401f70:	bf00      	nop
  401f72:	3710      	adds	r7, #16
  401f74:	46bd      	mov	sp, r7
  401f76:	bd80      	pop	{r7, pc}
  401f78:	004020d5 	.word	0x004020d5
  401f7c:	00401cf1 	.word	0x00401cf1

00401f80 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  401f80:	b590      	push	{r4, r7, lr}
  401f82:	b087      	sub	sp, #28
  401f84:	af02      	add	r7, sp, #8
  401f86:	60f8      	str	r0, [r7, #12]
  401f88:	60b9      	str	r1, [r7, #8]
  401f8a:	607a      	str	r2, [r7, #4]
  401f8c:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  401f8e:	68bb      	ldr	r3, [r7, #8]
  401f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f94:	d016      	beq.n	401fc4 <pio_configure+0x44>
  401f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f9a:	d809      	bhi.n	401fb0 <pio_configure+0x30>
  401f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401fa0:	d010      	beq.n	401fc4 <pio_configure+0x44>
  401fa2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401fa6:	d00d      	beq.n	401fc4 <pio_configure+0x44>
  401fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401fac:	d00a      	beq.n	401fc4 <pio_configure+0x44>
  401fae:	e03d      	b.n	40202c <pio_configure+0xac>
  401fb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401fb4:	d01a      	beq.n	401fec <pio_configure+0x6c>
  401fb6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401fba:	d017      	beq.n	401fec <pio_configure+0x6c>
  401fbc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401fc0:	d00e      	beq.n	401fe0 <pio_configure+0x60>
  401fc2:	e033      	b.n	40202c <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401fc4:	687a      	ldr	r2, [r7, #4]
  401fc6:	68b9      	ldr	r1, [r7, #8]
  401fc8:	68f8      	ldr	r0, [r7, #12]
  401fca:	4b1c      	ldr	r3, [pc, #112]	; (40203c <pio_configure+0xbc>)
  401fcc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  401fce:	683b      	ldr	r3, [r7, #0]
  401fd0:	f003 0301 	and.w	r3, r3, #1
  401fd4:	461a      	mov	r2, r3
  401fd6:	6879      	ldr	r1, [r7, #4]
  401fd8:	68f8      	ldr	r0, [r7, #12]
  401fda:	4b19      	ldr	r3, [pc, #100]	; (402040 <pio_configure+0xc0>)
  401fdc:	4798      	blx	r3
		break;
  401fde:	e027      	b.n	402030 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401fe0:	683a      	ldr	r2, [r7, #0]
  401fe2:	6879      	ldr	r1, [r7, #4]
  401fe4:	68f8      	ldr	r0, [r7, #12]
  401fe6:	4b17      	ldr	r3, [pc, #92]	; (402044 <pio_configure+0xc4>)
  401fe8:	4798      	blx	r3
		break;
  401fea:	e021      	b.n	402030 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401fec:	68bb      	ldr	r3, [r7, #8]
  401fee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401ff2:	bf0c      	ite	eq
  401ff4:	2301      	moveq	r3, #1
  401ff6:	2300      	movne	r3, #0
  401ff8:	b2db      	uxtb	r3, r3
  401ffa:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401ffc:	683b      	ldr	r3, [r7, #0]
  401ffe:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402002:	2b00      	cmp	r3, #0
  402004:	bf14      	ite	ne
  402006:	2301      	movne	r3, #1
  402008:	2300      	moveq	r3, #0
  40200a:	b2db      	uxtb	r3, r3
  40200c:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40200e:	683b      	ldr	r3, [r7, #0]
  402010:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402014:	2b00      	cmp	r3, #0
  402016:	bf14      	ite	ne
  402018:	2301      	movne	r3, #1
  40201a:	2300      	moveq	r3, #0
  40201c:	b2db      	uxtb	r3, r3
  40201e:	9300      	str	r3, [sp, #0]
  402020:	460b      	mov	r3, r1
  402022:	6879      	ldr	r1, [r7, #4]
  402024:	68f8      	ldr	r0, [r7, #12]
  402026:	4c08      	ldr	r4, [pc, #32]	; (402048 <pio_configure+0xc8>)
  402028:	47a0      	blx	r4
		break;
  40202a:	e001      	b.n	402030 <pio_configure+0xb0>

	default:
		return 0;
  40202c:	2300      	movs	r3, #0
  40202e:	e000      	b.n	402032 <pio_configure+0xb2>
	}

	return 1;
  402030:	2301      	movs	r3, #1
}
  402032:	4618      	mov	r0, r3
  402034:	3714      	adds	r7, #20
  402036:	46bd      	mov	sp, r7
  402038:	bd90      	pop	{r4, r7, pc}
  40203a:	bf00      	nop
  40203c:	00401d8d 	.word	0x00401d8d
  402040:	00401cf1 	.word	0x00401cf1
  402044:	00401e9d 	.word	0x00401e9d
  402048:	00401f1d 	.word	0x00401f1d

0040204c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40204c:	b480      	push	{r7}
  40204e:	b085      	sub	sp, #20
  402050:	af00      	add	r7, sp, #0
  402052:	60f8      	str	r0, [r7, #12]
  402054:	60b9      	str	r1, [r7, #8]
  402056:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402058:	687b      	ldr	r3, [r7, #4]
  40205a:	f003 0310 	and.w	r3, r3, #16
  40205e:	2b00      	cmp	r3, #0
  402060:	d020      	beq.n	4020a4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402062:	68fb      	ldr	r3, [r7, #12]
  402064:	68ba      	ldr	r2, [r7, #8]
  402066:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40206a:	687b      	ldr	r3, [r7, #4]
  40206c:	f003 0320 	and.w	r3, r3, #32
  402070:	2b00      	cmp	r3, #0
  402072:	d004      	beq.n	40207e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402074:	68fb      	ldr	r3, [r7, #12]
  402076:	68ba      	ldr	r2, [r7, #8]
  402078:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40207c:	e003      	b.n	402086 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40207e:	68fb      	ldr	r3, [r7, #12]
  402080:	68ba      	ldr	r2, [r7, #8]
  402082:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402086:	687b      	ldr	r3, [r7, #4]
  402088:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40208c:	2b00      	cmp	r3, #0
  40208e:	d004      	beq.n	40209a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402090:	68fb      	ldr	r3, [r7, #12]
  402092:	68ba      	ldr	r2, [r7, #8]
  402094:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402098:	e008      	b.n	4020ac <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  40209a:	68fb      	ldr	r3, [r7, #12]
  40209c:	68ba      	ldr	r2, [r7, #8]
  40209e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4020a2:	e003      	b.n	4020ac <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4020a4:	68fb      	ldr	r3, [r7, #12]
  4020a6:	68ba      	ldr	r2, [r7, #8]
  4020a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4020ac:	bf00      	nop
  4020ae:	3714      	adds	r7, #20
  4020b0:	46bd      	mov	sp, r7
  4020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020b6:	4770      	bx	lr

004020b8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4020b8:	b480      	push	{r7}
  4020ba:	b083      	sub	sp, #12
  4020bc:	af00      	add	r7, sp, #0
  4020be:	6078      	str	r0, [r7, #4]
  4020c0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4020c2:	687b      	ldr	r3, [r7, #4]
  4020c4:	683a      	ldr	r2, [r7, #0]
  4020c6:	641a      	str	r2, [r3, #64]	; 0x40
}
  4020c8:	bf00      	nop
  4020ca:	370c      	adds	r7, #12
  4020cc:	46bd      	mov	sp, r7
  4020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020d2:	4770      	bx	lr

004020d4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4020d4:	b480      	push	{r7}
  4020d6:	b083      	sub	sp, #12
  4020d8:	af00      	add	r7, sp, #0
  4020da:	6078      	str	r0, [r7, #4]
  4020dc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4020de:	687b      	ldr	r3, [r7, #4]
  4020e0:	683a      	ldr	r2, [r7, #0]
  4020e2:	645a      	str	r2, [r3, #68]	; 0x44
}
  4020e4:	bf00      	nop
  4020e6:	370c      	adds	r7, #12
  4020e8:	46bd      	mov	sp, r7
  4020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020ee:	4770      	bx	lr

004020f0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4020f0:	b480      	push	{r7}
  4020f2:	b083      	sub	sp, #12
  4020f4:	af00      	add	r7, sp, #0
  4020f6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4020f8:	687b      	ldr	r3, [r7, #4]
  4020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4020fc:	4618      	mov	r0, r3
  4020fe:	370c      	adds	r7, #12
  402100:	46bd      	mov	sp, r7
  402102:	f85d 7b04 	ldr.w	r7, [sp], #4
  402106:	4770      	bx	lr

00402108 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  402108:	b480      	push	{r7}
  40210a:	b083      	sub	sp, #12
  40210c:	af00      	add	r7, sp, #0
  40210e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  402110:	687b      	ldr	r3, [r7, #4]
  402112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  402114:	4618      	mov	r0, r3
  402116:	370c      	adds	r7, #12
  402118:	46bd      	mov	sp, r7
  40211a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40211e:	4770      	bx	lr

00402120 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402120:	b580      	push	{r7, lr}
  402122:	b084      	sub	sp, #16
  402124:	af00      	add	r7, sp, #0
  402126:	6078      	str	r0, [r7, #4]
  402128:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40212a:	6878      	ldr	r0, [r7, #4]
  40212c:	4b26      	ldr	r3, [pc, #152]	; (4021c8 <pio_handler_process+0xa8>)
  40212e:	4798      	blx	r3
  402130:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  402132:	6878      	ldr	r0, [r7, #4]
  402134:	4b25      	ldr	r3, [pc, #148]	; (4021cc <pio_handler_process+0xac>)
  402136:	4798      	blx	r3
  402138:	4602      	mov	r2, r0
  40213a:	68fb      	ldr	r3, [r7, #12]
  40213c:	4013      	ands	r3, r2
  40213e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  402140:	68fb      	ldr	r3, [r7, #12]
  402142:	2b00      	cmp	r3, #0
  402144:	d03c      	beq.n	4021c0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  402146:	2300      	movs	r3, #0
  402148:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40214a:	e034      	b.n	4021b6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40214c:	4a20      	ldr	r2, [pc, #128]	; (4021d0 <pio_handler_process+0xb0>)
  40214e:	68bb      	ldr	r3, [r7, #8]
  402150:	011b      	lsls	r3, r3, #4
  402152:	4413      	add	r3, r2
  402154:	681a      	ldr	r2, [r3, #0]
  402156:	683b      	ldr	r3, [r7, #0]
  402158:	429a      	cmp	r2, r3
  40215a:	d126      	bne.n	4021aa <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40215c:	4a1c      	ldr	r2, [pc, #112]	; (4021d0 <pio_handler_process+0xb0>)
  40215e:	68bb      	ldr	r3, [r7, #8]
  402160:	011b      	lsls	r3, r3, #4
  402162:	4413      	add	r3, r2
  402164:	3304      	adds	r3, #4
  402166:	681a      	ldr	r2, [r3, #0]
  402168:	68fb      	ldr	r3, [r7, #12]
  40216a:	4013      	ands	r3, r2
  40216c:	2b00      	cmp	r3, #0
  40216e:	d01c      	beq.n	4021aa <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402170:	4a17      	ldr	r2, [pc, #92]	; (4021d0 <pio_handler_process+0xb0>)
  402172:	68bb      	ldr	r3, [r7, #8]
  402174:	011b      	lsls	r3, r3, #4
  402176:	4413      	add	r3, r2
  402178:	330c      	adds	r3, #12
  40217a:	681b      	ldr	r3, [r3, #0]
  40217c:	4914      	ldr	r1, [pc, #80]	; (4021d0 <pio_handler_process+0xb0>)
  40217e:	68ba      	ldr	r2, [r7, #8]
  402180:	0112      	lsls	r2, r2, #4
  402182:	440a      	add	r2, r1
  402184:	6810      	ldr	r0, [r2, #0]
  402186:	4912      	ldr	r1, [pc, #72]	; (4021d0 <pio_handler_process+0xb0>)
  402188:	68ba      	ldr	r2, [r7, #8]
  40218a:	0112      	lsls	r2, r2, #4
  40218c:	440a      	add	r2, r1
  40218e:	3204      	adds	r2, #4
  402190:	6812      	ldr	r2, [r2, #0]
  402192:	4611      	mov	r1, r2
  402194:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402196:	4a0e      	ldr	r2, [pc, #56]	; (4021d0 <pio_handler_process+0xb0>)
  402198:	68bb      	ldr	r3, [r7, #8]
  40219a:	011b      	lsls	r3, r3, #4
  40219c:	4413      	add	r3, r2
  40219e:	3304      	adds	r3, #4
  4021a0:	681b      	ldr	r3, [r3, #0]
  4021a2:	43db      	mvns	r3, r3
  4021a4:	68fa      	ldr	r2, [r7, #12]
  4021a6:	4013      	ands	r3, r2
  4021a8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4021aa:	68bb      	ldr	r3, [r7, #8]
  4021ac:	3301      	adds	r3, #1
  4021ae:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4021b0:	68bb      	ldr	r3, [r7, #8]
  4021b2:	2b06      	cmp	r3, #6
  4021b4:	d803      	bhi.n	4021be <pio_handler_process+0x9e>
		while (status != 0) {
  4021b6:	68fb      	ldr	r3, [r7, #12]
  4021b8:	2b00      	cmp	r3, #0
  4021ba:	d1c7      	bne.n	40214c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4021bc:	e000      	b.n	4021c0 <pio_handler_process+0xa0>
				break;
  4021be:	bf00      	nop
}
  4021c0:	bf00      	nop
  4021c2:	3710      	adds	r7, #16
  4021c4:	46bd      	mov	sp, r7
  4021c6:	bd80      	pop	{r7, pc}
  4021c8:	004020f1 	.word	0x004020f1
  4021cc:	00402109 	.word	0x00402109
  4021d0:	20400c04 	.word	0x20400c04

004021d4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4021d4:	b580      	push	{r7, lr}
  4021d6:	b086      	sub	sp, #24
  4021d8:	af00      	add	r7, sp, #0
  4021da:	60f8      	str	r0, [r7, #12]
  4021dc:	60b9      	str	r1, [r7, #8]
  4021de:	607a      	str	r2, [r7, #4]
  4021e0:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4021e2:	4b21      	ldr	r3, [pc, #132]	; (402268 <pio_handler_set+0x94>)
  4021e4:	681b      	ldr	r3, [r3, #0]
  4021e6:	2b06      	cmp	r3, #6
  4021e8:	d901      	bls.n	4021ee <pio_handler_set+0x1a>
		return 1;
  4021ea:	2301      	movs	r3, #1
  4021ec:	e038      	b.n	402260 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4021ee:	2300      	movs	r3, #0
  4021f0:	75fb      	strb	r3, [r7, #23]
  4021f2:	e011      	b.n	402218 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4021f4:	7dfb      	ldrb	r3, [r7, #23]
  4021f6:	011b      	lsls	r3, r3, #4
  4021f8:	4a1c      	ldr	r2, [pc, #112]	; (40226c <pio_handler_set+0x98>)
  4021fa:	4413      	add	r3, r2
  4021fc:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4021fe:	693b      	ldr	r3, [r7, #16]
  402200:	681a      	ldr	r2, [r3, #0]
  402202:	68bb      	ldr	r3, [r7, #8]
  402204:	429a      	cmp	r2, r3
  402206:	d104      	bne.n	402212 <pio_handler_set+0x3e>
  402208:	693b      	ldr	r3, [r7, #16]
  40220a:	685a      	ldr	r2, [r3, #4]
  40220c:	687b      	ldr	r3, [r7, #4]
  40220e:	429a      	cmp	r2, r3
  402210:	d008      	beq.n	402224 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402212:	7dfb      	ldrb	r3, [r7, #23]
  402214:	3301      	adds	r3, #1
  402216:	75fb      	strb	r3, [r7, #23]
  402218:	7dfa      	ldrb	r2, [r7, #23]
  40221a:	4b13      	ldr	r3, [pc, #76]	; (402268 <pio_handler_set+0x94>)
  40221c:	681b      	ldr	r3, [r3, #0]
  40221e:	429a      	cmp	r2, r3
  402220:	d9e8      	bls.n	4021f4 <pio_handler_set+0x20>
  402222:	e000      	b.n	402226 <pio_handler_set+0x52>
			break;
  402224:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  402226:	693b      	ldr	r3, [r7, #16]
  402228:	68ba      	ldr	r2, [r7, #8]
  40222a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40222c:	693b      	ldr	r3, [r7, #16]
  40222e:	687a      	ldr	r2, [r7, #4]
  402230:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  402232:	693b      	ldr	r3, [r7, #16]
  402234:	683a      	ldr	r2, [r7, #0]
  402236:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  402238:	693b      	ldr	r3, [r7, #16]
  40223a:	6a3a      	ldr	r2, [r7, #32]
  40223c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40223e:	7dfa      	ldrb	r2, [r7, #23]
  402240:	4b09      	ldr	r3, [pc, #36]	; (402268 <pio_handler_set+0x94>)
  402242:	681b      	ldr	r3, [r3, #0]
  402244:	3301      	adds	r3, #1
  402246:	429a      	cmp	r2, r3
  402248:	d104      	bne.n	402254 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40224a:	4b07      	ldr	r3, [pc, #28]	; (402268 <pio_handler_set+0x94>)
  40224c:	681b      	ldr	r3, [r3, #0]
  40224e:	3301      	adds	r3, #1
  402250:	4a05      	ldr	r2, [pc, #20]	; (402268 <pio_handler_set+0x94>)
  402252:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402254:	683a      	ldr	r2, [r7, #0]
  402256:	6879      	ldr	r1, [r7, #4]
  402258:	68f8      	ldr	r0, [r7, #12]
  40225a:	4b05      	ldr	r3, [pc, #20]	; (402270 <pio_handler_set+0x9c>)
  40225c:	4798      	blx	r3

	return 0;
  40225e:	2300      	movs	r3, #0
}
  402260:	4618      	mov	r0, r3
  402262:	3718      	adds	r7, #24
  402264:	46bd      	mov	sp, r7
  402266:	bd80      	pop	{r7, pc}
  402268:	20400c74 	.word	0x20400c74
  40226c:	20400c04 	.word	0x20400c04
  402270:	0040204d 	.word	0x0040204d

00402274 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402274:	b580      	push	{r7, lr}
  402276:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  402278:	210a      	movs	r1, #10
  40227a:	4802      	ldr	r0, [pc, #8]	; (402284 <PIOA_Handler+0x10>)
  40227c:	4b02      	ldr	r3, [pc, #8]	; (402288 <PIOA_Handler+0x14>)
  40227e:	4798      	blx	r3
}
  402280:	bf00      	nop
  402282:	bd80      	pop	{r7, pc}
  402284:	400e0e00 	.word	0x400e0e00
  402288:	00402121 	.word	0x00402121

0040228c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40228c:	b580      	push	{r7, lr}
  40228e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  402290:	210b      	movs	r1, #11
  402292:	4802      	ldr	r0, [pc, #8]	; (40229c <PIOB_Handler+0x10>)
  402294:	4b02      	ldr	r3, [pc, #8]	; (4022a0 <PIOB_Handler+0x14>)
  402296:	4798      	blx	r3
}
  402298:	bf00      	nop
  40229a:	bd80      	pop	{r7, pc}
  40229c:	400e1000 	.word	0x400e1000
  4022a0:	00402121 	.word	0x00402121

004022a4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4022a4:	b580      	push	{r7, lr}
  4022a6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4022a8:	210c      	movs	r1, #12
  4022aa:	4802      	ldr	r0, [pc, #8]	; (4022b4 <PIOC_Handler+0x10>)
  4022ac:	4b02      	ldr	r3, [pc, #8]	; (4022b8 <PIOC_Handler+0x14>)
  4022ae:	4798      	blx	r3
}
  4022b0:	bf00      	nop
  4022b2:	bd80      	pop	{r7, pc}
  4022b4:	400e1200 	.word	0x400e1200
  4022b8:	00402121 	.word	0x00402121

004022bc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4022bc:	b580      	push	{r7, lr}
  4022be:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4022c0:	2110      	movs	r1, #16
  4022c2:	4802      	ldr	r0, [pc, #8]	; (4022cc <PIOD_Handler+0x10>)
  4022c4:	4b02      	ldr	r3, [pc, #8]	; (4022d0 <PIOD_Handler+0x14>)
  4022c6:	4798      	blx	r3
}
  4022c8:	bf00      	nop
  4022ca:	bd80      	pop	{r7, pc}
  4022cc:	400e1400 	.word	0x400e1400
  4022d0:	00402121 	.word	0x00402121

004022d4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4022d4:	b580      	push	{r7, lr}
  4022d6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4022d8:	2111      	movs	r1, #17
  4022da:	4802      	ldr	r0, [pc, #8]	; (4022e4 <PIOE_Handler+0x10>)
  4022dc:	4b02      	ldr	r3, [pc, #8]	; (4022e8 <PIOE_Handler+0x14>)
  4022de:	4798      	blx	r3
}
  4022e0:	bf00      	nop
  4022e2:	bd80      	pop	{r7, pc}
  4022e4:	400e1600 	.word	0x400e1600
  4022e8:	00402121 	.word	0x00402121

004022ec <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4022ec:	b480      	push	{r7}
  4022ee:	b083      	sub	sp, #12
  4022f0:	af00      	add	r7, sp, #0
  4022f2:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4022f4:	687b      	ldr	r3, [r7, #4]
  4022f6:	3b01      	subs	r3, #1
  4022f8:	2b03      	cmp	r3, #3
  4022fa:	d81a      	bhi.n	402332 <pmc_mck_set_division+0x46>
  4022fc:	a201      	add	r2, pc, #4	; (adr r2, 402304 <pmc_mck_set_division+0x18>)
  4022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402302:	bf00      	nop
  402304:	00402315 	.word	0x00402315
  402308:	0040231b 	.word	0x0040231b
  40230c:	00402323 	.word	0x00402323
  402310:	0040232b 	.word	0x0040232b
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402314:	2300      	movs	r3, #0
  402316:	607b      	str	r3, [r7, #4]
			break;
  402318:	e00e      	b.n	402338 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  40231a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40231e:	607b      	str	r3, [r7, #4]
			break;
  402320:	e00a      	b.n	402338 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402322:	f44f 7340 	mov.w	r3, #768	; 0x300
  402326:	607b      	str	r3, [r7, #4]
			break;
  402328:	e006      	b.n	402338 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40232a:	f44f 7300 	mov.w	r3, #512	; 0x200
  40232e:	607b      	str	r3, [r7, #4]
			break;
  402330:	e002      	b.n	402338 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402332:	2300      	movs	r3, #0
  402334:	607b      	str	r3, [r7, #4]
			break;
  402336:	bf00      	nop
	}
	PMC->PMC_MCKR =
  402338:	490a      	ldr	r1, [pc, #40]	; (402364 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40233a:	4b0a      	ldr	r3, [pc, #40]	; (402364 <pmc_mck_set_division+0x78>)
  40233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40233e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  402342:	687b      	ldr	r3, [r7, #4]
  402344:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  402346:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402348:	bf00      	nop
  40234a:	4b06      	ldr	r3, [pc, #24]	; (402364 <pmc_mck_set_division+0x78>)
  40234c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40234e:	f003 0308 	and.w	r3, r3, #8
  402352:	2b00      	cmp	r3, #0
  402354:	d0f9      	beq.n	40234a <pmc_mck_set_division+0x5e>
}
  402356:	bf00      	nop
  402358:	370c      	adds	r7, #12
  40235a:	46bd      	mov	sp, r7
  40235c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402360:	4770      	bx	lr
  402362:	bf00      	nop
  402364:	400e0600 	.word	0x400e0600

00402368 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402368:	b480      	push	{r7}
  40236a:	b085      	sub	sp, #20
  40236c:	af00      	add	r7, sp, #0
  40236e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402370:	491d      	ldr	r1, [pc, #116]	; (4023e8 <pmc_switch_mck_to_pllack+0x80>)
  402372:	4b1d      	ldr	r3, [pc, #116]	; (4023e8 <pmc_switch_mck_to_pllack+0x80>)
  402374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40237a:	687b      	ldr	r3, [r7, #4]
  40237c:	4313      	orrs	r3, r2
  40237e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402384:	60fb      	str	r3, [r7, #12]
  402386:	e007      	b.n	402398 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402388:	68fb      	ldr	r3, [r7, #12]
  40238a:	2b00      	cmp	r3, #0
  40238c:	d101      	bne.n	402392 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40238e:	2301      	movs	r3, #1
  402390:	e023      	b.n	4023da <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402392:	68fb      	ldr	r3, [r7, #12]
  402394:	3b01      	subs	r3, #1
  402396:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402398:	4b13      	ldr	r3, [pc, #76]	; (4023e8 <pmc_switch_mck_to_pllack+0x80>)
  40239a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40239c:	f003 0308 	and.w	r3, r3, #8
  4023a0:	2b00      	cmp	r3, #0
  4023a2:	d0f1      	beq.n	402388 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4023a4:	4a10      	ldr	r2, [pc, #64]	; (4023e8 <pmc_switch_mck_to_pllack+0x80>)
  4023a6:	4b10      	ldr	r3, [pc, #64]	; (4023e8 <pmc_switch_mck_to_pllack+0x80>)
  4023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023aa:	f023 0303 	bic.w	r3, r3, #3
  4023ae:	f043 0302 	orr.w	r3, r3, #2
  4023b2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4023b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4023b8:	60fb      	str	r3, [r7, #12]
  4023ba:	e007      	b.n	4023cc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4023bc:	68fb      	ldr	r3, [r7, #12]
  4023be:	2b00      	cmp	r3, #0
  4023c0:	d101      	bne.n	4023c6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4023c2:	2301      	movs	r3, #1
  4023c4:	e009      	b.n	4023da <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4023c6:	68fb      	ldr	r3, [r7, #12]
  4023c8:	3b01      	subs	r3, #1
  4023ca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4023cc:	4b06      	ldr	r3, [pc, #24]	; (4023e8 <pmc_switch_mck_to_pllack+0x80>)
  4023ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023d0:	f003 0308 	and.w	r3, r3, #8
  4023d4:	2b00      	cmp	r3, #0
  4023d6:	d0f1      	beq.n	4023bc <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4023d8:	2300      	movs	r3, #0
}
  4023da:	4618      	mov	r0, r3
  4023dc:	3714      	adds	r7, #20
  4023de:	46bd      	mov	sp, r7
  4023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023e4:	4770      	bx	lr
  4023e6:	bf00      	nop
  4023e8:	400e0600 	.word	0x400e0600

004023ec <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4023ec:	b480      	push	{r7}
  4023ee:	b083      	sub	sp, #12
  4023f0:	af00      	add	r7, sp, #0
  4023f2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4023f4:	687b      	ldr	r3, [r7, #4]
  4023f6:	2b01      	cmp	r3, #1
  4023f8:	d105      	bne.n	402406 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4023fa:	4907      	ldr	r1, [pc, #28]	; (402418 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4023fc:	4b06      	ldr	r3, [pc, #24]	; (402418 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4023fe:	689a      	ldr	r2, [r3, #8]
  402400:	4b06      	ldr	r3, [pc, #24]	; (40241c <pmc_switch_sclk_to_32kxtal+0x30>)
  402402:	4313      	orrs	r3, r2
  402404:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  402406:	4b04      	ldr	r3, [pc, #16]	; (402418 <pmc_switch_sclk_to_32kxtal+0x2c>)
  402408:	4a05      	ldr	r2, [pc, #20]	; (402420 <pmc_switch_sclk_to_32kxtal+0x34>)
  40240a:	601a      	str	r2, [r3, #0]
}
  40240c:	bf00      	nop
  40240e:	370c      	adds	r7, #12
  402410:	46bd      	mov	sp, r7
  402412:	f85d 7b04 	ldr.w	r7, [sp], #4
  402416:	4770      	bx	lr
  402418:	400e1810 	.word	0x400e1810
  40241c:	a5100000 	.word	0xa5100000
  402420:	a5000008 	.word	0xa5000008

00402424 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402424:	b480      	push	{r7}
  402426:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  402428:	4b09      	ldr	r3, [pc, #36]	; (402450 <pmc_osc_is_ready_32kxtal+0x2c>)
  40242a:	695b      	ldr	r3, [r3, #20]
  40242c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402430:	2b00      	cmp	r3, #0
  402432:	d007      	beq.n	402444 <pmc_osc_is_ready_32kxtal+0x20>
  402434:	4b07      	ldr	r3, [pc, #28]	; (402454 <pmc_osc_is_ready_32kxtal+0x30>)
  402436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402438:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40243c:	2b00      	cmp	r3, #0
  40243e:	d001      	beq.n	402444 <pmc_osc_is_ready_32kxtal+0x20>
  402440:	2301      	movs	r3, #1
  402442:	e000      	b.n	402446 <pmc_osc_is_ready_32kxtal+0x22>
  402444:	2300      	movs	r3, #0
}
  402446:	4618      	mov	r0, r3
  402448:	46bd      	mov	sp, r7
  40244a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40244e:	4770      	bx	lr
  402450:	400e1810 	.word	0x400e1810
  402454:	400e0600 	.word	0x400e0600

00402458 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  402458:	b480      	push	{r7}
  40245a:	b083      	sub	sp, #12
  40245c:	af00      	add	r7, sp, #0
  40245e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402460:	4915      	ldr	r1, [pc, #84]	; (4024b8 <pmc_switch_mainck_to_fastrc+0x60>)
  402462:	4b15      	ldr	r3, [pc, #84]	; (4024b8 <pmc_switch_mainck_to_fastrc+0x60>)
  402464:	6a1a      	ldr	r2, [r3, #32]
  402466:	4b15      	ldr	r3, [pc, #84]	; (4024bc <pmc_switch_mainck_to_fastrc+0x64>)
  402468:	4313      	orrs	r3, r2
  40246a:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40246c:	bf00      	nop
  40246e:	4b12      	ldr	r3, [pc, #72]	; (4024b8 <pmc_switch_mainck_to_fastrc+0x60>)
  402470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402476:	2b00      	cmp	r3, #0
  402478:	d0f9      	beq.n	40246e <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40247a:	490f      	ldr	r1, [pc, #60]	; (4024b8 <pmc_switch_mainck_to_fastrc+0x60>)
  40247c:	4b0e      	ldr	r3, [pc, #56]	; (4024b8 <pmc_switch_mainck_to_fastrc+0x60>)
  40247e:	6a1a      	ldr	r2, [r3, #32]
  402480:	4b0f      	ldr	r3, [pc, #60]	; (4024c0 <pmc_switch_mainck_to_fastrc+0x68>)
  402482:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402484:	687a      	ldr	r2, [r7, #4]
  402486:	4313      	orrs	r3, r2
  402488:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40248c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40248e:	bf00      	nop
  402490:	4b09      	ldr	r3, [pc, #36]	; (4024b8 <pmc_switch_mainck_to_fastrc+0x60>)
  402492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402498:	2b00      	cmp	r3, #0
  40249a:	d0f9      	beq.n	402490 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40249c:	4906      	ldr	r1, [pc, #24]	; (4024b8 <pmc_switch_mainck_to_fastrc+0x60>)
  40249e:	4b06      	ldr	r3, [pc, #24]	; (4024b8 <pmc_switch_mainck_to_fastrc+0x60>)
  4024a0:	6a1a      	ldr	r2, [r3, #32]
  4024a2:	4b08      	ldr	r3, [pc, #32]	; (4024c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4024a4:	4013      	ands	r3, r2
  4024a6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4024aa:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4024ac:	bf00      	nop
  4024ae:	370c      	adds	r7, #12
  4024b0:	46bd      	mov	sp, r7
  4024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024b6:	4770      	bx	lr
  4024b8:	400e0600 	.word	0x400e0600
  4024bc:	00370008 	.word	0x00370008
  4024c0:	ffc8ff8f 	.word	0xffc8ff8f
  4024c4:	fec8ffff 	.word	0xfec8ffff

004024c8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4024c8:	b480      	push	{r7}
  4024ca:	b083      	sub	sp, #12
  4024cc:	af00      	add	r7, sp, #0
  4024ce:	6078      	str	r0, [r7, #4]
  4024d0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4024d2:	687b      	ldr	r3, [r7, #4]
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d008      	beq.n	4024ea <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4024d8:	4913      	ldr	r1, [pc, #76]	; (402528 <pmc_switch_mainck_to_xtal+0x60>)
  4024da:	4b13      	ldr	r3, [pc, #76]	; (402528 <pmc_switch_mainck_to_xtal+0x60>)
  4024dc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4024de:	4a13      	ldr	r2, [pc, #76]	; (40252c <pmc_switch_mainck_to_xtal+0x64>)
  4024e0:	401a      	ands	r2, r3
  4024e2:	4b13      	ldr	r3, [pc, #76]	; (402530 <pmc_switch_mainck_to_xtal+0x68>)
  4024e4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4024e6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4024e8:	e018      	b.n	40251c <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4024ea:	490f      	ldr	r1, [pc, #60]	; (402528 <pmc_switch_mainck_to_xtal+0x60>)
  4024ec:	4b0e      	ldr	r3, [pc, #56]	; (402528 <pmc_switch_mainck_to_xtal+0x60>)
  4024ee:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4024f0:	4b10      	ldr	r3, [pc, #64]	; (402534 <pmc_switch_mainck_to_xtal+0x6c>)
  4024f2:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4024f4:	683a      	ldr	r2, [r7, #0]
  4024f6:	0212      	lsls	r2, r2, #8
  4024f8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4024fa:	431a      	orrs	r2, r3
  4024fc:	4b0e      	ldr	r3, [pc, #56]	; (402538 <pmc_switch_mainck_to_xtal+0x70>)
  4024fe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402500:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402502:	bf00      	nop
  402504:	4b08      	ldr	r3, [pc, #32]	; (402528 <pmc_switch_mainck_to_xtal+0x60>)
  402506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402508:	f003 0301 	and.w	r3, r3, #1
  40250c:	2b00      	cmp	r3, #0
  40250e:	d0f9      	beq.n	402504 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402510:	4905      	ldr	r1, [pc, #20]	; (402528 <pmc_switch_mainck_to_xtal+0x60>)
  402512:	4b05      	ldr	r3, [pc, #20]	; (402528 <pmc_switch_mainck_to_xtal+0x60>)
  402514:	6a1a      	ldr	r2, [r3, #32]
  402516:	4b09      	ldr	r3, [pc, #36]	; (40253c <pmc_switch_mainck_to_xtal+0x74>)
  402518:	4313      	orrs	r3, r2
  40251a:	620b      	str	r3, [r1, #32]
}
  40251c:	bf00      	nop
  40251e:	370c      	adds	r7, #12
  402520:	46bd      	mov	sp, r7
  402522:	f85d 7b04 	ldr.w	r7, [sp], #4
  402526:	4770      	bx	lr
  402528:	400e0600 	.word	0x400e0600
  40252c:	fec8fffc 	.word	0xfec8fffc
  402530:	01370002 	.word	0x01370002
  402534:	ffc8fffc 	.word	0xffc8fffc
  402538:	00370001 	.word	0x00370001
  40253c:	01370000 	.word	0x01370000

00402540 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402540:	b480      	push	{r7}
  402542:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402544:	4b04      	ldr	r3, [pc, #16]	; (402558 <pmc_osc_is_ready_mainck+0x18>)
  402546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40254c:	4618      	mov	r0, r3
  40254e:	46bd      	mov	sp, r7
  402550:	f85d 7b04 	ldr.w	r7, [sp], #4
  402554:	4770      	bx	lr
  402556:	bf00      	nop
  402558:	400e0600 	.word	0x400e0600

0040255c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40255c:	b480      	push	{r7}
  40255e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402560:	4b04      	ldr	r3, [pc, #16]	; (402574 <pmc_disable_pllack+0x18>)
  402562:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402566:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402568:	bf00      	nop
  40256a:	46bd      	mov	sp, r7
  40256c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402570:	4770      	bx	lr
  402572:	bf00      	nop
  402574:	400e0600 	.word	0x400e0600

00402578 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402578:	b480      	push	{r7}
  40257a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40257c:	4b04      	ldr	r3, [pc, #16]	; (402590 <pmc_is_locked_pllack+0x18>)
  40257e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402580:	f003 0302 	and.w	r3, r3, #2
}
  402584:	4618      	mov	r0, r3
  402586:	46bd      	mov	sp, r7
  402588:	f85d 7b04 	ldr.w	r7, [sp], #4
  40258c:	4770      	bx	lr
  40258e:	bf00      	nop
  402590:	400e0600 	.word	0x400e0600

00402594 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  402594:	b480      	push	{r7}
  402596:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  402598:	4b04      	ldr	r3, [pc, #16]	; (4025ac <pmc_is_locked_upll+0x18>)
  40259a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4025a0:	4618      	mov	r0, r3
  4025a2:	46bd      	mov	sp, r7
  4025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025a8:	4770      	bx	lr
  4025aa:	bf00      	nop
  4025ac:	400e0600 	.word	0x400e0600

004025b0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4025b0:	b480      	push	{r7}
  4025b2:	b083      	sub	sp, #12
  4025b4:	af00      	add	r7, sp, #0
  4025b6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4025b8:	687b      	ldr	r3, [r7, #4]
  4025ba:	2b3f      	cmp	r3, #63	; 0x3f
  4025bc:	d901      	bls.n	4025c2 <pmc_enable_periph_clk+0x12>
		return 1;
  4025be:	2301      	movs	r3, #1
  4025c0:	e02f      	b.n	402622 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4025c2:	687b      	ldr	r3, [r7, #4]
  4025c4:	2b1f      	cmp	r3, #31
  4025c6:	d813      	bhi.n	4025f0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4025c8:	4b19      	ldr	r3, [pc, #100]	; (402630 <pmc_enable_periph_clk+0x80>)
  4025ca:	699a      	ldr	r2, [r3, #24]
  4025cc:	2101      	movs	r1, #1
  4025ce:	687b      	ldr	r3, [r7, #4]
  4025d0:	fa01 f303 	lsl.w	r3, r1, r3
  4025d4:	401a      	ands	r2, r3
  4025d6:	2101      	movs	r1, #1
  4025d8:	687b      	ldr	r3, [r7, #4]
  4025da:	fa01 f303 	lsl.w	r3, r1, r3
  4025de:	429a      	cmp	r2, r3
  4025e0:	d01e      	beq.n	402620 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4025e2:	4a13      	ldr	r2, [pc, #76]	; (402630 <pmc_enable_periph_clk+0x80>)
  4025e4:	2101      	movs	r1, #1
  4025e6:	687b      	ldr	r3, [r7, #4]
  4025e8:	fa01 f303 	lsl.w	r3, r1, r3
  4025ec:	6113      	str	r3, [r2, #16]
  4025ee:	e017      	b.n	402620 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4025f0:	687b      	ldr	r3, [r7, #4]
  4025f2:	3b20      	subs	r3, #32
  4025f4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4025f6:	4b0e      	ldr	r3, [pc, #56]	; (402630 <pmc_enable_periph_clk+0x80>)
  4025f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4025fc:	2101      	movs	r1, #1
  4025fe:	687b      	ldr	r3, [r7, #4]
  402600:	fa01 f303 	lsl.w	r3, r1, r3
  402604:	401a      	ands	r2, r3
  402606:	2101      	movs	r1, #1
  402608:	687b      	ldr	r3, [r7, #4]
  40260a:	fa01 f303 	lsl.w	r3, r1, r3
  40260e:	429a      	cmp	r2, r3
  402610:	d006      	beq.n	402620 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  402612:	4a07      	ldr	r2, [pc, #28]	; (402630 <pmc_enable_periph_clk+0x80>)
  402614:	2101      	movs	r1, #1
  402616:	687b      	ldr	r3, [r7, #4]
  402618:	fa01 f303 	lsl.w	r3, r1, r3
  40261c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402620:	2300      	movs	r3, #0
}
  402622:	4618      	mov	r0, r3
  402624:	370c      	adds	r7, #12
  402626:	46bd      	mov	sp, r7
  402628:	f85d 7b04 	ldr.w	r7, [sp], #4
  40262c:	4770      	bx	lr
  40262e:	bf00      	nop
  402630:	400e0600 	.word	0x400e0600

00402634 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  402634:	b480      	push	{r7}
  402636:	b083      	sub	sp, #12
  402638:	af00      	add	r7, sp, #0
  40263a:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  40263c:	4a04      	ldr	r2, [pc, #16]	; (402650 <pmc_set_flash_in_wait_mode+0x1c>)
  40263e:	687b      	ldr	r3, [r7, #4]
  402640:	6013      	str	r3, [r2, #0]
}
  402642:	bf00      	nop
  402644:	370c      	adds	r7, #12
  402646:	46bd      	mov	sp, r7
  402648:	f85d 7b04 	ldr.w	r7, [sp], #4
  40264c:	4770      	bx	lr
  40264e:	bf00      	nop
  402650:	2040001c 	.word	0x2040001c

00402654 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  402654:	b480      	push	{r7}
  402656:	b083      	sub	sp, #12
  402658:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40265a:	4b20      	ldr	r3, [pc, #128]	; (4026dc <pmc_enable_waitmode+0x88>)
  40265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40265e:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  402660:	687b      	ldr	r3, [r7, #4]
  402662:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  402666:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  402668:	687b      	ldr	r3, [r7, #4]
  40266a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40266e:	607b      	str	r3, [r7, #4]
#endif
	PMC->PMC_FSMR = i;
  402670:	4a1a      	ldr	r2, [pc, #104]	; (4026dc <pmc_enable_waitmode+0x88>)
  402672:	687b      	ldr	r3, [r7, #4]
  402674:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  402676:	4919      	ldr	r1, [pc, #100]	; (4026dc <pmc_enable_waitmode+0x88>)
  402678:	4b18      	ldr	r3, [pc, #96]	; (4026dc <pmc_enable_waitmode+0x88>)
  40267a:	6a1a      	ldr	r2, [r3, #32]
  40267c:	4b18      	ldr	r3, [pc, #96]	; (4026e0 <pmc_enable_waitmode+0x8c>)
  40267e:	4313      	orrs	r3, r2
  402680:	620b      	str	r3, [r1, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402682:	bf00      	nop
  402684:	4b15      	ldr	r3, [pc, #84]	; (4026dc <pmc_enable_waitmode+0x88>)
  402686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402688:	f003 0308 	and.w	r3, r3, #8
  40268c:	2b00      	cmp	r3, #0
  40268e:	d0f9      	beq.n	402684 <pmc_enable_waitmode+0x30>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  402690:	2300      	movs	r3, #0
  402692:	607b      	str	r3, [r7, #4]
  402694:	e003      	b.n	40269e <pmc_enable_waitmode+0x4a>
  __ASM volatile ("nop");
  402696:	bf00      	nop
  402698:	687b      	ldr	r3, [r7, #4]
  40269a:	3301      	adds	r3, #1
  40269c:	607b      	str	r3, [r7, #4]
  40269e:	687b      	ldr	r3, [r7, #4]
  4026a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4026a4:	d3f7      	bcc.n	402696 <pmc_enable_waitmode+0x42>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4026a6:	bf00      	nop
  4026a8:	4b0c      	ldr	r3, [pc, #48]	; (4026dc <pmc_enable_waitmode+0x88>)
  4026aa:	6a1b      	ldr	r3, [r3, #32]
  4026ac:	f003 0308 	and.w	r3, r3, #8
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	d0f9      	beq.n	4026a8 <pmc_enable_waitmode+0x54>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4026b4:	4b09      	ldr	r3, [pc, #36]	; (4026dc <pmc_enable_waitmode+0x88>)
  4026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4026b8:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  4026ba:	687b      	ldr	r3, [r7, #4]
  4026bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  4026c0:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4026c2:	687b      	ldr	r3, [r7, #4]
  4026c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4026c8:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  4026ca:	4a04      	ldr	r2, [pc, #16]	; (4026dc <pmc_enable_waitmode+0x88>)
  4026cc:	687b      	ldr	r3, [r7, #4]
  4026ce:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  4026d0:	bf00      	nop
  4026d2:	370c      	adds	r7, #12
  4026d4:	46bd      	mov	sp, r7
  4026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026da:	4770      	bx	lr
  4026dc:	400e0600 	.word	0x400e0600
  4026e0:	00370004 	.word	0x00370004

004026e4 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4026e4:	b590      	push	{r4, r7, lr}
  4026e6:	b099      	sub	sp, #100	; 0x64
  4026e8:	af00      	add	r7, sp, #0
  4026ea:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  4026ec:	687b      	ldr	r3, [r7, #4]
  4026ee:	3b01      	subs	r3, #1
  4026f0:	2b04      	cmp	r3, #4
  4026f2:	f200 81a5 	bhi.w	402a40 <pmc_sleep+0x35c>
  4026f6:	a201      	add	r2, pc, #4	; (adr r2, 4026fc <pmc_sleep+0x18>)
  4026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4026fc:	00402711 	.word	0x00402711
  402700:	00402711 	.word	0x00402711
  402704:	00402731 	.word	0x00402731
  402708:	00402731 	.word	0x00402731
  40270c:	00402a1f 	.word	0x00402a1f
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  402710:	4a72      	ldr	r2, [pc, #456]	; (4028dc <pmc_sleep+0x1f8>)
  402712:	4b72      	ldr	r3, [pc, #456]	; (4028dc <pmc_sleep+0x1f8>)
  402714:	691b      	ldr	r3, [r3, #16]
  402716:	f023 0304 	bic.w	r3, r3, #4
  40271a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  40271c:	4b70      	ldr	r3, [pc, #448]	; (4028e0 <pmc_sleep+0x1fc>)
  40271e:	2201      	movs	r2, #1
  402720:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402722:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402726:	b662      	cpsie	i
  __ASM volatile ("dsb");
  402728:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  40272c:	bf30      	wfi
		__DSB();
		__WFI();
		break;
  40272e:	e187      	b.n	402a40 <pmc_sleep+0x35c>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  402730:	687b      	ldr	r3, [r7, #4]
  402732:	2b03      	cmp	r3, #3
  402734:	d103      	bne.n	40273e <pmc_sleep+0x5a>
  402736:	2000      	movs	r0, #0
  402738:	4b6a      	ldr	r3, [pc, #424]	; (4028e4 <pmc_sleep+0x200>)
  40273a:	4798      	blx	r3
  40273c:	e003      	b.n	402746 <pmc_sleep+0x62>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40273e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  402742:	4b68      	ldr	r3, [pc, #416]	; (4028e4 <pmc_sleep+0x200>)
  402744:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402746:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402748:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40274c:	4b64      	ldr	r3, [pc, #400]	; (4028e0 <pmc_sleep+0x1fc>)
  40274e:	2200      	movs	r2, #0
  402750:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  402752:	4b65      	ldr	r3, [pc, #404]	; (4028e8 <pmc_sleep+0x204>)
  402754:	2201      	movs	r2, #1
  402756:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  402758:	687b      	ldr	r3, [r7, #4]
  40275a:	2b04      	cmp	r3, #4
  40275c:	bf0c      	ite	eq
  40275e:	2301      	moveq	r3, #1
  402760:	2300      	movne	r3, #0
  402762:	b2da      	uxtb	r2, r3
  402764:	f107 031c 	add.w	r3, r7, #28
  402768:	643b      	str	r3, [r7, #64]	; 0x40
  40276a:	f107 0318 	add.w	r3, r7, #24
  40276e:	63fb      	str	r3, [r7, #60]	; 0x3c
  402770:	f107 0314 	add.w	r3, r7, #20
  402774:	63bb      	str	r3, [r7, #56]	; 0x38
  402776:	f107 0310 	add.w	r3, r7, #16
  40277a:	637b      	str	r3, [r7, #52]	; 0x34
  40277c:	f107 030c 	add.w	r3, r7, #12
  402780:	633b      	str	r3, [r7, #48]	; 0x30
  402782:	4613      	mov	r3, r2
  402784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t mor  = PMC->CKGR_MOR;
  402788:	4b58      	ldr	r3, [pc, #352]	; (4028ec <pmc_sleep+0x208>)
  40278a:	6a1b      	ldr	r3, [r3, #32]
  40278c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  40278e:	4b57      	ldr	r3, [pc, #348]	; (4028ec <pmc_sleep+0x208>)
  402790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402792:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  402794:	4b56      	ldr	r3, [pc, #344]	; (4028f0 <pmc_sleep+0x20c>)
  402796:	681b      	ldr	r3, [r3, #0]
  402798:	623b      	str	r3, [r7, #32]
	if (p_osc_setting) {
  40279a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40279c:	2b00      	cmp	r3, #0
  40279e:	d002      	beq.n	4027a6 <pmc_sleep+0xc2>
		*p_osc_setting = mor;
  4027a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4027a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4027a4:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
  4027a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4027a8:	2b00      	cmp	r3, #0
  4027aa:	d003      	beq.n	4027b4 <pmc_sleep+0xd0>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4027ac:	4b4f      	ldr	r3, [pc, #316]	; (4028ec <pmc_sleep+0x208>)
  4027ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4027b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4027b2:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
  4027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4027b6:	2b00      	cmp	r3, #0
  4027b8:	d002      	beq.n	4027c0 <pmc_sleep+0xdc>
		*p_pll1_setting = 0;
  4027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4027bc:	2200      	movs	r2, #0
  4027be:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
  4027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4027c2:	2b00      	cmp	r3, #0
  4027c4:	d002      	beq.n	4027cc <pmc_sleep+0xe8>
		*p_mck_setting  = mckr;
  4027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4027ca:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
  4027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4027ce:	2b00      	cmp	r3, #0
  4027d0:	d002      	beq.n	4027d8 <pmc_sleep+0xf4>
		*p_fmr_setting  = fmr;
  4027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4027d4:	6a3a      	ldr	r2, [r7, #32]
  4027d6:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4027d8:	4944      	ldr	r1, [pc, #272]	; (4028ec <pmc_sleep+0x208>)
  4027da:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4027dc:	4b45      	ldr	r3, [pc, #276]	; (4028f4 <pmc_sleep+0x210>)
  4027de:	4313      	orrs	r3, r2
  4027e0:	620b      	str	r3, [r1, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  4027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4027e4:	f003 0303 	and.w	r3, r3, #3
  4027e8:	2b01      	cmp	r3, #1
  4027ea:	d90e      	bls.n	40280a <pmc_sleep+0x126>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4027ee:	f023 0303 	bic.w	r3, r3, #3
  4027f2:	f043 0301 	orr.w	r3, r3, #1
  4027f6:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  4027f8:	4a3c      	ldr	r2, [pc, #240]	; (4028ec <pmc_sleep+0x208>)
  4027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4027fc:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4027fe:	4b3b      	ldr	r3, [pc, #236]	; (4028ec <pmc_sleep+0x208>)
  402800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402802:	f003 0308 	and.w	r3, r3, #8
  402806:	2b00      	cmp	r3, #0
  402808:	d0f9      	beq.n	4027fe <pmc_sleep+0x11a>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40280c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402810:	2b00      	cmp	r3, #0
  402812:	d00c      	beq.n	40282e <pmc_sleep+0x14a>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  402814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40281a:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  40281c:	4a33      	ldr	r2, [pc, #204]	; (4028ec <pmc_sleep+0x208>)
  40281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402820:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402822:	4b32      	ldr	r3, [pc, #200]	; (4028ec <pmc_sleep+0x208>)
  402824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402826:	f003 0308 	and.w	r3, r3, #8
  40282a:	2b00      	cmp	r3, #0
  40282c:	d0f9      	beq.n	402822 <pmc_sleep+0x13e>
	pmc_disable_pllack();
  40282e:	4b32      	ldr	r3, [pc, #200]	; (4028f8 <pmc_sleep+0x214>)
  402830:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402832:	4b2e      	ldr	r3, [pc, #184]	; (4028ec <pmc_sleep+0x208>)
  402834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40283a:	2b00      	cmp	r3, #0
  40283c:	d0f9      	beq.n	402832 <pmc_sleep+0x14e>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40283e:	492b      	ldr	r1, [pc, #172]	; (4028ec <pmc_sleep+0x208>)
  402840:	4b2a      	ldr	r3, [pc, #168]	; (4028ec <pmc_sleep+0x208>)
  402842:	6a1a      	ldr	r2, [r3, #32]
  402844:	4b2d      	ldr	r3, [pc, #180]	; (4028fc <pmc_sleep+0x218>)
  402846:	4013      	ands	r3, r2
  402848:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40284c:	620b      	str	r3, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40284e:	4b27      	ldr	r3, [pc, #156]	; (4028ec <pmc_sleep+0x208>)
  402850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402856:	2b00      	cmp	r3, #0
  402858:	d0f9      	beq.n	40284e <pmc_sleep+0x16a>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40285a:	4a25      	ldr	r2, [pc, #148]	; (4028f0 <pmc_sleep+0x20c>)
  40285c:	6a3b      	ldr	r3, [r7, #32]
  40285e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  402862:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  402864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402868:	2b00      	cmp	r3, #0
  40286a:	d007      	beq.n	40287c <pmc_sleep+0x198>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40286c:	491f      	ldr	r1, [pc, #124]	; (4028ec <pmc_sleep+0x208>)
  40286e:	4b1f      	ldr	r3, [pc, #124]	; (4028ec <pmc_sleep+0x208>)
  402870:	6a1a      	ldr	r2, [r3, #32]
  402872:	4b23      	ldr	r3, [pc, #140]	; (402900 <pmc_sleep+0x21c>)
  402874:	4013      	ands	r3, r2
  402876:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40287a:	620b      	str	r3, [r1, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  40287c:	4b18      	ldr	r3, [pc, #96]	; (4028e0 <pmc_sleep+0x1fc>)
  40287e:	2201      	movs	r2, #1
  402880:	701a      	strb	r2, [r3, #0]
  402882:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402886:	b662      	cpsie	i

		pmc_enable_waitmode();
  402888:	4b1e      	ldr	r3, [pc, #120]	; (402904 <pmc_sleep+0x220>)
  40288a:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  40288c:	b672      	cpsid	i
  40288e:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  402892:	4b13      	ldr	r3, [pc, #76]	; (4028e0 <pmc_sleep+0x1fc>)
  402894:	2200      	movs	r2, #0
  402896:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  402898:	69fc      	ldr	r4, [r7, #28]
  40289a:	69b8      	ldr	r0, [r7, #24]
  40289c:	6979      	ldr	r1, [r7, #20]
  40289e:	693a      	ldr	r2, [r7, #16]
  4028a0:	68fb      	ldr	r3, [r7, #12]
  4028a2:	65fc      	str	r4, [r7, #92]	; 0x5c
  4028a4:	65b8      	str	r0, [r7, #88]	; 0x58
  4028a6:	6579      	str	r1, [r7, #84]	; 0x54
  4028a8:	653a      	str	r2, [r7, #80]	; 0x50
  4028aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t pll_sr = 0;
  4028ac:	2300      	movs	r3, #0
  4028ae:	64bb      	str	r3, [r7, #72]	; 0x48
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4028b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  4028b2:	f003 0302 	and.w	r3, r3, #2
  4028b6:	2b00      	cmp	r3, #0
  4028b8:	d02c      	beq.n	402914 <pmc_sleep+0x230>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4028ba:	490c      	ldr	r1, [pc, #48]	; (4028ec <pmc_sleep+0x208>)
  4028bc:	4b0b      	ldr	r3, [pc, #44]	; (4028ec <pmc_sleep+0x208>)
  4028be:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4028c0:	4a11      	ldr	r2, [pc, #68]	; (402908 <pmc_sleep+0x224>)
  4028c2:	401a      	ands	r2, r3
  4028c4:	4b11      	ldr	r3, [pc, #68]	; (40290c <pmc_sleep+0x228>)
  4028c6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4028c8:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4028ca:	4908      	ldr	r1, [pc, #32]	; (4028ec <pmc_sleep+0x208>)
  4028cc:	4b07      	ldr	r3, [pc, #28]	; (4028ec <pmc_sleep+0x208>)
  4028ce:	6a1a      	ldr	r2, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
  4028d0:	4b0f      	ldr	r3, [pc, #60]	; (402910 <pmc_sleep+0x22c>)
  4028d2:	4013      	ands	r3, r2
  4028d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4028d8:	620b      	str	r3, [r1, #32]
  4028da:	e04e      	b.n	40297a <pmc_sleep+0x296>
  4028dc:	e000ed00 	.word	0xe000ed00
  4028e0:	20400018 	.word	0x20400018
  4028e4:	00402635 	.word	0x00402635
  4028e8:	20400c78 	.word	0x20400c78
  4028ec:	400e0600 	.word	0x400e0600
  4028f0:	400e0c00 	.word	0x400e0c00
  4028f4:	00370008 	.word	0x00370008
  4028f8:	0040255d 	.word	0x0040255d
  4028fc:	fec8ffff 	.word	0xfec8ffff
  402900:	ffc8fffe 	.word	0xffc8fffe
  402904:	00402655 	.word	0x00402655
  402908:	fec8fffc 	.word	0xfec8fffc
  40290c:	01370002 	.word	0x01370002
  402910:	ffc8ff87 	.word	0xffc8ff87
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  402914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  402916:	f003 0301 	and.w	r3, r3, #1
  40291a:	2b00      	cmp	r3, #0
  40291c:	d02d      	beq.n	40297a <pmc_sleep+0x296>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40291e:	4b4a      	ldr	r3, [pc, #296]	; (402a48 <pmc_sleep+0x364>)
  402920:	6a1b      	ldr	r3, [r3, #32]
  402922:	f003 0301 	and.w	r3, r3, #1
  402926:	2b00      	cmp	r3, #0
  402928:	d10d      	bne.n	402946 <pmc_sleep+0x262>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40292a:	4947      	ldr	r1, [pc, #284]	; (402a48 <pmc_sleep+0x364>)
  40292c:	4b46      	ldr	r3, [pc, #280]	; (402a48 <pmc_sleep+0x364>)
  40292e:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  402930:	4a46      	ldr	r2, [pc, #280]	; (402a4c <pmc_sleep+0x368>)
  402932:	401a      	ands	r2, r3
  402934:	4b46      	ldr	r3, [pc, #280]	; (402a50 <pmc_sleep+0x36c>)
  402936:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402938:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40293a:	4b43      	ldr	r3, [pc, #268]	; (402a48 <pmc_sleep+0x364>)
  40293c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40293e:	f003 0301 	and.w	r3, r3, #1
  402942:	2b00      	cmp	r3, #0
  402944:	d0f9      	beq.n	40293a <pmc_sleep+0x256>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  402946:	4b40      	ldr	r3, [pc, #256]	; (402a48 <pmc_sleep+0x364>)
  402948:	6a1b      	ldr	r3, [r3, #32]
  40294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40294e:	2b00      	cmp	r3, #0
  402950:	d10b      	bne.n	40296a <pmc_sleep+0x286>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402952:	493d      	ldr	r1, [pc, #244]	; (402a48 <pmc_sleep+0x364>)
  402954:	4b3c      	ldr	r3, [pc, #240]	; (402a48 <pmc_sleep+0x364>)
  402956:	6a1a      	ldr	r2, [r3, #32]
  402958:	4b3e      	ldr	r3, [pc, #248]	; (402a54 <pmc_sleep+0x370>)
  40295a:	4313      	orrs	r3, r2
  40295c:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40295e:	4b3a      	ldr	r3, [pc, #232]	; (402a48 <pmc_sleep+0x364>)
  402960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402966:	2b00      	cmp	r3, #0
  402968:	d0f9      	beq.n	40295e <pmc_sleep+0x27a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40296a:	4937      	ldr	r1, [pc, #220]	; (402a48 <pmc_sleep+0x364>)
  40296c:	4b36      	ldr	r3, [pc, #216]	; (402a48 <pmc_sleep+0x364>)
  40296e:	6a1a      	ldr	r2, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
  402970:	4b39      	ldr	r3, [pc, #228]	; (402a58 <pmc_sleep+0x374>)
  402972:	4013      	ands	r3, r2
  402974:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402978:	620b      	str	r3, [r1, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40297a:	6dba      	ldr	r2, [r7, #88]	; 0x58
  40297c:	4b37      	ldr	r3, [pc, #220]	; (402a5c <pmc_sleep+0x378>)
  40297e:	4013      	ands	r3, r2
  402980:	2b00      	cmp	r3, #0
  402982:	d008      	beq.n	402996 <pmc_sleep+0x2b2>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  402984:	4a30      	ldr	r2, [pc, #192]	; (402a48 <pmc_sleep+0x364>)
  402986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  402988:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40298c:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  402990:	f043 0302 	orr.w	r3, r3, #2
  402994:	64bb      	str	r3, [r7, #72]	; 0x48
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  402996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402998:	f003 0303 	and.w	r3, r3, #3
  40299c:	2b02      	cmp	r3, #2
  40299e:	d105      	bne.n	4029ac <pmc_sleep+0x2c8>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4029a0:	4b29      	ldr	r3, [pc, #164]	; (402a48 <pmc_sleep+0x364>)
  4029a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4029a4:	f003 0302 	and.w	r3, r3, #2
  4029a8:	2b00      	cmp	r3, #0
  4029aa:	d0f9      	beq.n	4029a0 <pmc_sleep+0x2bc>
	mckr = PMC->PMC_MCKR;
  4029ac:	4b26      	ldr	r3, [pc, #152]	; (402a48 <pmc_sleep+0x364>)
  4029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029b0:	647b      	str	r3, [r7, #68]	; 0x44
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4029b2:	4925      	ldr	r1, [pc, #148]	; (402a48 <pmc_sleep+0x364>)
  4029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4029b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4029ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4029bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029c0:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4029c2:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4029c4:	4b20      	ldr	r3, [pc, #128]	; (402a48 <pmc_sleep+0x364>)
  4029c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4029c8:	f003 0308 	and.w	r3, r3, #8
  4029cc:	2b00      	cmp	r3, #0
  4029ce:	d0f9      	beq.n	4029c4 <pmc_sleep+0x2e0>
	EFC0->EEFC_FMR = fmr_setting;
  4029d0:	4a23      	ldr	r2, [pc, #140]	; (402a60 <pmc_sleep+0x37c>)
  4029d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4029d4:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
  4029d6:	4a1c      	ldr	r2, [pc, #112]	; (402a48 <pmc_sleep+0x364>)
  4029d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4029da:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4029dc:	4b1a      	ldr	r3, [pc, #104]	; (402a48 <pmc_sleep+0x364>)
  4029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4029e0:	f003 0308 	and.w	r3, r3, #8
  4029e4:	2b00      	cmp	r3, #0
  4029e6:	d0f9      	beq.n	4029dc <pmc_sleep+0x2f8>
	while (!(PMC->PMC_SR & pll_sr));
  4029e8:	4b17      	ldr	r3, [pc, #92]	; (402a48 <pmc_sleep+0x364>)
  4029ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4029ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4029ee:	4013      	ands	r3, r2
  4029f0:	2b00      	cmp	r3, #0
  4029f2:	d0f9      	beq.n	4029e8 <pmc_sleep+0x304>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4029f4:	4b1b      	ldr	r3, [pc, #108]	; (402a64 <pmc_sleep+0x380>)
  4029f6:	2200      	movs	r2, #0
  4029f8:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4029fa:	4b1b      	ldr	r3, [pc, #108]	; (402a68 <pmc_sleep+0x384>)
  4029fc:	681b      	ldr	r3, [r3, #0]
  4029fe:	2b00      	cmp	r3, #0
  402a00:	d005      	beq.n	402a0e <pmc_sleep+0x32a>
			callback_clocks_restored();
  402a02:	4b19      	ldr	r3, [pc, #100]	; (402a68 <pmc_sleep+0x384>)
  402a04:	681b      	ldr	r3, [r3, #0]
  402a06:	4798      	blx	r3
			callback_clocks_restored = NULL;
  402a08:	4b17      	ldr	r3, [pc, #92]	; (402a68 <pmc_sleep+0x384>)
  402a0a:	2200      	movs	r2, #0
  402a0c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  402a0e:	4b17      	ldr	r3, [pc, #92]	; (402a6c <pmc_sleep+0x388>)
  402a10:	2201      	movs	r2, #1
  402a12:	701a      	strb	r2, [r3, #0]
  402a14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402a18:	b662      	cpsie	i

		break;
  402a1a:	bf00      	nop
  402a1c:	e010      	b.n	402a40 <pmc_sleep+0x35c>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  402a1e:	4a14      	ldr	r2, [pc, #80]	; (402a70 <pmc_sleep+0x38c>)
  402a20:	4b13      	ldr	r3, [pc, #76]	; (402a70 <pmc_sleep+0x38c>)
  402a22:	691b      	ldr	r3, [r3, #16]
  402a24:	f043 0304 	orr.w	r3, r3, #4
  402a28:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  402a2a:	4b12      	ldr	r3, [pc, #72]	; (402a74 <pmc_sleep+0x390>)
  402a2c:	4a12      	ldr	r2, [pc, #72]	; (402a78 <pmc_sleep+0x394>)
  402a2e:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  402a30:	4b0e      	ldr	r3, [pc, #56]	; (402a6c <pmc_sleep+0x388>)
  402a32:	2201      	movs	r2, #1
  402a34:	701a      	strb	r2, [r3, #0]
  402a36:	f3bf 8f5f 	dmb	sy
  402a3a:	b662      	cpsie	i
  __ASM volatile ("wfi");
  402a3c:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  402a3e:	bf00      	nop
#endif
	}
}
  402a40:	bf00      	nop
  402a42:	3764      	adds	r7, #100	; 0x64
  402a44:	46bd      	mov	sp, r7
  402a46:	bd90      	pop	{r4, r7, pc}
  402a48:	400e0600 	.word	0x400e0600
  402a4c:	ffc8fffc 	.word	0xffc8fffc
  402a50:	00370001 	.word	0x00370001
  402a54:	01370000 	.word	0x01370000
  402a58:	ffc8ff87 	.word	0xffc8ff87
  402a5c:	07ff0000 	.word	0x07ff0000
  402a60:	400e0c00 	.word	0x400e0c00
  402a64:	20400c78 	.word	0x20400c78
  402a68:	20400c7c 	.word	0x20400c7c
  402a6c:	20400018 	.word	0x20400018
  402a70:	e000ed00 	.word	0xe000ed00
  402a74:	400e1810 	.word	0x400e1810
  402a78:	a5000004 	.word	0xa5000004

00402a7c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  402a7c:	b480      	push	{r7}
  402a7e:	b083      	sub	sp, #12
  402a80:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a82:	f3ef 8310 	mrs	r3, PRIMASK
  402a86:	607b      	str	r3, [r7, #4]
  return(result);
  402a88:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402a8a:	2b00      	cmp	r3, #0
  402a8c:	bf0c      	ite	eq
  402a8e:	2301      	moveq	r3, #1
  402a90:	2300      	movne	r3, #0
  402a92:	b2db      	uxtb	r3, r3
  402a94:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402a96:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402a98:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402a9c:	4b04      	ldr	r3, [pc, #16]	; (402ab0 <cpu_irq_save+0x34>)
  402a9e:	2200      	movs	r2, #0
  402aa0:	701a      	strb	r2, [r3, #0]
	return flags;
  402aa2:	683b      	ldr	r3, [r7, #0]
}
  402aa4:	4618      	mov	r0, r3
  402aa6:	370c      	adds	r7, #12
  402aa8:	46bd      	mov	sp, r7
  402aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402aae:	4770      	bx	lr
  402ab0:	20400018 	.word	0x20400018

00402ab4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402ab4:	b480      	push	{r7}
  402ab6:	b083      	sub	sp, #12
  402ab8:	af00      	add	r7, sp, #0
  402aba:	6078      	str	r0, [r7, #4]
	return (flags);
  402abc:	687b      	ldr	r3, [r7, #4]
  402abe:	2b00      	cmp	r3, #0
  402ac0:	bf14      	ite	ne
  402ac2:	2301      	movne	r3, #1
  402ac4:	2300      	moveq	r3, #0
  402ac6:	b2db      	uxtb	r3, r3
}
  402ac8:	4618      	mov	r0, r3
  402aca:	370c      	adds	r7, #12
  402acc:	46bd      	mov	sp, r7
  402ace:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ad2:	4770      	bx	lr

00402ad4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  402ad4:	b580      	push	{r7, lr}
  402ad6:	b082      	sub	sp, #8
  402ad8:	af00      	add	r7, sp, #0
  402ada:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  402adc:	6878      	ldr	r0, [r7, #4]
  402ade:	4b07      	ldr	r3, [pc, #28]	; (402afc <cpu_irq_restore+0x28>)
  402ae0:	4798      	blx	r3
  402ae2:	4603      	mov	r3, r0
  402ae4:	2b00      	cmp	r3, #0
  402ae6:	d005      	beq.n	402af4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  402ae8:	4b05      	ldr	r3, [pc, #20]	; (402b00 <cpu_irq_restore+0x2c>)
  402aea:	2201      	movs	r2, #1
  402aec:	701a      	strb	r2, [r3, #0]
  402aee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402af2:	b662      	cpsie	i
}
  402af4:	bf00      	nop
  402af6:	3708      	adds	r7, #8
  402af8:	46bd      	mov	sp, r7
  402afa:	bd80      	pop	{r7, pc}
  402afc:	00402ab5 	.word	0x00402ab5
  402b00:	20400018 	.word	0x20400018

00402b04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402b04:	b580      	push	{r7, lr}
  402b06:	b084      	sub	sp, #16
  402b08:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  402b0a:	4b1e      	ldr	r3, [pc, #120]	; (402b84 <Reset_Handler+0x80>)
  402b0c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  402b0e:	4b1e      	ldr	r3, [pc, #120]	; (402b88 <Reset_Handler+0x84>)
  402b10:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402b12:	68fa      	ldr	r2, [r7, #12]
  402b14:	68bb      	ldr	r3, [r7, #8]
  402b16:	429a      	cmp	r2, r3
  402b18:	d00c      	beq.n	402b34 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  402b1a:	e007      	b.n	402b2c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  402b1c:	68bb      	ldr	r3, [r7, #8]
  402b1e:	1d1a      	adds	r2, r3, #4
  402b20:	60ba      	str	r2, [r7, #8]
  402b22:	68fa      	ldr	r2, [r7, #12]
  402b24:	1d11      	adds	r1, r2, #4
  402b26:	60f9      	str	r1, [r7, #12]
  402b28:	6812      	ldr	r2, [r2, #0]
  402b2a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  402b2c:	68bb      	ldr	r3, [r7, #8]
  402b2e:	4a17      	ldr	r2, [pc, #92]	; (402b8c <Reset_Handler+0x88>)
  402b30:	4293      	cmp	r3, r2
  402b32:	d3f3      	bcc.n	402b1c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402b34:	4b16      	ldr	r3, [pc, #88]	; (402b90 <Reset_Handler+0x8c>)
  402b36:	60bb      	str	r3, [r7, #8]
  402b38:	e004      	b.n	402b44 <Reset_Handler+0x40>
                *pDest++ = 0;
  402b3a:	68bb      	ldr	r3, [r7, #8]
  402b3c:	1d1a      	adds	r2, r3, #4
  402b3e:	60ba      	str	r2, [r7, #8]
  402b40:	2200      	movs	r2, #0
  402b42:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  402b44:	68bb      	ldr	r3, [r7, #8]
  402b46:	4a13      	ldr	r2, [pc, #76]	; (402b94 <Reset_Handler+0x90>)
  402b48:	4293      	cmp	r3, r2
  402b4a:	d3f6      	bcc.n	402b3a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  402b4c:	4b12      	ldr	r3, [pc, #72]	; (402b98 <Reset_Handler+0x94>)
  402b4e:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402b50:	4a12      	ldr	r2, [pc, #72]	; (402b9c <Reset_Handler+0x98>)
  402b52:	68fb      	ldr	r3, [r7, #12]
  402b54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402b58:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  402b5a:	4b11      	ldr	r3, [pc, #68]	; (402ba0 <Reset_Handler+0x9c>)
  402b5c:	4798      	blx	r3
  402b5e:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  402b60:	4a10      	ldr	r2, [pc, #64]	; (402ba4 <Reset_Handler+0xa0>)
  402b62:	4b10      	ldr	r3, [pc, #64]	; (402ba4 <Reset_Handler+0xa0>)
  402b64:	681b      	ldr	r3, [r3, #0]
  402b66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402b6a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402b6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402b70:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  402b74:	6878      	ldr	r0, [r7, #4]
  402b76:	4b0c      	ldr	r3, [pc, #48]	; (402ba8 <Reset_Handler+0xa4>)
  402b78:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  402b7a:	4b0c      	ldr	r3, [pc, #48]	; (402bac <Reset_Handler+0xa8>)
  402b7c:	4798      	blx	r3

        /* Branch to main function */
        main();
  402b7e:	4b0c      	ldr	r3, [pc, #48]	; (402bb0 <Reset_Handler+0xac>)
  402b80:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402b82:	e7fe      	b.n	402b82 <Reset_Handler+0x7e>
  402b84:	00408af4 	.word	0x00408af4
  402b88:	20400000 	.word	0x20400000
  402b8c:	204009e0 	.word	0x204009e0
  402b90:	204009e0 	.word	0x204009e0
  402b94:	20400ce8 	.word	0x20400ce8
  402b98:	00400000 	.word	0x00400000
  402b9c:	e000ed00 	.word	0xe000ed00
  402ba0:	00402a7d 	.word	0x00402a7d
  402ba4:	e000ed88 	.word	0xe000ed88
  402ba8:	00402ad5 	.word	0x00402ad5
  402bac:	00403f51 	.word	0x00403f51
  402bb0:	004033a5 	.word	0x004033a5

00402bb4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402bb4:	b480      	push	{r7}
  402bb6:	af00      	add	r7, sp, #0
        while (1) {
  402bb8:	e7fe      	b.n	402bb8 <Dummy_Handler+0x4>
	...

00402bbc <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  402bbc:	b480      	push	{r7}
  402bbe:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402bc0:	4b52      	ldr	r3, [pc, #328]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402bc4:	f003 0303 	and.w	r3, r3, #3
  402bc8:	2b01      	cmp	r3, #1
  402bca:	d014      	beq.n	402bf6 <SystemCoreClockUpdate+0x3a>
  402bcc:	2b01      	cmp	r3, #1
  402bce:	d302      	bcc.n	402bd6 <SystemCoreClockUpdate+0x1a>
  402bd0:	2b02      	cmp	r3, #2
  402bd2:	d038      	beq.n	402c46 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402bd4:	e07a      	b.n	402ccc <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402bd6:	4b4e      	ldr	r3, [pc, #312]	; (402d10 <SystemCoreClockUpdate+0x154>)
  402bd8:	695b      	ldr	r3, [r3, #20]
  402bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402bde:	2b00      	cmp	r3, #0
  402be0:	d004      	beq.n	402bec <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402be2:	4b4c      	ldr	r3, [pc, #304]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402be4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402be8:	601a      	str	r2, [r3, #0]
    break;
  402bea:	e06f      	b.n	402ccc <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402bec:	4b49      	ldr	r3, [pc, #292]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402bee:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402bf2:	601a      	str	r2, [r3, #0]
    break;
  402bf4:	e06a      	b.n	402ccc <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402bf6:	4b45      	ldr	r3, [pc, #276]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402bf8:	6a1b      	ldr	r3, [r3, #32]
  402bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402bfe:	2b00      	cmp	r3, #0
  402c00:	d003      	beq.n	402c0a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402c02:	4b44      	ldr	r3, [pc, #272]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c04:	4a44      	ldr	r2, [pc, #272]	; (402d18 <SystemCoreClockUpdate+0x15c>)
  402c06:	601a      	str	r2, [r3, #0]
    break;
  402c08:	e060      	b.n	402ccc <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402c0a:	4b42      	ldr	r3, [pc, #264]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c0c:	4a43      	ldr	r2, [pc, #268]	; (402d1c <SystemCoreClockUpdate+0x160>)
  402c0e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402c10:	4b3e      	ldr	r3, [pc, #248]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402c12:	6a1b      	ldr	r3, [r3, #32]
  402c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c18:	2b10      	cmp	r3, #16
  402c1a:	d004      	beq.n	402c26 <SystemCoreClockUpdate+0x6a>
  402c1c:	2b20      	cmp	r3, #32
  402c1e:	d008      	beq.n	402c32 <SystemCoreClockUpdate+0x76>
  402c20:	2b00      	cmp	r3, #0
  402c22:	d00e      	beq.n	402c42 <SystemCoreClockUpdate+0x86>
          break;
  402c24:	e00e      	b.n	402c44 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  402c26:	4b3b      	ldr	r3, [pc, #236]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c28:	681b      	ldr	r3, [r3, #0]
  402c2a:	005b      	lsls	r3, r3, #1
  402c2c:	4a39      	ldr	r2, [pc, #228]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c2e:	6013      	str	r3, [r2, #0]
          break;
  402c30:	e008      	b.n	402c44 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  402c32:	4b38      	ldr	r3, [pc, #224]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c34:	681a      	ldr	r2, [r3, #0]
  402c36:	4613      	mov	r3, r2
  402c38:	005b      	lsls	r3, r3, #1
  402c3a:	4413      	add	r3, r2
  402c3c:	4a35      	ldr	r2, [pc, #212]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c3e:	6013      	str	r3, [r2, #0]
          break;
  402c40:	e000      	b.n	402c44 <SystemCoreClockUpdate+0x88>
          break;
  402c42:	bf00      	nop
    break;
  402c44:	e042      	b.n	402ccc <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402c46:	4b31      	ldr	r3, [pc, #196]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402c48:	6a1b      	ldr	r3, [r3, #32]
  402c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402c4e:	2b00      	cmp	r3, #0
  402c50:	d003      	beq.n	402c5a <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402c52:	4b30      	ldr	r3, [pc, #192]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c54:	4a30      	ldr	r2, [pc, #192]	; (402d18 <SystemCoreClockUpdate+0x15c>)
  402c56:	601a      	str	r2, [r3, #0]
  402c58:	e01c      	b.n	402c94 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402c5a:	4b2e      	ldr	r3, [pc, #184]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c5c:	4a2f      	ldr	r2, [pc, #188]	; (402d1c <SystemCoreClockUpdate+0x160>)
  402c5e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402c60:	4b2a      	ldr	r3, [pc, #168]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402c62:	6a1b      	ldr	r3, [r3, #32]
  402c64:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c68:	2b10      	cmp	r3, #16
  402c6a:	d004      	beq.n	402c76 <SystemCoreClockUpdate+0xba>
  402c6c:	2b20      	cmp	r3, #32
  402c6e:	d008      	beq.n	402c82 <SystemCoreClockUpdate+0xc6>
  402c70:	2b00      	cmp	r3, #0
  402c72:	d00e      	beq.n	402c92 <SystemCoreClockUpdate+0xd6>
          break;
  402c74:	e00e      	b.n	402c94 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  402c76:	4b27      	ldr	r3, [pc, #156]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c78:	681b      	ldr	r3, [r3, #0]
  402c7a:	005b      	lsls	r3, r3, #1
  402c7c:	4a25      	ldr	r2, [pc, #148]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c7e:	6013      	str	r3, [r2, #0]
          break;
  402c80:	e008      	b.n	402c94 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402c82:	4b24      	ldr	r3, [pc, #144]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c84:	681a      	ldr	r2, [r3, #0]
  402c86:	4613      	mov	r3, r2
  402c88:	005b      	lsls	r3, r3, #1
  402c8a:	4413      	add	r3, r2
  402c8c:	4a21      	ldr	r2, [pc, #132]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402c8e:	6013      	str	r3, [r2, #0]
          break;
  402c90:	e000      	b.n	402c94 <SystemCoreClockUpdate+0xd8>
          break;
  402c92:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402c94:	4b1d      	ldr	r3, [pc, #116]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c98:	f003 0303 	and.w	r3, r3, #3
  402c9c:	2b02      	cmp	r3, #2
  402c9e:	d114      	bne.n	402cca <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402ca0:	4b1a      	ldr	r3, [pc, #104]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402ca4:	0c1b      	lsrs	r3, r3, #16
  402ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402caa:	3301      	adds	r3, #1
  402cac:	4a19      	ldr	r2, [pc, #100]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402cae:	6812      	ldr	r2, [r2, #0]
  402cb0:	fb02 f303 	mul.w	r3, r2, r3
  402cb4:	4a17      	ldr	r2, [pc, #92]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402cb6:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402cb8:	4b14      	ldr	r3, [pc, #80]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402cbc:	b2db      	uxtb	r3, r3
  402cbe:	4a15      	ldr	r2, [pc, #84]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402cc0:	6812      	ldr	r2, [r2, #0]
  402cc2:	fbb2 f3f3 	udiv	r3, r2, r3
  402cc6:	4a13      	ldr	r2, [pc, #76]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402cc8:	6013      	str	r3, [r2, #0]
    break;
  402cca:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402ccc:	4b0f      	ldr	r3, [pc, #60]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402cd4:	2b70      	cmp	r3, #112	; 0x70
  402cd6:	d108      	bne.n	402cea <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402cd8:	4b0e      	ldr	r3, [pc, #56]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402cda:	681b      	ldr	r3, [r3, #0]
  402cdc:	4a10      	ldr	r2, [pc, #64]	; (402d20 <SystemCoreClockUpdate+0x164>)
  402cde:	fba2 2303 	umull	r2, r3, r2, r3
  402ce2:	085b      	lsrs	r3, r3, #1
  402ce4:	4a0b      	ldr	r2, [pc, #44]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402ce6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402ce8:	e00a      	b.n	402d00 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402cea:	4b08      	ldr	r3, [pc, #32]	; (402d0c <SystemCoreClockUpdate+0x150>)
  402cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402cee:	091b      	lsrs	r3, r3, #4
  402cf0:	f003 0307 	and.w	r3, r3, #7
  402cf4:	4a07      	ldr	r2, [pc, #28]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402cf6:	6812      	ldr	r2, [r2, #0]
  402cf8:	fa22 f303 	lsr.w	r3, r2, r3
  402cfc:	4a05      	ldr	r2, [pc, #20]	; (402d14 <SystemCoreClockUpdate+0x158>)
  402cfe:	6013      	str	r3, [r2, #0]
}
  402d00:	bf00      	nop
  402d02:	46bd      	mov	sp, r7
  402d04:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d08:	4770      	bx	lr
  402d0a:	bf00      	nop
  402d0c:	400e0600 	.word	0x400e0600
  402d10:	400e1810 	.word	0x400e1810
  402d14:	20400020 	.word	0x20400020
  402d18:	00b71b00 	.word	0x00b71b00
  402d1c:	003d0900 	.word	0x003d0900
  402d20:	aaaaaaab 	.word	0xaaaaaaab

00402d24 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402d24:	b480      	push	{r7}
  402d26:	b083      	sub	sp, #12
  402d28:	af00      	add	r7, sp, #0
  402d2a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402d2c:	687b      	ldr	r3, [r7, #4]
  402d2e:	4a1d      	ldr	r2, [pc, #116]	; (402da4 <system_init_flash+0x80>)
  402d30:	4293      	cmp	r3, r2
  402d32:	d804      	bhi.n	402d3e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402d34:	4b1c      	ldr	r3, [pc, #112]	; (402da8 <system_init_flash+0x84>)
  402d36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402d3a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402d3c:	e02b      	b.n	402d96 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  402d3e:	687b      	ldr	r3, [r7, #4]
  402d40:	4a1a      	ldr	r2, [pc, #104]	; (402dac <system_init_flash+0x88>)
  402d42:	4293      	cmp	r3, r2
  402d44:	d803      	bhi.n	402d4e <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402d46:	4b18      	ldr	r3, [pc, #96]	; (402da8 <system_init_flash+0x84>)
  402d48:	4a19      	ldr	r2, [pc, #100]	; (402db0 <system_init_flash+0x8c>)
  402d4a:	601a      	str	r2, [r3, #0]
}
  402d4c:	e023      	b.n	402d96 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  402d4e:	687b      	ldr	r3, [r7, #4]
  402d50:	4a18      	ldr	r2, [pc, #96]	; (402db4 <system_init_flash+0x90>)
  402d52:	4293      	cmp	r3, r2
  402d54:	d803      	bhi.n	402d5e <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402d56:	4b14      	ldr	r3, [pc, #80]	; (402da8 <system_init_flash+0x84>)
  402d58:	4a17      	ldr	r2, [pc, #92]	; (402db8 <system_init_flash+0x94>)
  402d5a:	601a      	str	r2, [r3, #0]
}
  402d5c:	e01b      	b.n	402d96 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402d5e:	687b      	ldr	r3, [r7, #4]
  402d60:	4a16      	ldr	r2, [pc, #88]	; (402dbc <system_init_flash+0x98>)
  402d62:	4293      	cmp	r3, r2
  402d64:	d803      	bhi.n	402d6e <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402d66:	4b10      	ldr	r3, [pc, #64]	; (402da8 <system_init_flash+0x84>)
  402d68:	4a15      	ldr	r2, [pc, #84]	; (402dc0 <system_init_flash+0x9c>)
  402d6a:	601a      	str	r2, [r3, #0]
}
  402d6c:	e013      	b.n	402d96 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402d6e:	687b      	ldr	r3, [r7, #4]
  402d70:	4a14      	ldr	r2, [pc, #80]	; (402dc4 <system_init_flash+0xa0>)
  402d72:	4293      	cmp	r3, r2
  402d74:	d804      	bhi.n	402d80 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402d76:	4b0c      	ldr	r3, [pc, #48]	; (402da8 <system_init_flash+0x84>)
  402d78:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402d7c:	601a      	str	r2, [r3, #0]
}
  402d7e:	e00a      	b.n	402d96 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402d80:	687b      	ldr	r3, [r7, #4]
  402d82:	4a11      	ldr	r2, [pc, #68]	; (402dc8 <system_init_flash+0xa4>)
  402d84:	4293      	cmp	r3, r2
  402d86:	d803      	bhi.n	402d90 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402d88:	4b07      	ldr	r3, [pc, #28]	; (402da8 <system_init_flash+0x84>)
  402d8a:	4a10      	ldr	r2, [pc, #64]	; (402dcc <system_init_flash+0xa8>)
  402d8c:	601a      	str	r2, [r3, #0]
}
  402d8e:	e002      	b.n	402d96 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402d90:	4b05      	ldr	r3, [pc, #20]	; (402da8 <system_init_flash+0x84>)
  402d92:	4a0f      	ldr	r2, [pc, #60]	; (402dd0 <system_init_flash+0xac>)
  402d94:	601a      	str	r2, [r3, #0]
}
  402d96:	bf00      	nop
  402d98:	370c      	adds	r7, #12
  402d9a:	46bd      	mov	sp, r7
  402d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402da0:	4770      	bx	lr
  402da2:	bf00      	nop
  402da4:	015ef3bf 	.word	0x015ef3bf
  402da8:	400e0c00 	.word	0x400e0c00
  402dac:	02bde77f 	.word	0x02bde77f
  402db0:	04000100 	.word	0x04000100
  402db4:	041cdb3f 	.word	0x041cdb3f
  402db8:	04000200 	.word	0x04000200
  402dbc:	057bceff 	.word	0x057bceff
  402dc0:	04000300 	.word	0x04000300
  402dc4:	06dac2bf 	.word	0x06dac2bf
  402dc8:	0839b67f 	.word	0x0839b67f
  402dcc:	04000500 	.word	0x04000500
  402dd0:	04000600 	.word	0x04000600

00402dd4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402dd4:	b480      	push	{r7}
  402dd6:	b085      	sub	sp, #20
  402dd8:	af00      	add	r7, sp, #0
  402dda:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402ddc:	4b10      	ldr	r3, [pc, #64]	; (402e20 <_sbrk+0x4c>)
  402dde:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402de0:	4b10      	ldr	r3, [pc, #64]	; (402e24 <_sbrk+0x50>)
  402de2:	681b      	ldr	r3, [r3, #0]
  402de4:	2b00      	cmp	r3, #0
  402de6:	d102      	bne.n	402dee <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402de8:	4b0e      	ldr	r3, [pc, #56]	; (402e24 <_sbrk+0x50>)
  402dea:	4a0f      	ldr	r2, [pc, #60]	; (402e28 <_sbrk+0x54>)
  402dec:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402dee:	4b0d      	ldr	r3, [pc, #52]	; (402e24 <_sbrk+0x50>)
  402df0:	681b      	ldr	r3, [r3, #0]
  402df2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402df4:	68ba      	ldr	r2, [r7, #8]
  402df6:	687b      	ldr	r3, [r7, #4]
  402df8:	441a      	add	r2, r3
  402dfa:	68fb      	ldr	r3, [r7, #12]
  402dfc:	429a      	cmp	r2, r3
  402dfe:	dd02      	ble.n	402e06 <_sbrk+0x32>
		return (caddr_t) -1;	
  402e00:	f04f 33ff 	mov.w	r3, #4294967295
  402e04:	e006      	b.n	402e14 <_sbrk+0x40>
	}

	heap += incr;
  402e06:	4b07      	ldr	r3, [pc, #28]	; (402e24 <_sbrk+0x50>)
  402e08:	681a      	ldr	r2, [r3, #0]
  402e0a:	687b      	ldr	r3, [r7, #4]
  402e0c:	4413      	add	r3, r2
  402e0e:	4a05      	ldr	r2, [pc, #20]	; (402e24 <_sbrk+0x50>)
  402e10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402e12:	68bb      	ldr	r3, [r7, #8]
}
  402e14:	4618      	mov	r0, r3
  402e16:	3714      	adds	r7, #20
  402e18:	46bd      	mov	sp, r7
  402e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e1e:	4770      	bx	lr
  402e20:	2045fffc 	.word	0x2045fffc
  402e24:	20400c80 	.word	0x20400c80
  402e28:	20402ee8 	.word	0x20402ee8

00402e2c <NVIC_EnableIRQ>:
{
  402e2c:	b480      	push	{r7}
  402e2e:	b083      	sub	sp, #12
  402e30:	af00      	add	r7, sp, #0
  402e32:	4603      	mov	r3, r0
  402e34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e36:	4909      	ldr	r1, [pc, #36]	; (402e5c <NVIC_EnableIRQ+0x30>)
  402e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402e3c:	095b      	lsrs	r3, r3, #5
  402e3e:	79fa      	ldrb	r2, [r7, #7]
  402e40:	f002 021f 	and.w	r2, r2, #31
  402e44:	2001      	movs	r0, #1
  402e46:	fa00 f202 	lsl.w	r2, r0, r2
  402e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402e4e:	bf00      	nop
  402e50:	370c      	adds	r7, #12
  402e52:	46bd      	mov	sp, r7
  402e54:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e58:	4770      	bx	lr
  402e5a:	bf00      	nop
  402e5c:	e000e100 	.word	0xe000e100

00402e60 <NVIC_DisableIRQ>:
{
  402e60:	b480      	push	{r7}
  402e62:	b083      	sub	sp, #12
  402e64:	af00      	add	r7, sp, #0
  402e66:	4603      	mov	r3, r0
  402e68:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402e6a:	4909      	ldr	r1, [pc, #36]	; (402e90 <NVIC_DisableIRQ+0x30>)
  402e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402e70:	095b      	lsrs	r3, r3, #5
  402e72:	79fa      	ldrb	r2, [r7, #7]
  402e74:	f002 021f 	and.w	r2, r2, #31
  402e78:	2001      	movs	r0, #1
  402e7a:	fa00 f202 	lsl.w	r2, r0, r2
  402e7e:	3320      	adds	r3, #32
  402e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402e84:	bf00      	nop
  402e86:	370c      	adds	r7, #12
  402e88:	46bd      	mov	sp, r7
  402e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e8e:	4770      	bx	lr
  402e90:	e000e100 	.word	0xe000e100

00402e94 <NVIC_ClearPendingIRQ>:
{
  402e94:	b480      	push	{r7}
  402e96:	b083      	sub	sp, #12
  402e98:	af00      	add	r7, sp, #0
  402e9a:	4603      	mov	r3, r0
  402e9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402e9e:	4909      	ldr	r1, [pc, #36]	; (402ec4 <NVIC_ClearPendingIRQ+0x30>)
  402ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ea4:	095b      	lsrs	r3, r3, #5
  402ea6:	79fa      	ldrb	r2, [r7, #7]
  402ea8:	f002 021f 	and.w	r2, r2, #31
  402eac:	2001      	movs	r0, #1
  402eae:	fa00 f202 	lsl.w	r2, r0, r2
  402eb2:	3360      	adds	r3, #96	; 0x60
  402eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402eb8:	bf00      	nop
  402eba:	370c      	adds	r7, #12
  402ebc:	46bd      	mov	sp, r7
  402ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ec2:	4770      	bx	lr
  402ec4:	e000e100 	.word	0xe000e100

00402ec8 <NVIC_SetPriority>:
{
  402ec8:	b480      	push	{r7}
  402eca:	b083      	sub	sp, #12
  402ecc:	af00      	add	r7, sp, #0
  402ece:	4603      	mov	r3, r0
  402ed0:	6039      	str	r1, [r7, #0]
  402ed2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ed8:	2b00      	cmp	r3, #0
  402eda:	da0b      	bge.n	402ef4 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402edc:	490d      	ldr	r1, [pc, #52]	; (402f14 <NVIC_SetPriority+0x4c>)
  402ede:	79fb      	ldrb	r3, [r7, #7]
  402ee0:	f003 030f 	and.w	r3, r3, #15
  402ee4:	3b04      	subs	r3, #4
  402ee6:	683a      	ldr	r2, [r7, #0]
  402ee8:	b2d2      	uxtb	r2, r2
  402eea:	0152      	lsls	r2, r2, #5
  402eec:	b2d2      	uxtb	r2, r2
  402eee:	440b      	add	r3, r1
  402ef0:	761a      	strb	r2, [r3, #24]
}
  402ef2:	e009      	b.n	402f08 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402ef4:	4908      	ldr	r1, [pc, #32]	; (402f18 <NVIC_SetPriority+0x50>)
  402ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402efa:	683a      	ldr	r2, [r7, #0]
  402efc:	b2d2      	uxtb	r2, r2
  402efe:	0152      	lsls	r2, r2, #5
  402f00:	b2d2      	uxtb	r2, r2
  402f02:	440b      	add	r3, r1
  402f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  402f08:	bf00      	nop
  402f0a:	370c      	adds	r7, #12
  402f0c:	46bd      	mov	sp, r7
  402f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f12:	4770      	bx	lr
  402f14:	e000ed00 	.word	0xe000ed00
  402f18:	e000e100 	.word	0xe000e100

00402f1c <osc_get_rate>:
{
  402f1c:	b480      	push	{r7}
  402f1e:	b083      	sub	sp, #12
  402f20:	af00      	add	r7, sp, #0
  402f22:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402f24:	687b      	ldr	r3, [r7, #4]
  402f26:	2b07      	cmp	r3, #7
  402f28:	d825      	bhi.n	402f76 <osc_get_rate+0x5a>
  402f2a:	a201      	add	r2, pc, #4	; (adr r2, 402f30 <osc_get_rate+0x14>)
  402f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402f30:	00402f51 	.word	0x00402f51
  402f34:	00402f57 	.word	0x00402f57
  402f38:	00402f5d 	.word	0x00402f5d
  402f3c:	00402f63 	.word	0x00402f63
  402f40:	00402f67 	.word	0x00402f67
  402f44:	00402f6b 	.word	0x00402f6b
  402f48:	00402f6f 	.word	0x00402f6f
  402f4c:	00402f73 	.word	0x00402f73
		return OSC_SLCK_32K_RC_HZ;
  402f50:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402f54:	e010      	b.n	402f78 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402f5a:	e00d      	b.n	402f78 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402f60:	e00a      	b.n	402f78 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402f62:	4b08      	ldr	r3, [pc, #32]	; (402f84 <osc_get_rate+0x68>)
  402f64:	e008      	b.n	402f78 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402f66:	4b08      	ldr	r3, [pc, #32]	; (402f88 <osc_get_rate+0x6c>)
  402f68:	e006      	b.n	402f78 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402f6a:	4b08      	ldr	r3, [pc, #32]	; (402f8c <osc_get_rate+0x70>)
  402f6c:	e004      	b.n	402f78 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402f6e:	4b07      	ldr	r3, [pc, #28]	; (402f8c <osc_get_rate+0x70>)
  402f70:	e002      	b.n	402f78 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402f72:	4b06      	ldr	r3, [pc, #24]	; (402f8c <osc_get_rate+0x70>)
  402f74:	e000      	b.n	402f78 <osc_get_rate+0x5c>
	return 0;
  402f76:	2300      	movs	r3, #0
}
  402f78:	4618      	mov	r0, r3
  402f7a:	370c      	adds	r7, #12
  402f7c:	46bd      	mov	sp, r7
  402f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f82:	4770      	bx	lr
  402f84:	003d0900 	.word	0x003d0900
  402f88:	007a1200 	.word	0x007a1200
  402f8c:	00b71b00 	.word	0x00b71b00

00402f90 <sysclk_get_main_hz>:
{
  402f90:	b580      	push	{r7, lr}
  402f92:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402f94:	2006      	movs	r0, #6
  402f96:	4b05      	ldr	r3, [pc, #20]	; (402fac <sysclk_get_main_hz+0x1c>)
  402f98:	4798      	blx	r3
  402f9a:	4602      	mov	r2, r0
  402f9c:	4613      	mov	r3, r2
  402f9e:	009b      	lsls	r3, r3, #2
  402fa0:	4413      	add	r3, r2
  402fa2:	009a      	lsls	r2, r3, #2
  402fa4:	4413      	add	r3, r2
}
  402fa6:	4618      	mov	r0, r3
  402fa8:	bd80      	pop	{r7, pc}
  402faa:	bf00      	nop
  402fac:	00402f1d 	.word	0x00402f1d

00402fb0 <sysclk_get_cpu_hz>:
{
  402fb0:	b580      	push	{r7, lr}
  402fb2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402fb4:	4b02      	ldr	r3, [pc, #8]	; (402fc0 <sysclk_get_cpu_hz+0x10>)
  402fb6:	4798      	blx	r3
  402fb8:	4603      	mov	r3, r0
}
  402fba:	4618      	mov	r0, r3
  402fbc:	bd80      	pop	{r7, pc}
  402fbe:	bf00      	nop
  402fc0:	00402f91 	.word	0x00402f91

00402fc4 <but_callback>:


void io_init(void);
static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource);

void but_callback(void){
  402fc4:	b480      	push	{r7}
  402fc6:	af00      	add	r7, sp, #0
	but_flag = 1;
  402fc8:	4b03      	ldr	r3, [pc, #12]	; (402fd8 <but_callback+0x14>)
  402fca:	2201      	movs	r2, #1
  402fcc:	701a      	strb	r2, [r3, #0]
}
  402fce:	bf00      	nop
  402fd0:	46bd      	mov	sp, r7
  402fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fd6:	4770      	bx	lr
  402fd8:	20400c88 	.word	0x20400c88

00402fdc <callback_echo>:


void callback_echo (void) {
  402fdc:	b598      	push	{r3, r4, r7, lr}
  402fde:	af00      	add	r7, sp, #0
	
	if(!echo_flag) {
  402fe0:	4b12      	ldr	r3, [pc, #72]	; (40302c <callback_echo+0x50>)
  402fe2:	781b      	ldrb	r3, [r3, #0]
  402fe4:	b2db      	uxtb	r3, r3
  402fe6:	2b00      	cmp	r3, #0
  402fe8:	d110      	bne.n	40300c <callback_echo+0x30>
		
		RTT_init(freq,0,0);
  402fea:	4b11      	ldr	r3, [pc, #68]	; (403030 <callback_echo+0x54>)
  402fec:	e9d3 3400 	ldrd	r3, r4, [r3]
  402ff0:	4a10      	ldr	r2, [pc, #64]	; (403034 <callback_echo+0x58>)
  402ff2:	4618      	mov	r0, r3
  402ff4:	4621      	mov	r1, r4
  402ff6:	4790      	blx	r2
  402ff8:	4603      	mov	r3, r0
  402ffa:	2200      	movs	r2, #0
  402ffc:	2100      	movs	r1, #0
  402ffe:	4618      	mov	r0, r3
  403000:	4b0d      	ldr	r3, [pc, #52]	; (403038 <callback_echo+0x5c>)
  403002:	4798      	blx	r3
		echo_flag = 1;
  403004:	4b09      	ldr	r3, [pc, #36]	; (40302c <callback_echo+0x50>)
  403006:	2201      	movs	r2, #1
  403008:	701a      	strb	r2, [r3, #0]
		
		 
		
	}
	
}
  40300a:	e00c      	b.n	403026 <callback_echo+0x4a>
		tempo = rtt_read_timer_value(RTT);
  40300c:	480b      	ldr	r0, [pc, #44]	; (40303c <callback_echo+0x60>)
  40300e:	4b0c      	ldr	r3, [pc, #48]	; (403040 <callback_echo+0x64>)
  403010:	4798      	blx	r3
  403012:	4603      	mov	r3, r0
  403014:	461a      	mov	r2, r3
  403016:	4b0b      	ldr	r3, [pc, #44]	; (403044 <callback_echo+0x68>)
  403018:	601a      	str	r2, [r3, #0]
		echo_flag = 0;
  40301a:	4b04      	ldr	r3, [pc, #16]	; (40302c <callback_echo+0x50>)
  40301c:	2200      	movs	r2, #0
  40301e:	701a      	strb	r2, [r3, #0]
		display_flag = 1;
  403020:	4b09      	ldr	r3, [pc, #36]	; (403048 <callback_echo+0x6c>)
  403022:	2201      	movs	r2, #1
  403024:	701a      	strb	r2, [r3, #0]
}
  403026:	bf00      	nop
  403028:	bd98      	pop	{r3, r4, r7, pc}
  40302a:	bf00      	nop
  40302c:	20400c89 	.word	0x20400c89
  403030:	20400028 	.word	0x20400028
  403034:	00403ba1 	.word	0x00403ba1
  403038:	0040306d 	.word	0x0040306d
  40303c:	400e1830 	.word	0x400e1830
  403040:	004002ad 	.word	0x004002ad
  403044:	20400c84 	.word	0x20400c84
  403048:	20400c8a 	.word	0x20400c8a

0040304c <RTT_Handler>:




void RTT_Handler(void) {
  40304c:	b580      	push	{r7, lr}
  40304e:	b082      	sub	sp, #8
  403050:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status - ACK */
	ul_status = rtt_get_status(RTT);
  403052:	4804      	ldr	r0, [pc, #16]	; (403064 <RTT_Handler+0x18>)
  403054:	4b04      	ldr	r3, [pc, #16]	; (403068 <RTT_Handler+0x1c>)
  403056:	4798      	blx	r3
  403058:	6078      	str	r0, [r7, #4]

	

}
  40305a:	bf00      	nop
  40305c:	3708      	adds	r7, #8
  40305e:	46bd      	mov	sp, r7
  403060:	bd80      	pop	{r7, pc}
  403062:	bf00      	nop
  403064:	400e1830 	.word	0x400e1830
  403068:	004002db 	.word	0x004002db

0040306c <RTT_init>:

static float get_time_rtt(){
	uint ul_previous_time = rtt_read_timer_value(RTT);
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  40306c:	b580      	push	{r7, lr}
  40306e:	b086      	sub	sp, #24
  403070:	af00      	add	r7, sp, #0
  403072:	60f8      	str	r0, [r7, #12]
  403074:	60b9      	str	r1, [r7, #8]
  403076:	607a      	str	r2, [r7, #4]

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  403078:	eddf 6a26 	vldr	s13, [pc, #152]	; 403114 <RTT_init+0xa8>
  40307c:	ed97 7a03 	vldr	s14, [r7, #12]
  403080:	eec6 7a87 	vdiv.f32	s15, s13, s14
  403084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  403088:	edc7 7a00 	vstr	s15, [r7]
  40308c:	883b      	ldrh	r3, [r7, #0]
  40308e:	82fb      	strh	r3, [r7, #22]
	
	rtt_sel_source(RTT, false);
  403090:	2100      	movs	r1, #0
  403092:	4821      	ldr	r0, [pc, #132]	; (403118 <RTT_init+0xac>)
  403094:	4b21      	ldr	r3, [pc, #132]	; (40311c <RTT_init+0xb0>)
  403096:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  403098:	8afb      	ldrh	r3, [r7, #22]
  40309a:	4619      	mov	r1, r3
  40309c:	481e      	ldr	r0, [pc, #120]	; (403118 <RTT_init+0xac>)
  40309e:	4b20      	ldr	r3, [pc, #128]	; (403120 <RTT_init+0xb4>)
  4030a0:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  4030a2:	687b      	ldr	r3, [r7, #4]
  4030a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4030a8:	2b00      	cmp	r3, #0
  4030aa:	d012      	beq.n	4030d2 <RTT_init+0x66>
		uint32_t ul_previous_time;
		ul_previous_time = rtt_read_timer_value(RTT);
  4030ac:	481a      	ldr	r0, [pc, #104]	; (403118 <RTT_init+0xac>)
  4030ae:	4b1d      	ldr	r3, [pc, #116]	; (403124 <RTT_init+0xb8>)
  4030b0:	4798      	blx	r3
  4030b2:	6138      	str	r0, [r7, #16]
		while (ul_previous_time == rtt_read_timer_value(RTT));
  4030b4:	bf00      	nop
  4030b6:	4818      	ldr	r0, [pc, #96]	; (403118 <RTT_init+0xac>)
  4030b8:	4b1a      	ldr	r3, [pc, #104]	; (403124 <RTT_init+0xb8>)
  4030ba:	4798      	blx	r3
  4030bc:	4602      	mov	r2, r0
  4030be:	693b      	ldr	r3, [r7, #16]
  4030c0:	429a      	cmp	r2, r3
  4030c2:	d0f8      	beq.n	4030b6 <RTT_init+0x4a>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  4030c4:	68ba      	ldr	r2, [r7, #8]
  4030c6:	693b      	ldr	r3, [r7, #16]
  4030c8:	4413      	add	r3, r2
  4030ca:	4619      	mov	r1, r3
  4030cc:	4812      	ldr	r0, [pc, #72]	; (403118 <RTT_init+0xac>)
  4030ce:	4b16      	ldr	r3, [pc, #88]	; (403128 <RTT_init+0xbc>)
  4030d0:	4798      	blx	r3
	}

	/* config NVIC */
	NVIC_DisableIRQ(RTT_IRQn);
  4030d2:	2003      	movs	r0, #3
  4030d4:	4b15      	ldr	r3, [pc, #84]	; (40312c <RTT_init+0xc0>)
  4030d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
  4030d8:	2003      	movs	r0, #3
  4030da:	4b15      	ldr	r3, [pc, #84]	; (403130 <RTT_init+0xc4>)
  4030dc:	4798      	blx	r3
	NVIC_SetPriority(RTT_IRQn, 4);
  4030de:	2104      	movs	r1, #4
  4030e0:	2003      	movs	r0, #3
  4030e2:	4b14      	ldr	r3, [pc, #80]	; (403134 <RTT_init+0xc8>)
  4030e4:	4798      	blx	r3
	NVIC_EnableIRQ(RTT_IRQn);
  4030e6:	2003      	movs	r0, #3
  4030e8:	4b13      	ldr	r3, [pc, #76]	; (403138 <RTT_init+0xcc>)
  4030ea:	4798      	blx	r3

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  4030ec:	687b      	ldr	r3, [r7, #4]
  4030ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  4030f2:	2b00      	cmp	r3, #0
  4030f4:	d004      	beq.n	403100 <RTT_init+0x94>
	rtt_enable_interrupt(RTT, rttIRQSource);
  4030f6:	6879      	ldr	r1, [r7, #4]
  4030f8:	4807      	ldr	r0, [pc, #28]	; (403118 <RTT_init+0xac>)
  4030fa:	4b10      	ldr	r3, [pc, #64]	; (40313c <RTT_init+0xd0>)
  4030fc:	4798      	blx	r3
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
	
}
  4030fe:	e004      	b.n	40310a <RTT_init+0x9e>
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  403100:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  403104:	4804      	ldr	r0, [pc, #16]	; (403118 <RTT_init+0xac>)
  403106:	4b0e      	ldr	r3, [pc, #56]	; (403140 <RTT_init+0xd4>)
  403108:	4798      	blx	r3
}
  40310a:	bf00      	nop
  40310c:	3718      	adds	r7, #24
  40310e:	46bd      	mov	sp, r7
  403110:	bd80      	pop	{r7, pc}
  403112:	bf00      	nop
  403114:	47000000 	.word	0x47000000
  403118:	400e1830 	.word	0x400e1830
  40311c:	004001dd 	.word	0x004001dd
  403120:	004001ad 	.word	0x004001ad
  403124:	004002ad 	.word	0x004002ad
  403128:	004002f5 	.word	0x004002f5
  40312c:	00402e61 	.word	0x00402e61
  403130:	00402e95 	.word	0x00402e95
  403134:	00402ec9 	.word	0x00402ec9
  403138:	00402e2d 	.word	0x00402e2d
  40313c:	00400235 	.word	0x00400235
  403140:	0040026d 	.word	0x0040026d

00403144 <io_init>:

	

// Inicializa botao SW0 do kit com interrupcao
void io_init(void)
{
  403144:	b590      	push	{r4, r7, lr}
  403146:	b083      	sub	sp, #12
  403148:	af02      	add	r7, sp, #8

	
	pmc_enable_periph_clk(ECHO_ID);
  40314a:	200a      	movs	r0, #10
  40314c:	4b2d      	ldr	r3, [pc, #180]	; (403204 <io_init+0xc0>)
  40314e:	4798      	blx	r3
	pio_configure(ECHO_PIO, PIO_OUTPUT_0, ECHO_IDX_MASK, PIO_DEFAULT);
  403150:	2300      	movs	r3, #0
  403152:	2240      	movs	r2, #64	; 0x40
  403154:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403158:	482b      	ldr	r0, [pc, #172]	; (403208 <io_init+0xc4>)
  40315a:	4c2c      	ldr	r4, [pc, #176]	; (40320c <io_init+0xc8>)
  40315c:	47a0      	blx	r4
	pio_set_input(ECHO_PIO, ECHO_IDX_MASK, PIO_DEFAULT);
  40315e:	2200      	movs	r2, #0
  403160:	2140      	movs	r1, #64	; 0x40
  403162:	4829      	ldr	r0, [pc, #164]	; (403208 <io_init+0xc4>)
  403164:	4b2a      	ldr	r3, [pc, #168]	; (403210 <io_init+0xcc>)
  403166:	4798      	blx	r3
	
	pmc_enable_periph_clk(TRIGG_ID);
  403168:	2010      	movs	r0, #16
  40316a:	4b26      	ldr	r3, [pc, #152]	; (403204 <io_init+0xc0>)
  40316c:	4798      	blx	r3
	pio_configure(TRIGG_PIO, PIO_OUTPUT_0, TRIGG_IDX_MASK, PIO_DEFAULT);
  40316e:	2300      	movs	r3, #0
  403170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403174:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403178:	4826      	ldr	r0, [pc, #152]	; (403214 <io_init+0xd0>)
  40317a:	4c24      	ldr	r4, [pc, #144]	; (40320c <io_init+0xc8>)
  40317c:	47a0      	blx	r4
	//pio_set_output(TRIGG_PIO, TRIGG_IDX_MASK, 0, 0, 0);
	
	
	
	
	pmc_enable_periph_clk(BUT_PIO_ID);
  40317e:	200a      	movs	r0, #10
  403180:	4b20      	ldr	r3, [pc, #128]	; (403204 <io_init+0xc0>)
  403182:	4798      	blx	r3

	pio_configure(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403184:	2309      	movs	r3, #9
  403186:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40318a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40318e:	481e      	ldr	r0, [pc, #120]	; (403208 <io_init+0xc4>)
  403190:	4c1e      	ldr	r4, [pc, #120]	; (40320c <io_init+0xc8>)
  403192:	47a0      	blx	r4
	pio_set_debounce_filter(BUT_PIO, BUT_IDX_MASK, 60);
  403194:	223c      	movs	r2, #60	; 0x3c
  403196:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40319a:	481b      	ldr	r0, [pc, #108]	; (403208 <io_init+0xc4>)
  40319c:	4b1e      	ldr	r3, [pc, #120]	; (403218 <io_init+0xd4>)
  40319e:	4798      	blx	r3
	

	pio_handler_set(ECHO_PIO,
  4031a0:	4b1e      	ldr	r3, [pc, #120]	; (40321c <io_init+0xd8>)
  4031a2:	9300      	str	r3, [sp, #0]
  4031a4:	2340      	movs	r3, #64	; 0x40
  4031a6:	2240      	movs	r2, #64	; 0x40
  4031a8:	210a      	movs	r1, #10
  4031aa:	4817      	ldr	r0, [pc, #92]	; (403208 <io_init+0xc4>)
  4031ac:	4c1c      	ldr	r4, [pc, #112]	; (403220 <io_init+0xdc>)
  4031ae:	47a0      	blx	r4
					ECHO_ID,
					ECHO_IDX_MASK,
					PIO_IT_EDGE,
					callback_echo);
					
	pio_handler_set(BUT_PIO,
  4031b0:	4b1c      	ldr	r3, [pc, #112]	; (403224 <io_init+0xe0>)
  4031b2:	9300      	str	r3, [sp, #0]
  4031b4:	2350      	movs	r3, #80	; 0x50
  4031b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4031ba:	210a      	movs	r1, #10
  4031bc:	4812      	ldr	r0, [pc, #72]	; (403208 <io_init+0xc4>)
  4031be:	4c18      	ldr	r4, [pc, #96]	; (403220 <io_init+0xdc>)
  4031c0:	47a0      	blx	r4
					PIO_IT_FALL_EDGE,
					but_callback);
					
	
	
	pio_enable_interrupt(BUT_PIO, BUT_IDX_MASK);
  4031c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4031c6:	4810      	ldr	r0, [pc, #64]	; (403208 <io_init+0xc4>)
  4031c8:	4b17      	ldr	r3, [pc, #92]	; (403228 <io_init+0xe4>)
  4031ca:	4798      	blx	r3
	pio_get_interrupt_status(BUT_PIO);
  4031cc:	480e      	ldr	r0, [pc, #56]	; (403208 <io_init+0xc4>)
  4031ce:	4b17      	ldr	r3, [pc, #92]	; (40322c <io_init+0xe8>)
  4031d0:	4798      	blx	r3
	
	pio_enable_interrupt(ECHO_PIO, ECHO_IDX_MASK);
  4031d2:	2140      	movs	r1, #64	; 0x40
  4031d4:	480c      	ldr	r0, [pc, #48]	; (403208 <io_init+0xc4>)
  4031d6:	4b14      	ldr	r3, [pc, #80]	; (403228 <io_init+0xe4>)
  4031d8:	4798      	blx	r3
	pio_get_interrupt_status(ECHO_PIO);
  4031da:	480b      	ldr	r0, [pc, #44]	; (403208 <io_init+0xc4>)
  4031dc:	4b13      	ldr	r3, [pc, #76]	; (40322c <io_init+0xe8>)
  4031de:	4798      	blx	r3
	
	 
	NVIC_EnableIRQ(ECHO_ID);
  4031e0:	200a      	movs	r0, #10
  4031e2:	4b13      	ldr	r3, [pc, #76]	; (403230 <io_init+0xec>)
  4031e4:	4798      	blx	r3
	NVIC_SetPriority(ECHO_ID, 1); 
  4031e6:	2101      	movs	r1, #1
  4031e8:	200a      	movs	r0, #10
  4031ea:	4b12      	ldr	r3, [pc, #72]	; (403234 <io_init+0xf0>)
  4031ec:	4798      	blx	r3
	
	NVIC_EnableIRQ(BUT_PIO_ID);
  4031ee:	200a      	movs	r0, #10
  4031f0:	4b0f      	ldr	r3, [pc, #60]	; (403230 <io_init+0xec>)
  4031f2:	4798      	blx	r3
	NVIC_SetPriority(BUT_PIO_ID, 2);
  4031f4:	2102      	movs	r1, #2
  4031f6:	200a      	movs	r0, #10
  4031f8:	4b0e      	ldr	r3, [pc, #56]	; (403234 <io_init+0xf0>)
  4031fa:	4798      	blx	r3
	
}
  4031fc:	bf00      	nop
  4031fe:	3704      	adds	r7, #4
  403200:	46bd      	mov	sp, r7
  403202:	bd90      	pop	{r4, r7, pc}
  403204:	004025b1 	.word	0x004025b1
  403208:	400e0e00 	.word	0x400e0e00
  40320c:	00401f81 	.word	0x00401f81
  403210:	00401e9d 	.word	0x00401e9d
  403214:	400e1400 	.word	0x400e1400
  403218:	00401d1d 	.word	0x00401d1d
  40321c:	00402fdd 	.word	0x00402fdd
  403220:	004021d5 	.word	0x004021d5
  403224:	00402fc5 	.word	0x00402fc5
  403228:	004020b9 	.word	0x004020b9
  40322c:	004020f1 	.word	0x004020f1
  403230:	00402e2d 	.word	0x00402e2d
  403234:	00402ec9 	.word	0x00402ec9

00403238 <delay_trigg>:

void delay_trigg(){
  403238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40323a:	af00      	add	r7, sp, #0
	pio_set(TRIGG_PIO, TRIGG_IDX_MASK);
  40323c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403240:	4818      	ldr	r0, [pc, #96]	; (4032a4 <delay_trigg+0x6c>)
  403242:	4b19      	ldr	r3, [pc, #100]	; (4032a8 <delay_trigg+0x70>)
  403244:	4798      	blx	r3
	delay_us(10);
  403246:	4b19      	ldr	r3, [pc, #100]	; (4032ac <delay_trigg+0x74>)
  403248:	4798      	blx	r3
  40324a:	4603      	mov	r3, r0
  40324c:	4619      	mov	r1, r3
  40324e:	f04f 0200 	mov.w	r2, #0
  403252:	460b      	mov	r3, r1
  403254:	4614      	mov	r4, r2
  403256:	00a6      	lsls	r6, r4, #2
  403258:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40325c:	009d      	lsls	r5, r3, #2
  40325e:	462b      	mov	r3, r5
  403260:	4634      	mov	r4, r6
  403262:	185b      	adds	r3, r3, r1
  403264:	eb44 0402 	adc.w	r4, r4, r2
  403268:	18db      	adds	r3, r3, r3
  40326a:	eb44 0404 	adc.w	r4, r4, r4
  40326e:	4619      	mov	r1, r3
  403270:	4622      	mov	r2, r4
  403272:	4b0f      	ldr	r3, [pc, #60]	; (4032b0 <delay_trigg+0x78>)
  403274:	f04f 0400 	mov.w	r4, #0
  403278:	18cd      	adds	r5, r1, r3
  40327a:	eb42 0604 	adc.w	r6, r2, r4
  40327e:	4628      	mov	r0, r5
  403280:	4631      	mov	r1, r6
  403282:	4c0c      	ldr	r4, [pc, #48]	; (4032b4 <delay_trigg+0x7c>)
  403284:	4a0c      	ldr	r2, [pc, #48]	; (4032b8 <delay_trigg+0x80>)
  403286:	f04f 0300 	mov.w	r3, #0
  40328a:	47a0      	blx	r4
  40328c:	4603      	mov	r3, r0
  40328e:	460c      	mov	r4, r1
  403290:	4618      	mov	r0, r3
  403292:	4b0a      	ldr	r3, [pc, #40]	; (4032bc <delay_trigg+0x84>)
  403294:	4798      	blx	r3
	pio_clear(TRIGG_PIO, TRIGG_IDX_MASK);
  403296:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40329a:	4802      	ldr	r0, [pc, #8]	; (4032a4 <delay_trigg+0x6c>)
  40329c:	4b08      	ldr	r3, [pc, #32]	; (4032c0 <delay_trigg+0x88>)
  40329e:	4798      	blx	r3
	
}
  4032a0:	bf00      	nop
  4032a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4032a4:	400e1400 	.word	0x400e1400
  4032a8:	00401d55 	.word	0x00401d55
  4032ac:	00402fb1 	.word	0x00402fb1
  4032b0:	005a83df 	.word	0x005a83df
  4032b4:	00403c41 	.word	0x00403c41
  4032b8:	005a83e0 	.word	0x005a83e0
  4032bc:	20400001 	.word	0x20400001
  4032c0:	00401d71 	.word	0x00401d71

004032c4 <display>:

void display(){
  4032c4:	b5b0      	push	{r4, r5, r7, lr}
  4032c6:	b086      	sub	sp, #24
  4032c8:	af00      	add	r7, sp, #0
	char str[5];
	double tempo2 = tempo/freq;
  4032ca:	4b28      	ldr	r3, [pc, #160]	; (40336c <display+0xa8>)
  4032cc:	681a      	ldr	r2, [r3, #0]
  4032ce:	4b28      	ldr	r3, [pc, #160]	; (403370 <display+0xac>)
  4032d0:	4610      	mov	r0, r2
  4032d2:	4798      	blx	r3
  4032d4:	4b27      	ldr	r3, [pc, #156]	; (403374 <display+0xb0>)
  4032d6:	e9d3 3400 	ldrd	r3, r4, [r3]
  4032da:	4d27      	ldr	r5, [pc, #156]	; (403378 <display+0xb4>)
  4032dc:	461a      	mov	r2, r3
  4032de:	4623      	mov	r3, r4
  4032e0:	47a8      	blx	r5
  4032e2:	4603      	mov	r3, r0
  4032e4:	460c      	mov	r4, r1
  4032e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	double distancia = ((320.0*tempo2)/2.0)*100.0;
  4032ea:	4c24      	ldr	r4, [pc, #144]	; (40337c <display+0xb8>)
  4032ec:	f04f 0200 	mov.w	r2, #0
  4032f0:	4b23      	ldr	r3, [pc, #140]	; (403380 <display+0xbc>)
  4032f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
  4032f6:	47a0      	blx	r4
  4032f8:	4603      	mov	r3, r0
  4032fa:	460c      	mov	r4, r1
  4032fc:	4618      	mov	r0, r3
  4032fe:	4621      	mov	r1, r4
  403300:	4c1d      	ldr	r4, [pc, #116]	; (403378 <display+0xb4>)
  403302:	f04f 0200 	mov.w	r2, #0
  403306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40330a:	47a0      	blx	r4
  40330c:	4603      	mov	r3, r0
  40330e:	460c      	mov	r4, r1
  403310:	4618      	mov	r0, r3
  403312:	4621      	mov	r1, r4
  403314:	4c19      	ldr	r4, [pc, #100]	; (40337c <display+0xb8>)
  403316:	f04f 0200 	mov.w	r2, #0
  40331a:	4b1a      	ldr	r3, [pc, #104]	; (403384 <display+0xc0>)
  40331c:	47a0      	blx	r4
  40331e:	4603      	mov	r3, r0
  403320:	460c      	mov	r4, r1
  403322:	e9c7 3402 	strd	r3, r4, [r7, #8]
	gfx_mono_draw_string("       ", 10,8, &sysfont);
  403326:	4b18      	ldr	r3, [pc, #96]	; (403388 <display+0xc4>)
  403328:	2208      	movs	r2, #8
  40332a:	210a      	movs	r1, #10
  40332c:	4817      	ldr	r0, [pc, #92]	; (40338c <display+0xc8>)
  40332e:	4c18      	ldr	r4, [pc, #96]	; (403390 <display+0xcc>)
  403330:	47a0      	blx	r4
	gfx_mono_draw_string("        ", 70,8, &sysfont);
  403332:	4b15      	ldr	r3, [pc, #84]	; (403388 <display+0xc4>)
  403334:	2208      	movs	r2, #8
  403336:	2146      	movs	r1, #70	; 0x46
  403338:	4816      	ldr	r0, [pc, #88]	; (403394 <display+0xd0>)
  40333a:	4c15      	ldr	r4, [pc, #84]	; (403390 <display+0xcc>)
  40333c:	47a0      	blx	r4
	sprintf(str, "%.1f", distancia); //
  40333e:	4638      	mov	r0, r7
  403340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  403344:	4914      	ldr	r1, [pc, #80]	; (403398 <display+0xd4>)
  403346:	4c15      	ldr	r4, [pc, #84]	; (40339c <display+0xd8>)
  403348:	47a0      	blx	r4
	gfx_mono_draw_string("dist:", 10,8, &sysfont);
  40334a:	4b0f      	ldr	r3, [pc, #60]	; (403388 <display+0xc4>)
  40334c:	2208      	movs	r2, #8
  40334e:	210a      	movs	r1, #10
  403350:	4813      	ldr	r0, [pc, #76]	; (4033a0 <display+0xdc>)
  403352:	4c0f      	ldr	r4, [pc, #60]	; (403390 <display+0xcc>)
  403354:	47a0      	blx	r4
	
	
	gfx_mono_draw_string(str, 70,8, &sysfont);
  403356:	4638      	mov	r0, r7
  403358:	4b0b      	ldr	r3, [pc, #44]	; (403388 <display+0xc4>)
  40335a:	2208      	movs	r2, #8
  40335c:	2146      	movs	r1, #70	; 0x46
  40335e:	4c0c      	ldr	r4, [pc, #48]	; (403390 <display+0xcc>)
  403360:	47a0      	blx	r4
	
}
  403362:	bf00      	nop
  403364:	3718      	adds	r7, #24
  403366:	46bd      	mov	sp, r7
  403368:	bdb0      	pop	{r4, r5, r7, pc}
  40336a:	bf00      	nop
  40336c:	20400c84 	.word	0x20400c84
  403370:	004036b1 	.word	0x004036b1
  403374:	20400028 	.word	0x20400028
  403378:	004039d1 	.word	0x004039d1
  40337c:	0040377d 	.word	0x0040377d
  403380:	40740000 	.word	0x40740000
  403384:	40590000 	.word	0x40590000
  403388:	2040000c 	.word	0x2040000c
  40338c:	00408818 	.word	0x00408818
  403390:	004009f1 	.word	0x004009f1
  403394:	00408820 	.word	0x00408820
  403398:	0040882c 	.word	0x0040882c
  40339c:	0040403d 	.word	0x0040403d
  4033a0:	00408834 	.word	0x00408834

004033a4 <main>:




int main (void)
{
  4033a4:	b580      	push	{r7, lr}
  4033a6:	af00      	add	r7, sp, #0
	board_init();
  4033a8:	4b0f      	ldr	r3, [pc, #60]	; (4033e8 <main+0x44>)
  4033aa:	4798      	blx	r3
	sysclk_init();
  4033ac:	4b0f      	ldr	r3, [pc, #60]	; (4033ec <main+0x48>)
  4033ae:	4798      	blx	r3
	io_init();
  4033b0:	4b0f      	ldr	r3, [pc, #60]	; (4033f0 <main+0x4c>)
  4033b2:	4798      	blx	r3
	delay_init();
	

	
  // Init OLED
	gfx_mono_ssd1306_init();
  4033b4:	4b0f      	ldr	r3, [pc, #60]	; (4033f4 <main+0x50>)
  4033b6:	4798      	blx	r3
  

  /* Insert application code here, after the board has been initialized. */
	while(1) {
		
		if(but_flag){
  4033b8:	4b0f      	ldr	r3, [pc, #60]	; (4033f8 <main+0x54>)
  4033ba:	781b      	ldrb	r3, [r3, #0]
  4033bc:	b2db      	uxtb	r3, r3
  4033be:	2b00      	cmp	r3, #0
  4033c0:	d004      	beq.n	4033cc <main+0x28>
			delay_trigg();
  4033c2:	4b0e      	ldr	r3, [pc, #56]	; (4033fc <main+0x58>)
  4033c4:	4798      	blx	r3
			but_flag = 0;
  4033c6:	4b0c      	ldr	r3, [pc, #48]	; (4033f8 <main+0x54>)
  4033c8:	2200      	movs	r2, #0
  4033ca:	701a      	strb	r2, [r3, #0]
		}
		
		if(display_flag){
  4033cc:	4b0c      	ldr	r3, [pc, #48]	; (403400 <main+0x5c>)
  4033ce:	781b      	ldrb	r3, [r3, #0]
  4033d0:	b2db      	uxtb	r3, r3
  4033d2:	2b00      	cmp	r3, #0
  4033d4:	d004      	beq.n	4033e0 <main+0x3c>
			display();
  4033d6:	4b0b      	ldr	r3, [pc, #44]	; (403404 <main+0x60>)
  4033d8:	4798      	blx	r3
			display_flag = 0;
  4033da:	4b09      	ldr	r3, [pc, #36]	; (403400 <main+0x5c>)
  4033dc:	2200      	movs	r2, #0
  4033de:	701a      	strb	r2, [r3, #0]
		}
		
		
		
				
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  4033e0:	2002      	movs	r0, #2
  4033e2:	4b09      	ldr	r3, [pc, #36]	; (403408 <main+0x64>)
  4033e4:	4798      	blx	r3
		if(but_flag){
  4033e6:	e7e7      	b.n	4033b8 <main+0x14>
  4033e8:	00401c6d 	.word	0x00401c6d
  4033ec:	004017a9 	.word	0x004017a9
  4033f0:	00403145 	.word	0x00403145
  4033f4:	00400af5 	.word	0x00400af5
  4033f8:	20400c88 	.word	0x20400c88
  4033fc:	00403239 	.word	0x00403239
  403400:	20400c8a 	.word	0x20400c8a
  403404:	004032c5 	.word	0x004032c5
  403408:	004026e5 	.word	0x004026e5

0040340c <__aeabi_drsub>:
  40340c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403410:	e002      	b.n	403418 <__adddf3>
  403412:	bf00      	nop

00403414 <__aeabi_dsub>:
  403414:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403418 <__adddf3>:
  403418:	b530      	push	{r4, r5, lr}
  40341a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40341e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403422:	ea94 0f05 	teq	r4, r5
  403426:	bf08      	it	eq
  403428:	ea90 0f02 	teqeq	r0, r2
  40342c:	bf1f      	itttt	ne
  40342e:	ea54 0c00 	orrsne.w	ip, r4, r0
  403432:	ea55 0c02 	orrsne.w	ip, r5, r2
  403436:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40343a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40343e:	f000 80e2 	beq.w	403606 <__adddf3+0x1ee>
  403442:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403446:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40344a:	bfb8      	it	lt
  40344c:	426d      	neglt	r5, r5
  40344e:	dd0c      	ble.n	40346a <__adddf3+0x52>
  403450:	442c      	add	r4, r5
  403452:	ea80 0202 	eor.w	r2, r0, r2
  403456:	ea81 0303 	eor.w	r3, r1, r3
  40345a:	ea82 0000 	eor.w	r0, r2, r0
  40345e:	ea83 0101 	eor.w	r1, r3, r1
  403462:	ea80 0202 	eor.w	r2, r0, r2
  403466:	ea81 0303 	eor.w	r3, r1, r3
  40346a:	2d36      	cmp	r5, #54	; 0x36
  40346c:	bf88      	it	hi
  40346e:	bd30      	pophi	{r4, r5, pc}
  403470:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403474:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403478:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40347c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403480:	d002      	beq.n	403488 <__adddf3+0x70>
  403482:	4240      	negs	r0, r0
  403484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403488:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40348c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403490:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403494:	d002      	beq.n	40349c <__adddf3+0x84>
  403496:	4252      	negs	r2, r2
  403498:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40349c:	ea94 0f05 	teq	r4, r5
  4034a0:	f000 80a7 	beq.w	4035f2 <__adddf3+0x1da>
  4034a4:	f1a4 0401 	sub.w	r4, r4, #1
  4034a8:	f1d5 0e20 	rsbs	lr, r5, #32
  4034ac:	db0d      	blt.n	4034ca <__adddf3+0xb2>
  4034ae:	fa02 fc0e 	lsl.w	ip, r2, lr
  4034b2:	fa22 f205 	lsr.w	r2, r2, r5
  4034b6:	1880      	adds	r0, r0, r2
  4034b8:	f141 0100 	adc.w	r1, r1, #0
  4034bc:	fa03 f20e 	lsl.w	r2, r3, lr
  4034c0:	1880      	adds	r0, r0, r2
  4034c2:	fa43 f305 	asr.w	r3, r3, r5
  4034c6:	4159      	adcs	r1, r3
  4034c8:	e00e      	b.n	4034e8 <__adddf3+0xd0>
  4034ca:	f1a5 0520 	sub.w	r5, r5, #32
  4034ce:	f10e 0e20 	add.w	lr, lr, #32
  4034d2:	2a01      	cmp	r2, #1
  4034d4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4034d8:	bf28      	it	cs
  4034da:	f04c 0c02 	orrcs.w	ip, ip, #2
  4034de:	fa43 f305 	asr.w	r3, r3, r5
  4034e2:	18c0      	adds	r0, r0, r3
  4034e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4034e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4034ec:	d507      	bpl.n	4034fe <__adddf3+0xe6>
  4034ee:	f04f 0e00 	mov.w	lr, #0
  4034f2:	f1dc 0c00 	rsbs	ip, ip, #0
  4034f6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4034fa:	eb6e 0101 	sbc.w	r1, lr, r1
  4034fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403502:	d31b      	bcc.n	40353c <__adddf3+0x124>
  403504:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403508:	d30c      	bcc.n	403524 <__adddf3+0x10c>
  40350a:	0849      	lsrs	r1, r1, #1
  40350c:	ea5f 0030 	movs.w	r0, r0, rrx
  403510:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403514:	f104 0401 	add.w	r4, r4, #1
  403518:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40351c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403520:	f080 809a 	bcs.w	403658 <__adddf3+0x240>
  403524:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403528:	bf08      	it	eq
  40352a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40352e:	f150 0000 	adcs.w	r0, r0, #0
  403532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403536:	ea41 0105 	orr.w	r1, r1, r5
  40353a:	bd30      	pop	{r4, r5, pc}
  40353c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403540:	4140      	adcs	r0, r0
  403542:	eb41 0101 	adc.w	r1, r1, r1
  403546:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40354a:	f1a4 0401 	sub.w	r4, r4, #1
  40354e:	d1e9      	bne.n	403524 <__adddf3+0x10c>
  403550:	f091 0f00 	teq	r1, #0
  403554:	bf04      	itt	eq
  403556:	4601      	moveq	r1, r0
  403558:	2000      	moveq	r0, #0
  40355a:	fab1 f381 	clz	r3, r1
  40355e:	bf08      	it	eq
  403560:	3320      	addeq	r3, #32
  403562:	f1a3 030b 	sub.w	r3, r3, #11
  403566:	f1b3 0220 	subs.w	r2, r3, #32
  40356a:	da0c      	bge.n	403586 <__adddf3+0x16e>
  40356c:	320c      	adds	r2, #12
  40356e:	dd08      	ble.n	403582 <__adddf3+0x16a>
  403570:	f102 0c14 	add.w	ip, r2, #20
  403574:	f1c2 020c 	rsb	r2, r2, #12
  403578:	fa01 f00c 	lsl.w	r0, r1, ip
  40357c:	fa21 f102 	lsr.w	r1, r1, r2
  403580:	e00c      	b.n	40359c <__adddf3+0x184>
  403582:	f102 0214 	add.w	r2, r2, #20
  403586:	bfd8      	it	le
  403588:	f1c2 0c20 	rsble	ip, r2, #32
  40358c:	fa01 f102 	lsl.w	r1, r1, r2
  403590:	fa20 fc0c 	lsr.w	ip, r0, ip
  403594:	bfdc      	itt	le
  403596:	ea41 010c 	orrle.w	r1, r1, ip
  40359a:	4090      	lslle	r0, r2
  40359c:	1ae4      	subs	r4, r4, r3
  40359e:	bfa2      	ittt	ge
  4035a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4035a4:	4329      	orrge	r1, r5
  4035a6:	bd30      	popge	{r4, r5, pc}
  4035a8:	ea6f 0404 	mvn.w	r4, r4
  4035ac:	3c1f      	subs	r4, #31
  4035ae:	da1c      	bge.n	4035ea <__adddf3+0x1d2>
  4035b0:	340c      	adds	r4, #12
  4035b2:	dc0e      	bgt.n	4035d2 <__adddf3+0x1ba>
  4035b4:	f104 0414 	add.w	r4, r4, #20
  4035b8:	f1c4 0220 	rsb	r2, r4, #32
  4035bc:	fa20 f004 	lsr.w	r0, r0, r4
  4035c0:	fa01 f302 	lsl.w	r3, r1, r2
  4035c4:	ea40 0003 	orr.w	r0, r0, r3
  4035c8:	fa21 f304 	lsr.w	r3, r1, r4
  4035cc:	ea45 0103 	orr.w	r1, r5, r3
  4035d0:	bd30      	pop	{r4, r5, pc}
  4035d2:	f1c4 040c 	rsb	r4, r4, #12
  4035d6:	f1c4 0220 	rsb	r2, r4, #32
  4035da:	fa20 f002 	lsr.w	r0, r0, r2
  4035de:	fa01 f304 	lsl.w	r3, r1, r4
  4035e2:	ea40 0003 	orr.w	r0, r0, r3
  4035e6:	4629      	mov	r1, r5
  4035e8:	bd30      	pop	{r4, r5, pc}
  4035ea:	fa21 f004 	lsr.w	r0, r1, r4
  4035ee:	4629      	mov	r1, r5
  4035f0:	bd30      	pop	{r4, r5, pc}
  4035f2:	f094 0f00 	teq	r4, #0
  4035f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4035fa:	bf06      	itte	eq
  4035fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403600:	3401      	addeq	r4, #1
  403602:	3d01      	subne	r5, #1
  403604:	e74e      	b.n	4034a4 <__adddf3+0x8c>
  403606:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40360a:	bf18      	it	ne
  40360c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403610:	d029      	beq.n	403666 <__adddf3+0x24e>
  403612:	ea94 0f05 	teq	r4, r5
  403616:	bf08      	it	eq
  403618:	ea90 0f02 	teqeq	r0, r2
  40361c:	d005      	beq.n	40362a <__adddf3+0x212>
  40361e:	ea54 0c00 	orrs.w	ip, r4, r0
  403622:	bf04      	itt	eq
  403624:	4619      	moveq	r1, r3
  403626:	4610      	moveq	r0, r2
  403628:	bd30      	pop	{r4, r5, pc}
  40362a:	ea91 0f03 	teq	r1, r3
  40362e:	bf1e      	ittt	ne
  403630:	2100      	movne	r1, #0
  403632:	2000      	movne	r0, #0
  403634:	bd30      	popne	{r4, r5, pc}
  403636:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40363a:	d105      	bne.n	403648 <__adddf3+0x230>
  40363c:	0040      	lsls	r0, r0, #1
  40363e:	4149      	adcs	r1, r1
  403640:	bf28      	it	cs
  403642:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403646:	bd30      	pop	{r4, r5, pc}
  403648:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40364c:	bf3c      	itt	cc
  40364e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403652:	bd30      	popcc	{r4, r5, pc}
  403654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403658:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40365c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403660:	f04f 0000 	mov.w	r0, #0
  403664:	bd30      	pop	{r4, r5, pc}
  403666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40366a:	bf1a      	itte	ne
  40366c:	4619      	movne	r1, r3
  40366e:	4610      	movne	r0, r2
  403670:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403674:	bf1c      	itt	ne
  403676:	460b      	movne	r3, r1
  403678:	4602      	movne	r2, r0
  40367a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40367e:	bf06      	itte	eq
  403680:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403684:	ea91 0f03 	teqeq	r1, r3
  403688:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40368c:	bd30      	pop	{r4, r5, pc}
  40368e:	bf00      	nop

00403690 <__aeabi_ui2d>:
  403690:	f090 0f00 	teq	r0, #0
  403694:	bf04      	itt	eq
  403696:	2100      	moveq	r1, #0
  403698:	4770      	bxeq	lr
  40369a:	b530      	push	{r4, r5, lr}
  40369c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4036a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4036a4:	f04f 0500 	mov.w	r5, #0
  4036a8:	f04f 0100 	mov.w	r1, #0
  4036ac:	e750      	b.n	403550 <__adddf3+0x138>
  4036ae:	bf00      	nop

004036b0 <__aeabi_i2d>:
  4036b0:	f090 0f00 	teq	r0, #0
  4036b4:	bf04      	itt	eq
  4036b6:	2100      	moveq	r1, #0
  4036b8:	4770      	bxeq	lr
  4036ba:	b530      	push	{r4, r5, lr}
  4036bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4036c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4036c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4036c8:	bf48      	it	mi
  4036ca:	4240      	negmi	r0, r0
  4036cc:	f04f 0100 	mov.w	r1, #0
  4036d0:	e73e      	b.n	403550 <__adddf3+0x138>
  4036d2:	bf00      	nop

004036d4 <__aeabi_f2d>:
  4036d4:	0042      	lsls	r2, r0, #1
  4036d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4036da:	ea4f 0131 	mov.w	r1, r1, rrx
  4036de:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4036e2:	bf1f      	itttt	ne
  4036e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4036e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4036ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4036f0:	4770      	bxne	lr
  4036f2:	f092 0f00 	teq	r2, #0
  4036f6:	bf14      	ite	ne
  4036f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4036fc:	4770      	bxeq	lr
  4036fe:	b530      	push	{r4, r5, lr}
  403700:	f44f 7460 	mov.w	r4, #896	; 0x380
  403704:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40370c:	e720      	b.n	403550 <__adddf3+0x138>
  40370e:	bf00      	nop

00403710 <__aeabi_ul2d>:
  403710:	ea50 0201 	orrs.w	r2, r0, r1
  403714:	bf08      	it	eq
  403716:	4770      	bxeq	lr
  403718:	b530      	push	{r4, r5, lr}
  40371a:	f04f 0500 	mov.w	r5, #0
  40371e:	e00a      	b.n	403736 <__aeabi_l2d+0x16>

00403720 <__aeabi_l2d>:
  403720:	ea50 0201 	orrs.w	r2, r0, r1
  403724:	bf08      	it	eq
  403726:	4770      	bxeq	lr
  403728:	b530      	push	{r4, r5, lr}
  40372a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40372e:	d502      	bpl.n	403736 <__aeabi_l2d+0x16>
  403730:	4240      	negs	r0, r0
  403732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403736:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40373a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40373e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403742:	f43f aedc 	beq.w	4034fe <__adddf3+0xe6>
  403746:	f04f 0203 	mov.w	r2, #3
  40374a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40374e:	bf18      	it	ne
  403750:	3203      	addne	r2, #3
  403752:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403756:	bf18      	it	ne
  403758:	3203      	addne	r2, #3
  40375a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40375e:	f1c2 0320 	rsb	r3, r2, #32
  403762:	fa00 fc03 	lsl.w	ip, r0, r3
  403766:	fa20 f002 	lsr.w	r0, r0, r2
  40376a:	fa01 fe03 	lsl.w	lr, r1, r3
  40376e:	ea40 000e 	orr.w	r0, r0, lr
  403772:	fa21 f102 	lsr.w	r1, r1, r2
  403776:	4414      	add	r4, r2
  403778:	e6c1      	b.n	4034fe <__adddf3+0xe6>
  40377a:	bf00      	nop

0040377c <__aeabi_dmul>:
  40377c:	b570      	push	{r4, r5, r6, lr}
  40377e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403782:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403786:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40378a:	bf1d      	ittte	ne
  40378c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403790:	ea94 0f0c 	teqne	r4, ip
  403794:	ea95 0f0c 	teqne	r5, ip
  403798:	f000 f8de 	bleq	403958 <__aeabi_dmul+0x1dc>
  40379c:	442c      	add	r4, r5
  40379e:	ea81 0603 	eor.w	r6, r1, r3
  4037a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4037a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4037aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4037ae:	bf18      	it	ne
  4037b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4037b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4037b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4037bc:	d038      	beq.n	403830 <__aeabi_dmul+0xb4>
  4037be:	fba0 ce02 	umull	ip, lr, r0, r2
  4037c2:	f04f 0500 	mov.w	r5, #0
  4037c6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4037ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4037ce:	fbe0 e503 	umlal	lr, r5, r0, r3
  4037d2:	f04f 0600 	mov.w	r6, #0
  4037d6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4037da:	f09c 0f00 	teq	ip, #0
  4037de:	bf18      	it	ne
  4037e0:	f04e 0e01 	orrne.w	lr, lr, #1
  4037e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4037e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4037ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4037f0:	d204      	bcs.n	4037fc <__aeabi_dmul+0x80>
  4037f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4037f6:	416d      	adcs	r5, r5
  4037f8:	eb46 0606 	adc.w	r6, r6, r6
  4037fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403800:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403804:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403808:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40380c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403810:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403814:	bf88      	it	hi
  403816:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40381a:	d81e      	bhi.n	40385a <__aeabi_dmul+0xde>
  40381c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403820:	bf08      	it	eq
  403822:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403826:	f150 0000 	adcs.w	r0, r0, #0
  40382a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40382e:	bd70      	pop	{r4, r5, r6, pc}
  403830:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403834:	ea46 0101 	orr.w	r1, r6, r1
  403838:	ea40 0002 	orr.w	r0, r0, r2
  40383c:	ea81 0103 	eor.w	r1, r1, r3
  403840:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403844:	bfc2      	ittt	gt
  403846:	ebd4 050c 	rsbsgt	r5, r4, ip
  40384a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40384e:	bd70      	popgt	{r4, r5, r6, pc}
  403850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403854:	f04f 0e00 	mov.w	lr, #0
  403858:	3c01      	subs	r4, #1
  40385a:	f300 80ab 	bgt.w	4039b4 <__aeabi_dmul+0x238>
  40385e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403862:	bfde      	ittt	le
  403864:	2000      	movle	r0, #0
  403866:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40386a:	bd70      	pople	{r4, r5, r6, pc}
  40386c:	f1c4 0400 	rsb	r4, r4, #0
  403870:	3c20      	subs	r4, #32
  403872:	da35      	bge.n	4038e0 <__aeabi_dmul+0x164>
  403874:	340c      	adds	r4, #12
  403876:	dc1b      	bgt.n	4038b0 <__aeabi_dmul+0x134>
  403878:	f104 0414 	add.w	r4, r4, #20
  40387c:	f1c4 0520 	rsb	r5, r4, #32
  403880:	fa00 f305 	lsl.w	r3, r0, r5
  403884:	fa20 f004 	lsr.w	r0, r0, r4
  403888:	fa01 f205 	lsl.w	r2, r1, r5
  40388c:	ea40 0002 	orr.w	r0, r0, r2
  403890:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403894:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403898:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40389c:	fa21 f604 	lsr.w	r6, r1, r4
  4038a0:	eb42 0106 	adc.w	r1, r2, r6
  4038a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4038a8:	bf08      	it	eq
  4038aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4038ae:	bd70      	pop	{r4, r5, r6, pc}
  4038b0:	f1c4 040c 	rsb	r4, r4, #12
  4038b4:	f1c4 0520 	rsb	r5, r4, #32
  4038b8:	fa00 f304 	lsl.w	r3, r0, r4
  4038bc:	fa20 f005 	lsr.w	r0, r0, r5
  4038c0:	fa01 f204 	lsl.w	r2, r1, r4
  4038c4:	ea40 0002 	orr.w	r0, r0, r2
  4038c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4038cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4038d0:	f141 0100 	adc.w	r1, r1, #0
  4038d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4038d8:	bf08      	it	eq
  4038da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4038de:	bd70      	pop	{r4, r5, r6, pc}
  4038e0:	f1c4 0520 	rsb	r5, r4, #32
  4038e4:	fa00 f205 	lsl.w	r2, r0, r5
  4038e8:	ea4e 0e02 	orr.w	lr, lr, r2
  4038ec:	fa20 f304 	lsr.w	r3, r0, r4
  4038f0:	fa01 f205 	lsl.w	r2, r1, r5
  4038f4:	ea43 0302 	orr.w	r3, r3, r2
  4038f8:	fa21 f004 	lsr.w	r0, r1, r4
  4038fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403900:	fa21 f204 	lsr.w	r2, r1, r4
  403904:	ea20 0002 	bic.w	r0, r0, r2
  403908:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40390c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403910:	bf08      	it	eq
  403912:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403916:	bd70      	pop	{r4, r5, r6, pc}
  403918:	f094 0f00 	teq	r4, #0
  40391c:	d10f      	bne.n	40393e <__aeabi_dmul+0x1c2>
  40391e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403922:	0040      	lsls	r0, r0, #1
  403924:	eb41 0101 	adc.w	r1, r1, r1
  403928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40392c:	bf08      	it	eq
  40392e:	3c01      	subeq	r4, #1
  403930:	d0f7      	beq.n	403922 <__aeabi_dmul+0x1a6>
  403932:	ea41 0106 	orr.w	r1, r1, r6
  403936:	f095 0f00 	teq	r5, #0
  40393a:	bf18      	it	ne
  40393c:	4770      	bxne	lr
  40393e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403942:	0052      	lsls	r2, r2, #1
  403944:	eb43 0303 	adc.w	r3, r3, r3
  403948:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40394c:	bf08      	it	eq
  40394e:	3d01      	subeq	r5, #1
  403950:	d0f7      	beq.n	403942 <__aeabi_dmul+0x1c6>
  403952:	ea43 0306 	orr.w	r3, r3, r6
  403956:	4770      	bx	lr
  403958:	ea94 0f0c 	teq	r4, ip
  40395c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403960:	bf18      	it	ne
  403962:	ea95 0f0c 	teqne	r5, ip
  403966:	d00c      	beq.n	403982 <__aeabi_dmul+0x206>
  403968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40396c:	bf18      	it	ne
  40396e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403972:	d1d1      	bne.n	403918 <__aeabi_dmul+0x19c>
  403974:	ea81 0103 	eor.w	r1, r1, r3
  403978:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40397c:	f04f 0000 	mov.w	r0, #0
  403980:	bd70      	pop	{r4, r5, r6, pc}
  403982:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403986:	bf06      	itte	eq
  403988:	4610      	moveq	r0, r2
  40398a:	4619      	moveq	r1, r3
  40398c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403990:	d019      	beq.n	4039c6 <__aeabi_dmul+0x24a>
  403992:	ea94 0f0c 	teq	r4, ip
  403996:	d102      	bne.n	40399e <__aeabi_dmul+0x222>
  403998:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40399c:	d113      	bne.n	4039c6 <__aeabi_dmul+0x24a>
  40399e:	ea95 0f0c 	teq	r5, ip
  4039a2:	d105      	bne.n	4039b0 <__aeabi_dmul+0x234>
  4039a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4039a8:	bf1c      	itt	ne
  4039aa:	4610      	movne	r0, r2
  4039ac:	4619      	movne	r1, r3
  4039ae:	d10a      	bne.n	4039c6 <__aeabi_dmul+0x24a>
  4039b0:	ea81 0103 	eor.w	r1, r1, r3
  4039b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4039b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4039bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4039c0:	f04f 0000 	mov.w	r0, #0
  4039c4:	bd70      	pop	{r4, r5, r6, pc}
  4039c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4039ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4039ce:	bd70      	pop	{r4, r5, r6, pc}

004039d0 <__aeabi_ddiv>:
  4039d0:	b570      	push	{r4, r5, r6, lr}
  4039d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4039d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4039da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4039de:	bf1d      	ittte	ne
  4039e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4039e4:	ea94 0f0c 	teqne	r4, ip
  4039e8:	ea95 0f0c 	teqne	r5, ip
  4039ec:	f000 f8a7 	bleq	403b3e <__aeabi_ddiv+0x16e>
  4039f0:	eba4 0405 	sub.w	r4, r4, r5
  4039f4:	ea81 0e03 	eor.w	lr, r1, r3
  4039f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4039fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403a00:	f000 8088 	beq.w	403b14 <__aeabi_ddiv+0x144>
  403a04:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403a08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403a0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403a10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403a14:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403a18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403a1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403a20:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403a24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403a28:	429d      	cmp	r5, r3
  403a2a:	bf08      	it	eq
  403a2c:	4296      	cmpeq	r6, r2
  403a2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403a32:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403a36:	d202      	bcs.n	403a3e <__aeabi_ddiv+0x6e>
  403a38:	085b      	lsrs	r3, r3, #1
  403a3a:	ea4f 0232 	mov.w	r2, r2, rrx
  403a3e:	1ab6      	subs	r6, r6, r2
  403a40:	eb65 0503 	sbc.w	r5, r5, r3
  403a44:	085b      	lsrs	r3, r3, #1
  403a46:	ea4f 0232 	mov.w	r2, r2, rrx
  403a4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403a4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403a52:	ebb6 0e02 	subs.w	lr, r6, r2
  403a56:	eb75 0e03 	sbcs.w	lr, r5, r3
  403a5a:	bf22      	ittt	cs
  403a5c:	1ab6      	subcs	r6, r6, r2
  403a5e:	4675      	movcs	r5, lr
  403a60:	ea40 000c 	orrcs.w	r0, r0, ip
  403a64:	085b      	lsrs	r3, r3, #1
  403a66:	ea4f 0232 	mov.w	r2, r2, rrx
  403a6a:	ebb6 0e02 	subs.w	lr, r6, r2
  403a6e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403a72:	bf22      	ittt	cs
  403a74:	1ab6      	subcs	r6, r6, r2
  403a76:	4675      	movcs	r5, lr
  403a78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403a7c:	085b      	lsrs	r3, r3, #1
  403a7e:	ea4f 0232 	mov.w	r2, r2, rrx
  403a82:	ebb6 0e02 	subs.w	lr, r6, r2
  403a86:	eb75 0e03 	sbcs.w	lr, r5, r3
  403a8a:	bf22      	ittt	cs
  403a8c:	1ab6      	subcs	r6, r6, r2
  403a8e:	4675      	movcs	r5, lr
  403a90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403a94:	085b      	lsrs	r3, r3, #1
  403a96:	ea4f 0232 	mov.w	r2, r2, rrx
  403a9a:	ebb6 0e02 	subs.w	lr, r6, r2
  403a9e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403aa2:	bf22      	ittt	cs
  403aa4:	1ab6      	subcs	r6, r6, r2
  403aa6:	4675      	movcs	r5, lr
  403aa8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403aac:	ea55 0e06 	orrs.w	lr, r5, r6
  403ab0:	d018      	beq.n	403ae4 <__aeabi_ddiv+0x114>
  403ab2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403ab6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403aba:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403abe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403ac2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403ac6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403aca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403ace:	d1c0      	bne.n	403a52 <__aeabi_ddiv+0x82>
  403ad0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403ad4:	d10b      	bne.n	403aee <__aeabi_ddiv+0x11e>
  403ad6:	ea41 0100 	orr.w	r1, r1, r0
  403ada:	f04f 0000 	mov.w	r0, #0
  403ade:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403ae2:	e7b6      	b.n	403a52 <__aeabi_ddiv+0x82>
  403ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403ae8:	bf04      	itt	eq
  403aea:	4301      	orreq	r1, r0
  403aec:	2000      	moveq	r0, #0
  403aee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403af2:	bf88      	it	hi
  403af4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403af8:	f63f aeaf 	bhi.w	40385a <__aeabi_dmul+0xde>
  403afc:	ebb5 0c03 	subs.w	ip, r5, r3
  403b00:	bf04      	itt	eq
  403b02:	ebb6 0c02 	subseq.w	ip, r6, r2
  403b06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403b0a:	f150 0000 	adcs.w	r0, r0, #0
  403b0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403b12:	bd70      	pop	{r4, r5, r6, pc}
  403b14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403b18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403b1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403b20:	bfc2      	ittt	gt
  403b22:	ebd4 050c 	rsbsgt	r5, r4, ip
  403b26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403b2a:	bd70      	popgt	{r4, r5, r6, pc}
  403b2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403b30:	f04f 0e00 	mov.w	lr, #0
  403b34:	3c01      	subs	r4, #1
  403b36:	e690      	b.n	40385a <__aeabi_dmul+0xde>
  403b38:	ea45 0e06 	orr.w	lr, r5, r6
  403b3c:	e68d      	b.n	40385a <__aeabi_dmul+0xde>
  403b3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403b42:	ea94 0f0c 	teq	r4, ip
  403b46:	bf08      	it	eq
  403b48:	ea95 0f0c 	teqeq	r5, ip
  403b4c:	f43f af3b 	beq.w	4039c6 <__aeabi_dmul+0x24a>
  403b50:	ea94 0f0c 	teq	r4, ip
  403b54:	d10a      	bne.n	403b6c <__aeabi_ddiv+0x19c>
  403b56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403b5a:	f47f af34 	bne.w	4039c6 <__aeabi_dmul+0x24a>
  403b5e:	ea95 0f0c 	teq	r5, ip
  403b62:	f47f af25 	bne.w	4039b0 <__aeabi_dmul+0x234>
  403b66:	4610      	mov	r0, r2
  403b68:	4619      	mov	r1, r3
  403b6a:	e72c      	b.n	4039c6 <__aeabi_dmul+0x24a>
  403b6c:	ea95 0f0c 	teq	r5, ip
  403b70:	d106      	bne.n	403b80 <__aeabi_ddiv+0x1b0>
  403b72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403b76:	f43f aefd 	beq.w	403974 <__aeabi_dmul+0x1f8>
  403b7a:	4610      	mov	r0, r2
  403b7c:	4619      	mov	r1, r3
  403b7e:	e722      	b.n	4039c6 <__aeabi_dmul+0x24a>
  403b80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403b84:	bf18      	it	ne
  403b86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403b8a:	f47f aec5 	bne.w	403918 <__aeabi_dmul+0x19c>
  403b8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403b92:	f47f af0d 	bne.w	4039b0 <__aeabi_dmul+0x234>
  403b96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403b9a:	f47f aeeb 	bne.w	403974 <__aeabi_dmul+0x1f8>
  403b9e:	e712      	b.n	4039c6 <__aeabi_dmul+0x24a>

00403ba0 <__aeabi_d2f>:
  403ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403ba8:	bf24      	itt	cs
  403baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403bb2:	d90d      	bls.n	403bd0 <__aeabi_d2f+0x30>
  403bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403bc8:	bf08      	it	eq
  403bca:	f020 0001 	biceq.w	r0, r0, #1
  403bce:	4770      	bx	lr
  403bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403bd4:	d121      	bne.n	403c1a <__aeabi_d2f+0x7a>
  403bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403bda:	bfbc      	itt	lt
  403bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403be0:	4770      	bxlt	lr
  403be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403bea:	f1c2 0218 	rsb	r2, r2, #24
  403bee:	f1c2 0c20 	rsb	ip, r2, #32
  403bf2:	fa10 f30c 	lsls.w	r3, r0, ip
  403bf6:	fa20 f002 	lsr.w	r0, r0, r2
  403bfa:	bf18      	it	ne
  403bfc:	f040 0001 	orrne.w	r0, r0, #1
  403c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403c08:	fa03 fc0c 	lsl.w	ip, r3, ip
  403c0c:	ea40 000c 	orr.w	r0, r0, ip
  403c10:	fa23 f302 	lsr.w	r3, r3, r2
  403c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403c18:	e7cc      	b.n	403bb4 <__aeabi_d2f+0x14>
  403c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403c1e:	d107      	bne.n	403c30 <__aeabi_d2f+0x90>
  403c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403c24:	bf1e      	ittt	ne
  403c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403c2e:	4770      	bxne	lr
  403c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403c3c:	4770      	bx	lr
  403c3e:	bf00      	nop

00403c40 <__aeabi_uldivmod>:
  403c40:	b953      	cbnz	r3, 403c58 <__aeabi_uldivmod+0x18>
  403c42:	b94a      	cbnz	r2, 403c58 <__aeabi_uldivmod+0x18>
  403c44:	2900      	cmp	r1, #0
  403c46:	bf08      	it	eq
  403c48:	2800      	cmpeq	r0, #0
  403c4a:	bf1c      	itt	ne
  403c4c:	f04f 31ff 	movne.w	r1, #4294967295
  403c50:	f04f 30ff 	movne.w	r0, #4294967295
  403c54:	f000 b97a 	b.w	403f4c <__aeabi_idiv0>
  403c58:	f1ad 0c08 	sub.w	ip, sp, #8
  403c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403c60:	f000 f806 	bl	403c70 <__udivmoddi4>
  403c64:	f8dd e004 	ldr.w	lr, [sp, #4]
  403c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403c6c:	b004      	add	sp, #16
  403c6e:	4770      	bx	lr

00403c70 <__udivmoddi4>:
  403c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c74:	468c      	mov	ip, r1
  403c76:	460d      	mov	r5, r1
  403c78:	4604      	mov	r4, r0
  403c7a:	9e08      	ldr	r6, [sp, #32]
  403c7c:	2b00      	cmp	r3, #0
  403c7e:	d151      	bne.n	403d24 <__udivmoddi4+0xb4>
  403c80:	428a      	cmp	r2, r1
  403c82:	4617      	mov	r7, r2
  403c84:	d96d      	bls.n	403d62 <__udivmoddi4+0xf2>
  403c86:	fab2 fe82 	clz	lr, r2
  403c8a:	f1be 0f00 	cmp.w	lr, #0
  403c8e:	d00b      	beq.n	403ca8 <__udivmoddi4+0x38>
  403c90:	f1ce 0c20 	rsb	ip, lr, #32
  403c94:	fa01 f50e 	lsl.w	r5, r1, lr
  403c98:	fa20 fc0c 	lsr.w	ip, r0, ip
  403c9c:	fa02 f70e 	lsl.w	r7, r2, lr
  403ca0:	ea4c 0c05 	orr.w	ip, ip, r5
  403ca4:	fa00 f40e 	lsl.w	r4, r0, lr
  403ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403cac:	0c25      	lsrs	r5, r4, #16
  403cae:	fbbc f8fa 	udiv	r8, ip, sl
  403cb2:	fa1f f987 	uxth.w	r9, r7
  403cb6:	fb0a cc18 	mls	ip, sl, r8, ip
  403cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403cbe:	fb08 f309 	mul.w	r3, r8, r9
  403cc2:	42ab      	cmp	r3, r5
  403cc4:	d90a      	bls.n	403cdc <__udivmoddi4+0x6c>
  403cc6:	19ed      	adds	r5, r5, r7
  403cc8:	f108 32ff 	add.w	r2, r8, #4294967295
  403ccc:	f080 8123 	bcs.w	403f16 <__udivmoddi4+0x2a6>
  403cd0:	42ab      	cmp	r3, r5
  403cd2:	f240 8120 	bls.w	403f16 <__udivmoddi4+0x2a6>
  403cd6:	f1a8 0802 	sub.w	r8, r8, #2
  403cda:	443d      	add	r5, r7
  403cdc:	1aed      	subs	r5, r5, r3
  403cde:	b2a4      	uxth	r4, r4
  403ce0:	fbb5 f0fa 	udiv	r0, r5, sl
  403ce4:	fb0a 5510 	mls	r5, sl, r0, r5
  403ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403cec:	fb00 f909 	mul.w	r9, r0, r9
  403cf0:	45a1      	cmp	r9, r4
  403cf2:	d909      	bls.n	403d08 <__udivmoddi4+0x98>
  403cf4:	19e4      	adds	r4, r4, r7
  403cf6:	f100 33ff 	add.w	r3, r0, #4294967295
  403cfa:	f080 810a 	bcs.w	403f12 <__udivmoddi4+0x2a2>
  403cfe:	45a1      	cmp	r9, r4
  403d00:	f240 8107 	bls.w	403f12 <__udivmoddi4+0x2a2>
  403d04:	3802      	subs	r0, #2
  403d06:	443c      	add	r4, r7
  403d08:	eba4 0409 	sub.w	r4, r4, r9
  403d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403d10:	2100      	movs	r1, #0
  403d12:	2e00      	cmp	r6, #0
  403d14:	d061      	beq.n	403dda <__udivmoddi4+0x16a>
  403d16:	fa24 f40e 	lsr.w	r4, r4, lr
  403d1a:	2300      	movs	r3, #0
  403d1c:	6034      	str	r4, [r6, #0]
  403d1e:	6073      	str	r3, [r6, #4]
  403d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d24:	428b      	cmp	r3, r1
  403d26:	d907      	bls.n	403d38 <__udivmoddi4+0xc8>
  403d28:	2e00      	cmp	r6, #0
  403d2a:	d054      	beq.n	403dd6 <__udivmoddi4+0x166>
  403d2c:	2100      	movs	r1, #0
  403d2e:	e886 0021 	stmia.w	r6, {r0, r5}
  403d32:	4608      	mov	r0, r1
  403d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d38:	fab3 f183 	clz	r1, r3
  403d3c:	2900      	cmp	r1, #0
  403d3e:	f040 808e 	bne.w	403e5e <__udivmoddi4+0x1ee>
  403d42:	42ab      	cmp	r3, r5
  403d44:	d302      	bcc.n	403d4c <__udivmoddi4+0xdc>
  403d46:	4282      	cmp	r2, r0
  403d48:	f200 80fa 	bhi.w	403f40 <__udivmoddi4+0x2d0>
  403d4c:	1a84      	subs	r4, r0, r2
  403d4e:	eb65 0503 	sbc.w	r5, r5, r3
  403d52:	2001      	movs	r0, #1
  403d54:	46ac      	mov	ip, r5
  403d56:	2e00      	cmp	r6, #0
  403d58:	d03f      	beq.n	403dda <__udivmoddi4+0x16a>
  403d5a:	e886 1010 	stmia.w	r6, {r4, ip}
  403d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d62:	b912      	cbnz	r2, 403d6a <__udivmoddi4+0xfa>
  403d64:	2701      	movs	r7, #1
  403d66:	fbb7 f7f2 	udiv	r7, r7, r2
  403d6a:	fab7 fe87 	clz	lr, r7
  403d6e:	f1be 0f00 	cmp.w	lr, #0
  403d72:	d134      	bne.n	403dde <__udivmoddi4+0x16e>
  403d74:	1beb      	subs	r3, r5, r7
  403d76:	0c3a      	lsrs	r2, r7, #16
  403d78:	fa1f fc87 	uxth.w	ip, r7
  403d7c:	2101      	movs	r1, #1
  403d7e:	fbb3 f8f2 	udiv	r8, r3, r2
  403d82:	0c25      	lsrs	r5, r4, #16
  403d84:	fb02 3318 	mls	r3, r2, r8, r3
  403d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403d8c:	fb0c f308 	mul.w	r3, ip, r8
  403d90:	42ab      	cmp	r3, r5
  403d92:	d907      	bls.n	403da4 <__udivmoddi4+0x134>
  403d94:	19ed      	adds	r5, r5, r7
  403d96:	f108 30ff 	add.w	r0, r8, #4294967295
  403d9a:	d202      	bcs.n	403da2 <__udivmoddi4+0x132>
  403d9c:	42ab      	cmp	r3, r5
  403d9e:	f200 80d1 	bhi.w	403f44 <__udivmoddi4+0x2d4>
  403da2:	4680      	mov	r8, r0
  403da4:	1aed      	subs	r5, r5, r3
  403da6:	b2a3      	uxth	r3, r4
  403da8:	fbb5 f0f2 	udiv	r0, r5, r2
  403dac:	fb02 5510 	mls	r5, r2, r0, r5
  403db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403db4:	fb0c fc00 	mul.w	ip, ip, r0
  403db8:	45a4      	cmp	ip, r4
  403dba:	d907      	bls.n	403dcc <__udivmoddi4+0x15c>
  403dbc:	19e4      	adds	r4, r4, r7
  403dbe:	f100 33ff 	add.w	r3, r0, #4294967295
  403dc2:	d202      	bcs.n	403dca <__udivmoddi4+0x15a>
  403dc4:	45a4      	cmp	ip, r4
  403dc6:	f200 80b8 	bhi.w	403f3a <__udivmoddi4+0x2ca>
  403dca:	4618      	mov	r0, r3
  403dcc:	eba4 040c 	sub.w	r4, r4, ip
  403dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403dd4:	e79d      	b.n	403d12 <__udivmoddi4+0xa2>
  403dd6:	4631      	mov	r1, r6
  403dd8:	4630      	mov	r0, r6
  403dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403dde:	f1ce 0420 	rsb	r4, lr, #32
  403de2:	fa05 f30e 	lsl.w	r3, r5, lr
  403de6:	fa07 f70e 	lsl.w	r7, r7, lr
  403dea:	fa20 f804 	lsr.w	r8, r0, r4
  403dee:	0c3a      	lsrs	r2, r7, #16
  403df0:	fa25 f404 	lsr.w	r4, r5, r4
  403df4:	ea48 0803 	orr.w	r8, r8, r3
  403df8:	fbb4 f1f2 	udiv	r1, r4, r2
  403dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403e00:	fb02 4411 	mls	r4, r2, r1, r4
  403e04:	fa1f fc87 	uxth.w	ip, r7
  403e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403e0c:	fb01 f30c 	mul.w	r3, r1, ip
  403e10:	42ab      	cmp	r3, r5
  403e12:	fa00 f40e 	lsl.w	r4, r0, lr
  403e16:	d909      	bls.n	403e2c <__udivmoddi4+0x1bc>
  403e18:	19ed      	adds	r5, r5, r7
  403e1a:	f101 30ff 	add.w	r0, r1, #4294967295
  403e1e:	f080 808a 	bcs.w	403f36 <__udivmoddi4+0x2c6>
  403e22:	42ab      	cmp	r3, r5
  403e24:	f240 8087 	bls.w	403f36 <__udivmoddi4+0x2c6>
  403e28:	3902      	subs	r1, #2
  403e2a:	443d      	add	r5, r7
  403e2c:	1aeb      	subs	r3, r5, r3
  403e2e:	fa1f f588 	uxth.w	r5, r8
  403e32:	fbb3 f0f2 	udiv	r0, r3, r2
  403e36:	fb02 3310 	mls	r3, r2, r0, r3
  403e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403e3e:	fb00 f30c 	mul.w	r3, r0, ip
  403e42:	42ab      	cmp	r3, r5
  403e44:	d907      	bls.n	403e56 <__udivmoddi4+0x1e6>
  403e46:	19ed      	adds	r5, r5, r7
  403e48:	f100 38ff 	add.w	r8, r0, #4294967295
  403e4c:	d26f      	bcs.n	403f2e <__udivmoddi4+0x2be>
  403e4e:	42ab      	cmp	r3, r5
  403e50:	d96d      	bls.n	403f2e <__udivmoddi4+0x2be>
  403e52:	3802      	subs	r0, #2
  403e54:	443d      	add	r5, r7
  403e56:	1aeb      	subs	r3, r5, r3
  403e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403e5c:	e78f      	b.n	403d7e <__udivmoddi4+0x10e>
  403e5e:	f1c1 0720 	rsb	r7, r1, #32
  403e62:	fa22 f807 	lsr.w	r8, r2, r7
  403e66:	408b      	lsls	r3, r1
  403e68:	fa05 f401 	lsl.w	r4, r5, r1
  403e6c:	ea48 0303 	orr.w	r3, r8, r3
  403e70:	fa20 fe07 	lsr.w	lr, r0, r7
  403e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403e78:	40fd      	lsrs	r5, r7
  403e7a:	ea4e 0e04 	orr.w	lr, lr, r4
  403e7e:	fbb5 f9fc 	udiv	r9, r5, ip
  403e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403e86:	fb0c 5519 	mls	r5, ip, r9, r5
  403e8a:	fa1f f883 	uxth.w	r8, r3
  403e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403e92:	fb09 f408 	mul.w	r4, r9, r8
  403e96:	42ac      	cmp	r4, r5
  403e98:	fa02 f201 	lsl.w	r2, r2, r1
  403e9c:	fa00 fa01 	lsl.w	sl, r0, r1
  403ea0:	d908      	bls.n	403eb4 <__udivmoddi4+0x244>
  403ea2:	18ed      	adds	r5, r5, r3
  403ea4:	f109 30ff 	add.w	r0, r9, #4294967295
  403ea8:	d243      	bcs.n	403f32 <__udivmoddi4+0x2c2>
  403eaa:	42ac      	cmp	r4, r5
  403eac:	d941      	bls.n	403f32 <__udivmoddi4+0x2c2>
  403eae:	f1a9 0902 	sub.w	r9, r9, #2
  403eb2:	441d      	add	r5, r3
  403eb4:	1b2d      	subs	r5, r5, r4
  403eb6:	fa1f fe8e 	uxth.w	lr, lr
  403eba:	fbb5 f0fc 	udiv	r0, r5, ip
  403ebe:	fb0c 5510 	mls	r5, ip, r0, r5
  403ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403ec6:	fb00 f808 	mul.w	r8, r0, r8
  403eca:	45a0      	cmp	r8, r4
  403ecc:	d907      	bls.n	403ede <__udivmoddi4+0x26e>
  403ece:	18e4      	adds	r4, r4, r3
  403ed0:	f100 35ff 	add.w	r5, r0, #4294967295
  403ed4:	d229      	bcs.n	403f2a <__udivmoddi4+0x2ba>
  403ed6:	45a0      	cmp	r8, r4
  403ed8:	d927      	bls.n	403f2a <__udivmoddi4+0x2ba>
  403eda:	3802      	subs	r0, #2
  403edc:	441c      	add	r4, r3
  403ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403ee2:	eba4 0408 	sub.w	r4, r4, r8
  403ee6:	fba0 8902 	umull	r8, r9, r0, r2
  403eea:	454c      	cmp	r4, r9
  403eec:	46c6      	mov	lr, r8
  403eee:	464d      	mov	r5, r9
  403ef0:	d315      	bcc.n	403f1e <__udivmoddi4+0x2ae>
  403ef2:	d012      	beq.n	403f1a <__udivmoddi4+0x2aa>
  403ef4:	b156      	cbz	r6, 403f0c <__udivmoddi4+0x29c>
  403ef6:	ebba 030e 	subs.w	r3, sl, lr
  403efa:	eb64 0405 	sbc.w	r4, r4, r5
  403efe:	fa04 f707 	lsl.w	r7, r4, r7
  403f02:	40cb      	lsrs	r3, r1
  403f04:	431f      	orrs	r7, r3
  403f06:	40cc      	lsrs	r4, r1
  403f08:	6037      	str	r7, [r6, #0]
  403f0a:	6074      	str	r4, [r6, #4]
  403f0c:	2100      	movs	r1, #0
  403f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f12:	4618      	mov	r0, r3
  403f14:	e6f8      	b.n	403d08 <__udivmoddi4+0x98>
  403f16:	4690      	mov	r8, r2
  403f18:	e6e0      	b.n	403cdc <__udivmoddi4+0x6c>
  403f1a:	45c2      	cmp	sl, r8
  403f1c:	d2ea      	bcs.n	403ef4 <__udivmoddi4+0x284>
  403f1e:	ebb8 0e02 	subs.w	lr, r8, r2
  403f22:	eb69 0503 	sbc.w	r5, r9, r3
  403f26:	3801      	subs	r0, #1
  403f28:	e7e4      	b.n	403ef4 <__udivmoddi4+0x284>
  403f2a:	4628      	mov	r0, r5
  403f2c:	e7d7      	b.n	403ede <__udivmoddi4+0x26e>
  403f2e:	4640      	mov	r0, r8
  403f30:	e791      	b.n	403e56 <__udivmoddi4+0x1e6>
  403f32:	4681      	mov	r9, r0
  403f34:	e7be      	b.n	403eb4 <__udivmoddi4+0x244>
  403f36:	4601      	mov	r1, r0
  403f38:	e778      	b.n	403e2c <__udivmoddi4+0x1bc>
  403f3a:	3802      	subs	r0, #2
  403f3c:	443c      	add	r4, r7
  403f3e:	e745      	b.n	403dcc <__udivmoddi4+0x15c>
  403f40:	4608      	mov	r0, r1
  403f42:	e708      	b.n	403d56 <__udivmoddi4+0xe6>
  403f44:	f1a8 0802 	sub.w	r8, r8, #2
  403f48:	443d      	add	r5, r7
  403f4a:	e72b      	b.n	403da4 <__udivmoddi4+0x134>

00403f4c <__aeabi_idiv0>:
  403f4c:	4770      	bx	lr
  403f4e:	bf00      	nop

00403f50 <__libc_init_array>:
  403f50:	b570      	push	{r4, r5, r6, lr}
  403f52:	4e0f      	ldr	r6, [pc, #60]	; (403f90 <__libc_init_array+0x40>)
  403f54:	4d0f      	ldr	r5, [pc, #60]	; (403f94 <__libc_init_array+0x44>)
  403f56:	1b76      	subs	r6, r6, r5
  403f58:	10b6      	asrs	r6, r6, #2
  403f5a:	bf18      	it	ne
  403f5c:	2400      	movne	r4, #0
  403f5e:	d005      	beq.n	403f6c <__libc_init_array+0x1c>
  403f60:	3401      	adds	r4, #1
  403f62:	f855 3b04 	ldr.w	r3, [r5], #4
  403f66:	4798      	blx	r3
  403f68:	42a6      	cmp	r6, r4
  403f6a:	d1f9      	bne.n	403f60 <__libc_init_array+0x10>
  403f6c:	4e0a      	ldr	r6, [pc, #40]	; (403f98 <__libc_init_array+0x48>)
  403f6e:	4d0b      	ldr	r5, [pc, #44]	; (403f9c <__libc_init_array+0x4c>)
  403f70:	1b76      	subs	r6, r6, r5
  403f72:	f004 fda9 	bl	408ac8 <_init>
  403f76:	10b6      	asrs	r6, r6, #2
  403f78:	bf18      	it	ne
  403f7a:	2400      	movne	r4, #0
  403f7c:	d006      	beq.n	403f8c <__libc_init_array+0x3c>
  403f7e:	3401      	adds	r4, #1
  403f80:	f855 3b04 	ldr.w	r3, [r5], #4
  403f84:	4798      	blx	r3
  403f86:	42a6      	cmp	r6, r4
  403f88:	d1f9      	bne.n	403f7e <__libc_init_array+0x2e>
  403f8a:	bd70      	pop	{r4, r5, r6, pc}
  403f8c:	bd70      	pop	{r4, r5, r6, pc}
  403f8e:	bf00      	nop
  403f90:	00408ad4 	.word	0x00408ad4
  403f94:	00408ad4 	.word	0x00408ad4
  403f98:	00408adc 	.word	0x00408adc
  403f9c:	00408ad4 	.word	0x00408ad4

00403fa0 <memset>:
  403fa0:	b470      	push	{r4, r5, r6}
  403fa2:	0786      	lsls	r6, r0, #30
  403fa4:	d046      	beq.n	404034 <memset+0x94>
  403fa6:	1e54      	subs	r4, r2, #1
  403fa8:	2a00      	cmp	r2, #0
  403faa:	d041      	beq.n	404030 <memset+0x90>
  403fac:	b2ca      	uxtb	r2, r1
  403fae:	4603      	mov	r3, r0
  403fb0:	e002      	b.n	403fb8 <memset+0x18>
  403fb2:	f114 34ff 	adds.w	r4, r4, #4294967295
  403fb6:	d33b      	bcc.n	404030 <memset+0x90>
  403fb8:	f803 2b01 	strb.w	r2, [r3], #1
  403fbc:	079d      	lsls	r5, r3, #30
  403fbe:	d1f8      	bne.n	403fb2 <memset+0x12>
  403fc0:	2c03      	cmp	r4, #3
  403fc2:	d92e      	bls.n	404022 <memset+0x82>
  403fc4:	b2cd      	uxtb	r5, r1
  403fc6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403fca:	2c0f      	cmp	r4, #15
  403fcc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403fd0:	d919      	bls.n	404006 <memset+0x66>
  403fd2:	f103 0210 	add.w	r2, r3, #16
  403fd6:	4626      	mov	r6, r4
  403fd8:	3e10      	subs	r6, #16
  403fda:	2e0f      	cmp	r6, #15
  403fdc:	f842 5c10 	str.w	r5, [r2, #-16]
  403fe0:	f842 5c0c 	str.w	r5, [r2, #-12]
  403fe4:	f842 5c08 	str.w	r5, [r2, #-8]
  403fe8:	f842 5c04 	str.w	r5, [r2, #-4]
  403fec:	f102 0210 	add.w	r2, r2, #16
  403ff0:	d8f2      	bhi.n	403fd8 <memset+0x38>
  403ff2:	f1a4 0210 	sub.w	r2, r4, #16
  403ff6:	f022 020f 	bic.w	r2, r2, #15
  403ffa:	f004 040f 	and.w	r4, r4, #15
  403ffe:	3210      	adds	r2, #16
  404000:	2c03      	cmp	r4, #3
  404002:	4413      	add	r3, r2
  404004:	d90d      	bls.n	404022 <memset+0x82>
  404006:	461e      	mov	r6, r3
  404008:	4622      	mov	r2, r4
  40400a:	3a04      	subs	r2, #4
  40400c:	2a03      	cmp	r2, #3
  40400e:	f846 5b04 	str.w	r5, [r6], #4
  404012:	d8fa      	bhi.n	40400a <memset+0x6a>
  404014:	1f22      	subs	r2, r4, #4
  404016:	f022 0203 	bic.w	r2, r2, #3
  40401a:	3204      	adds	r2, #4
  40401c:	4413      	add	r3, r2
  40401e:	f004 0403 	and.w	r4, r4, #3
  404022:	b12c      	cbz	r4, 404030 <memset+0x90>
  404024:	b2c9      	uxtb	r1, r1
  404026:	441c      	add	r4, r3
  404028:	f803 1b01 	strb.w	r1, [r3], #1
  40402c:	429c      	cmp	r4, r3
  40402e:	d1fb      	bne.n	404028 <memset+0x88>
  404030:	bc70      	pop	{r4, r5, r6}
  404032:	4770      	bx	lr
  404034:	4614      	mov	r4, r2
  404036:	4603      	mov	r3, r0
  404038:	e7c2      	b.n	403fc0 <memset+0x20>
  40403a:	bf00      	nop

0040403c <sprintf>:
  40403c:	b40e      	push	{r1, r2, r3}
  40403e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404040:	b09c      	sub	sp, #112	; 0x70
  404042:	ab21      	add	r3, sp, #132	; 0x84
  404044:	490f      	ldr	r1, [pc, #60]	; (404084 <sprintf+0x48>)
  404046:	f853 2b04 	ldr.w	r2, [r3], #4
  40404a:	9301      	str	r3, [sp, #4]
  40404c:	4605      	mov	r5, r0
  40404e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404052:	6808      	ldr	r0, [r1, #0]
  404054:	9502      	str	r5, [sp, #8]
  404056:	f44f 7702 	mov.w	r7, #520	; 0x208
  40405a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40405e:	a902      	add	r1, sp, #8
  404060:	9506      	str	r5, [sp, #24]
  404062:	f8ad 7014 	strh.w	r7, [sp, #20]
  404066:	9404      	str	r4, [sp, #16]
  404068:	9407      	str	r4, [sp, #28]
  40406a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40406e:	f000 f80b 	bl	404088 <_svfprintf_r>
  404072:	9b02      	ldr	r3, [sp, #8]
  404074:	2200      	movs	r2, #0
  404076:	701a      	strb	r2, [r3, #0]
  404078:	b01c      	add	sp, #112	; 0x70
  40407a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40407e:	b003      	add	sp, #12
  404080:	4770      	bx	lr
  404082:	bf00      	nop
  404084:	20400030 	.word	0x20400030

00404088 <_svfprintf_r>:
  404088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40408c:	b0c3      	sub	sp, #268	; 0x10c
  40408e:	460c      	mov	r4, r1
  404090:	910b      	str	r1, [sp, #44]	; 0x2c
  404092:	4692      	mov	sl, r2
  404094:	930f      	str	r3, [sp, #60]	; 0x3c
  404096:	900c      	str	r0, [sp, #48]	; 0x30
  404098:	f002 fa0e 	bl	4064b8 <_localeconv_r>
  40409c:	6803      	ldr	r3, [r0, #0]
  40409e:	931a      	str	r3, [sp, #104]	; 0x68
  4040a0:	4618      	mov	r0, r3
  4040a2:	f003 f8ed 	bl	407280 <strlen>
  4040a6:	89a3      	ldrh	r3, [r4, #12]
  4040a8:	9019      	str	r0, [sp, #100]	; 0x64
  4040aa:	0619      	lsls	r1, r3, #24
  4040ac:	d503      	bpl.n	4040b6 <_svfprintf_r+0x2e>
  4040ae:	6923      	ldr	r3, [r4, #16]
  4040b0:	2b00      	cmp	r3, #0
  4040b2:	f001 8003 	beq.w	4050bc <_svfprintf_r+0x1034>
  4040b6:	2300      	movs	r3, #0
  4040b8:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4040bc:	9313      	str	r3, [sp, #76]	; 0x4c
  4040be:	9315      	str	r3, [sp, #84]	; 0x54
  4040c0:	9314      	str	r3, [sp, #80]	; 0x50
  4040c2:	9327      	str	r3, [sp, #156]	; 0x9c
  4040c4:	9326      	str	r3, [sp, #152]	; 0x98
  4040c6:	9318      	str	r3, [sp, #96]	; 0x60
  4040c8:	931b      	str	r3, [sp, #108]	; 0x6c
  4040ca:	9309      	str	r3, [sp, #36]	; 0x24
  4040cc:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4040d0:	46c8      	mov	r8, r9
  4040d2:	9316      	str	r3, [sp, #88]	; 0x58
  4040d4:	9317      	str	r3, [sp, #92]	; 0x5c
  4040d6:	f89a 3000 	ldrb.w	r3, [sl]
  4040da:	4654      	mov	r4, sl
  4040dc:	b1e3      	cbz	r3, 404118 <_svfprintf_r+0x90>
  4040de:	2b25      	cmp	r3, #37	; 0x25
  4040e0:	d102      	bne.n	4040e8 <_svfprintf_r+0x60>
  4040e2:	e019      	b.n	404118 <_svfprintf_r+0x90>
  4040e4:	2b25      	cmp	r3, #37	; 0x25
  4040e6:	d003      	beq.n	4040f0 <_svfprintf_r+0x68>
  4040e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4040ec:	2b00      	cmp	r3, #0
  4040ee:	d1f9      	bne.n	4040e4 <_svfprintf_r+0x5c>
  4040f0:	eba4 050a 	sub.w	r5, r4, sl
  4040f4:	b185      	cbz	r5, 404118 <_svfprintf_r+0x90>
  4040f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4040fa:	f8c8 a000 	str.w	sl, [r8]
  4040fe:	3301      	adds	r3, #1
  404100:	442a      	add	r2, r5
  404102:	2b07      	cmp	r3, #7
  404104:	f8c8 5004 	str.w	r5, [r8, #4]
  404108:	9227      	str	r2, [sp, #156]	; 0x9c
  40410a:	9326      	str	r3, [sp, #152]	; 0x98
  40410c:	dc7f      	bgt.n	40420e <_svfprintf_r+0x186>
  40410e:	f108 0808 	add.w	r8, r8, #8
  404112:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404114:	442b      	add	r3, r5
  404116:	9309      	str	r3, [sp, #36]	; 0x24
  404118:	7823      	ldrb	r3, [r4, #0]
  40411a:	2b00      	cmp	r3, #0
  40411c:	d07f      	beq.n	40421e <_svfprintf_r+0x196>
  40411e:	2300      	movs	r3, #0
  404120:	461a      	mov	r2, r3
  404122:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404126:	4619      	mov	r1, r3
  404128:	930d      	str	r3, [sp, #52]	; 0x34
  40412a:	469b      	mov	fp, r3
  40412c:	f04f 30ff 	mov.w	r0, #4294967295
  404130:	7863      	ldrb	r3, [r4, #1]
  404132:	900a      	str	r0, [sp, #40]	; 0x28
  404134:	f104 0a01 	add.w	sl, r4, #1
  404138:	f10a 0a01 	add.w	sl, sl, #1
  40413c:	f1a3 0020 	sub.w	r0, r3, #32
  404140:	2858      	cmp	r0, #88	; 0x58
  404142:	f200 83c1 	bhi.w	4048c8 <_svfprintf_r+0x840>
  404146:	e8df f010 	tbh	[pc, r0, lsl #1]
  40414a:	0238      	.short	0x0238
  40414c:	03bf03bf 	.word	0x03bf03bf
  404150:	03bf0240 	.word	0x03bf0240
  404154:	03bf03bf 	.word	0x03bf03bf
  404158:	03bf03bf 	.word	0x03bf03bf
  40415c:	024503bf 	.word	0x024503bf
  404160:	03bf0203 	.word	0x03bf0203
  404164:	026b005d 	.word	0x026b005d
  404168:	028603bf 	.word	0x028603bf
  40416c:	039d039d 	.word	0x039d039d
  404170:	039d039d 	.word	0x039d039d
  404174:	039d039d 	.word	0x039d039d
  404178:	039d039d 	.word	0x039d039d
  40417c:	03bf039d 	.word	0x03bf039d
  404180:	03bf03bf 	.word	0x03bf03bf
  404184:	03bf03bf 	.word	0x03bf03bf
  404188:	03bf03bf 	.word	0x03bf03bf
  40418c:	03bf03bf 	.word	0x03bf03bf
  404190:	033703bf 	.word	0x033703bf
  404194:	03bf0357 	.word	0x03bf0357
  404198:	03bf0357 	.word	0x03bf0357
  40419c:	03bf03bf 	.word	0x03bf03bf
  4041a0:	039803bf 	.word	0x039803bf
  4041a4:	03bf03bf 	.word	0x03bf03bf
  4041a8:	03bf03ad 	.word	0x03bf03ad
  4041ac:	03bf03bf 	.word	0x03bf03bf
  4041b0:	03bf03bf 	.word	0x03bf03bf
  4041b4:	03bf0259 	.word	0x03bf0259
  4041b8:	031e03bf 	.word	0x031e03bf
  4041bc:	03bf03bf 	.word	0x03bf03bf
  4041c0:	03bf03bf 	.word	0x03bf03bf
  4041c4:	03bf03bf 	.word	0x03bf03bf
  4041c8:	03bf03bf 	.word	0x03bf03bf
  4041cc:	03bf03bf 	.word	0x03bf03bf
  4041d0:	02db02c6 	.word	0x02db02c6
  4041d4:	03570357 	.word	0x03570357
  4041d8:	028b0357 	.word	0x028b0357
  4041dc:	03bf02db 	.word	0x03bf02db
  4041e0:	029003bf 	.word	0x029003bf
  4041e4:	029d03bf 	.word	0x029d03bf
  4041e8:	02b401cc 	.word	0x02b401cc
  4041ec:	03bf0208 	.word	0x03bf0208
  4041f0:	03bf01e1 	.word	0x03bf01e1
  4041f4:	03bf007e 	.word	0x03bf007e
  4041f8:	020d03bf 	.word	0x020d03bf
  4041fc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4041fe:	930f      	str	r3, [sp, #60]	; 0x3c
  404200:	4240      	negs	r0, r0
  404202:	900d      	str	r0, [sp, #52]	; 0x34
  404204:	f04b 0b04 	orr.w	fp, fp, #4
  404208:	f89a 3000 	ldrb.w	r3, [sl]
  40420c:	e794      	b.n	404138 <_svfprintf_r+0xb0>
  40420e:	aa25      	add	r2, sp, #148	; 0x94
  404210:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404212:	980c      	ldr	r0, [sp, #48]	; 0x30
  404214:	f003 f8a2 	bl	40735c <__ssprint_r>
  404218:	b940      	cbnz	r0, 40422c <_svfprintf_r+0x1a4>
  40421a:	46c8      	mov	r8, r9
  40421c:	e779      	b.n	404112 <_svfprintf_r+0x8a>
  40421e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404220:	b123      	cbz	r3, 40422c <_svfprintf_r+0x1a4>
  404222:	980c      	ldr	r0, [sp, #48]	; 0x30
  404224:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404226:	aa25      	add	r2, sp, #148	; 0x94
  404228:	f003 f898 	bl	40735c <__ssprint_r>
  40422c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40422e:	899b      	ldrh	r3, [r3, #12]
  404230:	f013 0f40 	tst.w	r3, #64	; 0x40
  404234:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404236:	bf18      	it	ne
  404238:	f04f 33ff 	movne.w	r3, #4294967295
  40423c:	9309      	str	r3, [sp, #36]	; 0x24
  40423e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404240:	b043      	add	sp, #268	; 0x10c
  404242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404246:	f01b 0f20 	tst.w	fp, #32
  40424a:	9311      	str	r3, [sp, #68]	; 0x44
  40424c:	f040 81dd 	bne.w	40460a <_svfprintf_r+0x582>
  404250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404252:	f01b 0f10 	tst.w	fp, #16
  404256:	4613      	mov	r3, r2
  404258:	f040 856e 	bne.w	404d38 <_svfprintf_r+0xcb0>
  40425c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404260:	f000 856a 	beq.w	404d38 <_svfprintf_r+0xcb0>
  404264:	8814      	ldrh	r4, [r2, #0]
  404266:	3204      	adds	r2, #4
  404268:	2500      	movs	r5, #0
  40426a:	2301      	movs	r3, #1
  40426c:	920f      	str	r2, [sp, #60]	; 0x3c
  40426e:	2700      	movs	r7, #0
  404270:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404274:	990a      	ldr	r1, [sp, #40]	; 0x28
  404276:	1c4a      	adds	r2, r1, #1
  404278:	f000 8265 	beq.w	404746 <_svfprintf_r+0x6be>
  40427c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404280:	9207      	str	r2, [sp, #28]
  404282:	ea54 0205 	orrs.w	r2, r4, r5
  404286:	f040 8264 	bne.w	404752 <_svfprintf_r+0x6ca>
  40428a:	2900      	cmp	r1, #0
  40428c:	f040 843c 	bne.w	404b08 <_svfprintf_r+0xa80>
  404290:	2b00      	cmp	r3, #0
  404292:	f040 84d7 	bne.w	404c44 <_svfprintf_r+0xbbc>
  404296:	f01b 0301 	ands.w	r3, fp, #1
  40429a:	930e      	str	r3, [sp, #56]	; 0x38
  40429c:	f000 8604 	beq.w	404ea8 <_svfprintf_r+0xe20>
  4042a0:	ae42      	add	r6, sp, #264	; 0x108
  4042a2:	2330      	movs	r3, #48	; 0x30
  4042a4:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4042a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4042aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4042ac:	4293      	cmp	r3, r2
  4042ae:	bfb8      	it	lt
  4042b0:	4613      	movlt	r3, r2
  4042b2:	9308      	str	r3, [sp, #32]
  4042b4:	2300      	movs	r3, #0
  4042b6:	9312      	str	r3, [sp, #72]	; 0x48
  4042b8:	b117      	cbz	r7, 4042c0 <_svfprintf_r+0x238>
  4042ba:	9b08      	ldr	r3, [sp, #32]
  4042bc:	3301      	adds	r3, #1
  4042be:	9308      	str	r3, [sp, #32]
  4042c0:	9b07      	ldr	r3, [sp, #28]
  4042c2:	f013 0302 	ands.w	r3, r3, #2
  4042c6:	9310      	str	r3, [sp, #64]	; 0x40
  4042c8:	d002      	beq.n	4042d0 <_svfprintf_r+0x248>
  4042ca:	9b08      	ldr	r3, [sp, #32]
  4042cc:	3302      	adds	r3, #2
  4042ce:	9308      	str	r3, [sp, #32]
  4042d0:	9b07      	ldr	r3, [sp, #28]
  4042d2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4042d6:	f040 830e 	bne.w	4048f6 <_svfprintf_r+0x86e>
  4042da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4042dc:	9a08      	ldr	r2, [sp, #32]
  4042de:	eba3 0b02 	sub.w	fp, r3, r2
  4042e2:	f1bb 0f00 	cmp.w	fp, #0
  4042e6:	f340 8306 	ble.w	4048f6 <_svfprintf_r+0x86e>
  4042ea:	f1bb 0f10 	cmp.w	fp, #16
  4042ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4042f2:	dd29      	ble.n	404348 <_svfprintf_r+0x2c0>
  4042f4:	4643      	mov	r3, r8
  4042f6:	4621      	mov	r1, r4
  4042f8:	46a8      	mov	r8, r5
  4042fa:	2710      	movs	r7, #16
  4042fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4042fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404300:	e006      	b.n	404310 <_svfprintf_r+0x288>
  404302:	f1ab 0b10 	sub.w	fp, fp, #16
  404306:	f1bb 0f10 	cmp.w	fp, #16
  40430a:	f103 0308 	add.w	r3, r3, #8
  40430e:	dd18      	ble.n	404342 <_svfprintf_r+0x2ba>
  404310:	3201      	adds	r2, #1
  404312:	48b7      	ldr	r0, [pc, #732]	; (4045f0 <_svfprintf_r+0x568>)
  404314:	9226      	str	r2, [sp, #152]	; 0x98
  404316:	3110      	adds	r1, #16
  404318:	2a07      	cmp	r2, #7
  40431a:	9127      	str	r1, [sp, #156]	; 0x9c
  40431c:	e883 0081 	stmia.w	r3, {r0, r7}
  404320:	ddef      	ble.n	404302 <_svfprintf_r+0x27a>
  404322:	aa25      	add	r2, sp, #148	; 0x94
  404324:	4629      	mov	r1, r5
  404326:	4620      	mov	r0, r4
  404328:	f003 f818 	bl	40735c <__ssprint_r>
  40432c:	2800      	cmp	r0, #0
  40432e:	f47f af7d 	bne.w	40422c <_svfprintf_r+0x1a4>
  404332:	f1ab 0b10 	sub.w	fp, fp, #16
  404336:	f1bb 0f10 	cmp.w	fp, #16
  40433a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40433c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40433e:	464b      	mov	r3, r9
  404340:	dce6      	bgt.n	404310 <_svfprintf_r+0x288>
  404342:	4645      	mov	r5, r8
  404344:	460c      	mov	r4, r1
  404346:	4698      	mov	r8, r3
  404348:	3201      	adds	r2, #1
  40434a:	4ba9      	ldr	r3, [pc, #676]	; (4045f0 <_svfprintf_r+0x568>)
  40434c:	9226      	str	r2, [sp, #152]	; 0x98
  40434e:	445c      	add	r4, fp
  404350:	2a07      	cmp	r2, #7
  404352:	9427      	str	r4, [sp, #156]	; 0x9c
  404354:	e888 0808 	stmia.w	r8, {r3, fp}
  404358:	f300 8498 	bgt.w	404c8c <_svfprintf_r+0xc04>
  40435c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404360:	f108 0808 	add.w	r8, r8, #8
  404364:	b177      	cbz	r7, 404384 <_svfprintf_r+0x2fc>
  404366:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404368:	3301      	adds	r3, #1
  40436a:	3401      	adds	r4, #1
  40436c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404370:	2201      	movs	r2, #1
  404372:	2b07      	cmp	r3, #7
  404374:	9427      	str	r4, [sp, #156]	; 0x9c
  404376:	9326      	str	r3, [sp, #152]	; 0x98
  404378:	e888 0006 	stmia.w	r8, {r1, r2}
  40437c:	f300 83db 	bgt.w	404b36 <_svfprintf_r+0xaae>
  404380:	f108 0808 	add.w	r8, r8, #8
  404384:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404386:	b16b      	cbz	r3, 4043a4 <_svfprintf_r+0x31c>
  404388:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40438a:	3301      	adds	r3, #1
  40438c:	3402      	adds	r4, #2
  40438e:	a91e      	add	r1, sp, #120	; 0x78
  404390:	2202      	movs	r2, #2
  404392:	2b07      	cmp	r3, #7
  404394:	9427      	str	r4, [sp, #156]	; 0x9c
  404396:	9326      	str	r3, [sp, #152]	; 0x98
  404398:	e888 0006 	stmia.w	r8, {r1, r2}
  40439c:	f300 83d6 	bgt.w	404b4c <_svfprintf_r+0xac4>
  4043a0:	f108 0808 	add.w	r8, r8, #8
  4043a4:	2d80      	cmp	r5, #128	; 0x80
  4043a6:	f000 8315 	beq.w	4049d4 <_svfprintf_r+0x94c>
  4043aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4043ae:	1a9f      	subs	r7, r3, r2
  4043b0:	2f00      	cmp	r7, #0
  4043b2:	dd36      	ble.n	404422 <_svfprintf_r+0x39a>
  4043b4:	2f10      	cmp	r7, #16
  4043b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043b8:	4d8e      	ldr	r5, [pc, #568]	; (4045f4 <_svfprintf_r+0x56c>)
  4043ba:	dd27      	ble.n	40440c <_svfprintf_r+0x384>
  4043bc:	4642      	mov	r2, r8
  4043be:	4621      	mov	r1, r4
  4043c0:	46b0      	mov	r8, r6
  4043c2:	f04f 0b10 	mov.w	fp, #16
  4043c6:	462e      	mov	r6, r5
  4043c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4043ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4043cc:	e004      	b.n	4043d8 <_svfprintf_r+0x350>
  4043ce:	3f10      	subs	r7, #16
  4043d0:	2f10      	cmp	r7, #16
  4043d2:	f102 0208 	add.w	r2, r2, #8
  4043d6:	dd15      	ble.n	404404 <_svfprintf_r+0x37c>
  4043d8:	3301      	adds	r3, #1
  4043da:	3110      	adds	r1, #16
  4043dc:	2b07      	cmp	r3, #7
  4043de:	9127      	str	r1, [sp, #156]	; 0x9c
  4043e0:	9326      	str	r3, [sp, #152]	; 0x98
  4043e2:	e882 0840 	stmia.w	r2, {r6, fp}
  4043e6:	ddf2      	ble.n	4043ce <_svfprintf_r+0x346>
  4043e8:	aa25      	add	r2, sp, #148	; 0x94
  4043ea:	4629      	mov	r1, r5
  4043ec:	4620      	mov	r0, r4
  4043ee:	f002 ffb5 	bl	40735c <__ssprint_r>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	f47f af1a 	bne.w	40422c <_svfprintf_r+0x1a4>
  4043f8:	3f10      	subs	r7, #16
  4043fa:	2f10      	cmp	r7, #16
  4043fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4043fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404400:	464a      	mov	r2, r9
  404402:	dce9      	bgt.n	4043d8 <_svfprintf_r+0x350>
  404404:	4635      	mov	r5, r6
  404406:	460c      	mov	r4, r1
  404408:	4646      	mov	r6, r8
  40440a:	4690      	mov	r8, r2
  40440c:	3301      	adds	r3, #1
  40440e:	443c      	add	r4, r7
  404410:	2b07      	cmp	r3, #7
  404412:	9427      	str	r4, [sp, #156]	; 0x9c
  404414:	9326      	str	r3, [sp, #152]	; 0x98
  404416:	e888 00a0 	stmia.w	r8, {r5, r7}
  40441a:	f300 8381 	bgt.w	404b20 <_svfprintf_r+0xa98>
  40441e:	f108 0808 	add.w	r8, r8, #8
  404422:	9b07      	ldr	r3, [sp, #28]
  404424:	05df      	lsls	r7, r3, #23
  404426:	f100 8268 	bmi.w	4048fa <_svfprintf_r+0x872>
  40442a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40442c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40442e:	f8c8 6000 	str.w	r6, [r8]
  404432:	3301      	adds	r3, #1
  404434:	440c      	add	r4, r1
  404436:	2b07      	cmp	r3, #7
  404438:	9427      	str	r4, [sp, #156]	; 0x9c
  40443a:	f8c8 1004 	str.w	r1, [r8, #4]
  40443e:	9326      	str	r3, [sp, #152]	; 0x98
  404440:	f300 834d 	bgt.w	404ade <_svfprintf_r+0xa56>
  404444:	f108 0808 	add.w	r8, r8, #8
  404448:	9b07      	ldr	r3, [sp, #28]
  40444a:	075b      	lsls	r3, r3, #29
  40444c:	d53a      	bpl.n	4044c4 <_svfprintf_r+0x43c>
  40444e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404450:	9a08      	ldr	r2, [sp, #32]
  404452:	1a9d      	subs	r5, r3, r2
  404454:	2d00      	cmp	r5, #0
  404456:	dd35      	ble.n	4044c4 <_svfprintf_r+0x43c>
  404458:	2d10      	cmp	r5, #16
  40445a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40445c:	dd20      	ble.n	4044a0 <_svfprintf_r+0x418>
  40445e:	2610      	movs	r6, #16
  404460:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404462:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404466:	e004      	b.n	404472 <_svfprintf_r+0x3ea>
  404468:	3d10      	subs	r5, #16
  40446a:	2d10      	cmp	r5, #16
  40446c:	f108 0808 	add.w	r8, r8, #8
  404470:	dd16      	ble.n	4044a0 <_svfprintf_r+0x418>
  404472:	3301      	adds	r3, #1
  404474:	4a5e      	ldr	r2, [pc, #376]	; (4045f0 <_svfprintf_r+0x568>)
  404476:	9326      	str	r3, [sp, #152]	; 0x98
  404478:	3410      	adds	r4, #16
  40447a:	2b07      	cmp	r3, #7
  40447c:	9427      	str	r4, [sp, #156]	; 0x9c
  40447e:	e888 0044 	stmia.w	r8, {r2, r6}
  404482:	ddf1      	ble.n	404468 <_svfprintf_r+0x3e0>
  404484:	aa25      	add	r2, sp, #148	; 0x94
  404486:	4659      	mov	r1, fp
  404488:	4638      	mov	r0, r7
  40448a:	f002 ff67 	bl	40735c <__ssprint_r>
  40448e:	2800      	cmp	r0, #0
  404490:	f47f aecc 	bne.w	40422c <_svfprintf_r+0x1a4>
  404494:	3d10      	subs	r5, #16
  404496:	2d10      	cmp	r5, #16
  404498:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40449a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40449c:	46c8      	mov	r8, r9
  40449e:	dce8      	bgt.n	404472 <_svfprintf_r+0x3ea>
  4044a0:	3301      	adds	r3, #1
  4044a2:	4a53      	ldr	r2, [pc, #332]	; (4045f0 <_svfprintf_r+0x568>)
  4044a4:	9326      	str	r3, [sp, #152]	; 0x98
  4044a6:	442c      	add	r4, r5
  4044a8:	2b07      	cmp	r3, #7
  4044aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4044ac:	e888 0024 	stmia.w	r8, {r2, r5}
  4044b0:	dd08      	ble.n	4044c4 <_svfprintf_r+0x43c>
  4044b2:	aa25      	add	r2, sp, #148	; 0x94
  4044b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044b8:	f002 ff50 	bl	40735c <__ssprint_r>
  4044bc:	2800      	cmp	r0, #0
  4044be:	f47f aeb5 	bne.w	40422c <_svfprintf_r+0x1a4>
  4044c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4044c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4044c8:	9908      	ldr	r1, [sp, #32]
  4044ca:	428a      	cmp	r2, r1
  4044cc:	bfac      	ite	ge
  4044ce:	189b      	addge	r3, r3, r2
  4044d0:	185b      	addlt	r3, r3, r1
  4044d2:	9309      	str	r3, [sp, #36]	; 0x24
  4044d4:	2c00      	cmp	r4, #0
  4044d6:	f040 830d 	bne.w	404af4 <_svfprintf_r+0xa6c>
  4044da:	2300      	movs	r3, #0
  4044dc:	9326      	str	r3, [sp, #152]	; 0x98
  4044de:	46c8      	mov	r8, r9
  4044e0:	e5f9      	b.n	4040d6 <_svfprintf_r+0x4e>
  4044e2:	9311      	str	r3, [sp, #68]	; 0x44
  4044e4:	f01b 0320 	ands.w	r3, fp, #32
  4044e8:	f040 81e3 	bne.w	4048b2 <_svfprintf_r+0x82a>
  4044ec:	f01b 0210 	ands.w	r2, fp, #16
  4044f0:	f040 842e 	bne.w	404d50 <_svfprintf_r+0xcc8>
  4044f4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4044f8:	f000 842a 	beq.w	404d50 <_svfprintf_r+0xcc8>
  4044fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4044fe:	4613      	mov	r3, r2
  404500:	460a      	mov	r2, r1
  404502:	3204      	adds	r2, #4
  404504:	880c      	ldrh	r4, [r1, #0]
  404506:	920f      	str	r2, [sp, #60]	; 0x3c
  404508:	2500      	movs	r5, #0
  40450a:	e6b0      	b.n	40426e <_svfprintf_r+0x1e6>
  40450c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40450e:	9311      	str	r3, [sp, #68]	; 0x44
  404510:	6816      	ldr	r6, [r2, #0]
  404512:	2400      	movs	r4, #0
  404514:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404518:	1d15      	adds	r5, r2, #4
  40451a:	2e00      	cmp	r6, #0
  40451c:	f000 86a7 	beq.w	40526e <_svfprintf_r+0x11e6>
  404520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404522:	1c53      	adds	r3, r2, #1
  404524:	f000 8609 	beq.w	40513a <_svfprintf_r+0x10b2>
  404528:	4621      	mov	r1, r4
  40452a:	4630      	mov	r0, r6
  40452c:	f002 fa88 	bl	406a40 <memchr>
  404530:	2800      	cmp	r0, #0
  404532:	f000 86e1 	beq.w	4052f8 <_svfprintf_r+0x1270>
  404536:	1b83      	subs	r3, r0, r6
  404538:	930e      	str	r3, [sp, #56]	; 0x38
  40453a:	940a      	str	r4, [sp, #40]	; 0x28
  40453c:	950f      	str	r5, [sp, #60]	; 0x3c
  40453e:	f8cd b01c 	str.w	fp, [sp, #28]
  404542:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404546:	9308      	str	r3, [sp, #32]
  404548:	9412      	str	r4, [sp, #72]	; 0x48
  40454a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40454e:	e6b3      	b.n	4042b8 <_svfprintf_r+0x230>
  404550:	f89a 3000 	ldrb.w	r3, [sl]
  404554:	2201      	movs	r2, #1
  404556:	212b      	movs	r1, #43	; 0x2b
  404558:	e5ee      	b.n	404138 <_svfprintf_r+0xb0>
  40455a:	f04b 0b20 	orr.w	fp, fp, #32
  40455e:	f89a 3000 	ldrb.w	r3, [sl]
  404562:	e5e9      	b.n	404138 <_svfprintf_r+0xb0>
  404564:	9311      	str	r3, [sp, #68]	; 0x44
  404566:	2a00      	cmp	r2, #0
  404568:	f040 8795 	bne.w	405496 <_svfprintf_r+0x140e>
  40456c:	4b22      	ldr	r3, [pc, #136]	; (4045f8 <_svfprintf_r+0x570>)
  40456e:	9318      	str	r3, [sp, #96]	; 0x60
  404570:	f01b 0f20 	tst.w	fp, #32
  404574:	f040 8111 	bne.w	40479a <_svfprintf_r+0x712>
  404578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40457a:	f01b 0f10 	tst.w	fp, #16
  40457e:	4613      	mov	r3, r2
  404580:	f040 83e1 	bne.w	404d46 <_svfprintf_r+0xcbe>
  404584:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404588:	f000 83dd 	beq.w	404d46 <_svfprintf_r+0xcbe>
  40458c:	3304      	adds	r3, #4
  40458e:	8814      	ldrh	r4, [r2, #0]
  404590:	930f      	str	r3, [sp, #60]	; 0x3c
  404592:	2500      	movs	r5, #0
  404594:	f01b 0f01 	tst.w	fp, #1
  404598:	f000 810c 	beq.w	4047b4 <_svfprintf_r+0x72c>
  40459c:	ea54 0305 	orrs.w	r3, r4, r5
  4045a0:	f000 8108 	beq.w	4047b4 <_svfprintf_r+0x72c>
  4045a4:	2330      	movs	r3, #48	; 0x30
  4045a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4045aa:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4045ae:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4045b2:	f04b 0b02 	orr.w	fp, fp, #2
  4045b6:	2302      	movs	r3, #2
  4045b8:	e659      	b.n	40426e <_svfprintf_r+0x1e6>
  4045ba:	f89a 3000 	ldrb.w	r3, [sl]
  4045be:	2900      	cmp	r1, #0
  4045c0:	f47f adba 	bne.w	404138 <_svfprintf_r+0xb0>
  4045c4:	2201      	movs	r2, #1
  4045c6:	2120      	movs	r1, #32
  4045c8:	e5b6      	b.n	404138 <_svfprintf_r+0xb0>
  4045ca:	f04b 0b01 	orr.w	fp, fp, #1
  4045ce:	f89a 3000 	ldrb.w	r3, [sl]
  4045d2:	e5b1      	b.n	404138 <_svfprintf_r+0xb0>
  4045d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4045d6:	6823      	ldr	r3, [r4, #0]
  4045d8:	930d      	str	r3, [sp, #52]	; 0x34
  4045da:	4618      	mov	r0, r3
  4045dc:	2800      	cmp	r0, #0
  4045de:	4623      	mov	r3, r4
  4045e0:	f103 0304 	add.w	r3, r3, #4
  4045e4:	f6ff ae0a 	blt.w	4041fc <_svfprintf_r+0x174>
  4045e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4045ea:	f89a 3000 	ldrb.w	r3, [sl]
  4045ee:	e5a3      	b.n	404138 <_svfprintf_r+0xb0>
  4045f0:	00408884 	.word	0x00408884
  4045f4:	00408894 	.word	0x00408894
  4045f8:	00408864 	.word	0x00408864
  4045fc:	f04b 0b10 	orr.w	fp, fp, #16
  404600:	f01b 0f20 	tst.w	fp, #32
  404604:	9311      	str	r3, [sp, #68]	; 0x44
  404606:	f43f ae23 	beq.w	404250 <_svfprintf_r+0x1c8>
  40460a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40460c:	3507      	adds	r5, #7
  40460e:	f025 0307 	bic.w	r3, r5, #7
  404612:	f103 0208 	add.w	r2, r3, #8
  404616:	e9d3 4500 	ldrd	r4, r5, [r3]
  40461a:	920f      	str	r2, [sp, #60]	; 0x3c
  40461c:	2301      	movs	r3, #1
  40461e:	e626      	b.n	40426e <_svfprintf_r+0x1e6>
  404620:	f89a 3000 	ldrb.w	r3, [sl]
  404624:	2b2a      	cmp	r3, #42	; 0x2a
  404626:	f10a 0401 	add.w	r4, sl, #1
  40462a:	f000 8727 	beq.w	40547c <_svfprintf_r+0x13f4>
  40462e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404632:	2809      	cmp	r0, #9
  404634:	46a2      	mov	sl, r4
  404636:	f200 86ad 	bhi.w	405394 <_svfprintf_r+0x130c>
  40463a:	2300      	movs	r3, #0
  40463c:	461c      	mov	r4, r3
  40463e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404642:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404646:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40464a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40464e:	2809      	cmp	r0, #9
  404650:	d9f5      	bls.n	40463e <_svfprintf_r+0x5b6>
  404652:	940a      	str	r4, [sp, #40]	; 0x28
  404654:	e572      	b.n	40413c <_svfprintf_r+0xb4>
  404656:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40465a:	f89a 3000 	ldrb.w	r3, [sl]
  40465e:	e56b      	b.n	404138 <_svfprintf_r+0xb0>
  404660:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404664:	f89a 3000 	ldrb.w	r3, [sl]
  404668:	e566      	b.n	404138 <_svfprintf_r+0xb0>
  40466a:	f89a 3000 	ldrb.w	r3, [sl]
  40466e:	2b6c      	cmp	r3, #108	; 0x6c
  404670:	bf03      	ittte	eq
  404672:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404676:	f04b 0b20 	orreq.w	fp, fp, #32
  40467a:	f10a 0a01 	addeq.w	sl, sl, #1
  40467e:	f04b 0b10 	orrne.w	fp, fp, #16
  404682:	e559      	b.n	404138 <_svfprintf_r+0xb0>
  404684:	2a00      	cmp	r2, #0
  404686:	f040 8711 	bne.w	4054ac <_svfprintf_r+0x1424>
  40468a:	f01b 0f20 	tst.w	fp, #32
  40468e:	f040 84f9 	bne.w	405084 <_svfprintf_r+0xffc>
  404692:	f01b 0f10 	tst.w	fp, #16
  404696:	f040 84ac 	bne.w	404ff2 <_svfprintf_r+0xf6a>
  40469a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40469e:	f000 84a8 	beq.w	404ff2 <_svfprintf_r+0xf6a>
  4046a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4046a4:	6813      	ldr	r3, [r2, #0]
  4046a6:	3204      	adds	r2, #4
  4046a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4046aa:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4046ae:	801a      	strh	r2, [r3, #0]
  4046b0:	e511      	b.n	4040d6 <_svfprintf_r+0x4e>
  4046b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4046b4:	4bb3      	ldr	r3, [pc, #716]	; (404984 <_svfprintf_r+0x8fc>)
  4046b6:	680c      	ldr	r4, [r1, #0]
  4046b8:	9318      	str	r3, [sp, #96]	; 0x60
  4046ba:	2230      	movs	r2, #48	; 0x30
  4046bc:	2378      	movs	r3, #120	; 0x78
  4046be:	3104      	adds	r1, #4
  4046c0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4046c4:	9311      	str	r3, [sp, #68]	; 0x44
  4046c6:	f04b 0b02 	orr.w	fp, fp, #2
  4046ca:	910f      	str	r1, [sp, #60]	; 0x3c
  4046cc:	2500      	movs	r5, #0
  4046ce:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4046d2:	2302      	movs	r3, #2
  4046d4:	e5cb      	b.n	40426e <_svfprintf_r+0x1e6>
  4046d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4046d8:	9311      	str	r3, [sp, #68]	; 0x44
  4046da:	680a      	ldr	r2, [r1, #0]
  4046dc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4046e0:	2300      	movs	r3, #0
  4046e2:	460a      	mov	r2, r1
  4046e4:	461f      	mov	r7, r3
  4046e6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4046ea:	3204      	adds	r2, #4
  4046ec:	2301      	movs	r3, #1
  4046ee:	9308      	str	r3, [sp, #32]
  4046f0:	f8cd b01c 	str.w	fp, [sp, #28]
  4046f4:	970a      	str	r7, [sp, #40]	; 0x28
  4046f6:	9712      	str	r7, [sp, #72]	; 0x48
  4046f8:	920f      	str	r2, [sp, #60]	; 0x3c
  4046fa:	930e      	str	r3, [sp, #56]	; 0x38
  4046fc:	ae28      	add	r6, sp, #160	; 0xa0
  4046fe:	e5df      	b.n	4042c0 <_svfprintf_r+0x238>
  404700:	9311      	str	r3, [sp, #68]	; 0x44
  404702:	2a00      	cmp	r2, #0
  404704:	f040 86ea 	bne.w	4054dc <_svfprintf_r+0x1454>
  404708:	f01b 0f20 	tst.w	fp, #32
  40470c:	d15d      	bne.n	4047ca <_svfprintf_r+0x742>
  40470e:	f01b 0f10 	tst.w	fp, #16
  404712:	f040 8308 	bne.w	404d26 <_svfprintf_r+0xc9e>
  404716:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40471a:	f000 8304 	beq.w	404d26 <_svfprintf_r+0xc9e>
  40471e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404720:	f9b1 4000 	ldrsh.w	r4, [r1]
  404724:	3104      	adds	r1, #4
  404726:	17e5      	asrs	r5, r4, #31
  404728:	4622      	mov	r2, r4
  40472a:	462b      	mov	r3, r5
  40472c:	910f      	str	r1, [sp, #60]	; 0x3c
  40472e:	2a00      	cmp	r2, #0
  404730:	f173 0300 	sbcs.w	r3, r3, #0
  404734:	db58      	blt.n	4047e8 <_svfprintf_r+0x760>
  404736:	990a      	ldr	r1, [sp, #40]	; 0x28
  404738:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40473c:	1c4a      	adds	r2, r1, #1
  40473e:	f04f 0301 	mov.w	r3, #1
  404742:	f47f ad9b 	bne.w	40427c <_svfprintf_r+0x1f4>
  404746:	ea54 0205 	orrs.w	r2, r4, r5
  40474a:	f000 81df 	beq.w	404b0c <_svfprintf_r+0xa84>
  40474e:	f8cd b01c 	str.w	fp, [sp, #28]
  404752:	2b01      	cmp	r3, #1
  404754:	f000 827b 	beq.w	404c4e <_svfprintf_r+0xbc6>
  404758:	2b02      	cmp	r3, #2
  40475a:	f040 8206 	bne.w	404b6a <_svfprintf_r+0xae2>
  40475e:	9818      	ldr	r0, [sp, #96]	; 0x60
  404760:	464e      	mov	r6, r9
  404762:	0923      	lsrs	r3, r4, #4
  404764:	f004 010f 	and.w	r1, r4, #15
  404768:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40476c:	092a      	lsrs	r2, r5, #4
  40476e:	461c      	mov	r4, r3
  404770:	4615      	mov	r5, r2
  404772:	5c43      	ldrb	r3, [r0, r1]
  404774:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404778:	ea54 0305 	orrs.w	r3, r4, r5
  40477c:	d1f1      	bne.n	404762 <_svfprintf_r+0x6da>
  40477e:	eba9 0306 	sub.w	r3, r9, r6
  404782:	930e      	str	r3, [sp, #56]	; 0x38
  404784:	e590      	b.n	4042a8 <_svfprintf_r+0x220>
  404786:	9311      	str	r3, [sp, #68]	; 0x44
  404788:	2a00      	cmp	r2, #0
  40478a:	f040 86a3 	bne.w	4054d4 <_svfprintf_r+0x144c>
  40478e:	4b7e      	ldr	r3, [pc, #504]	; (404988 <_svfprintf_r+0x900>)
  404790:	9318      	str	r3, [sp, #96]	; 0x60
  404792:	f01b 0f20 	tst.w	fp, #32
  404796:	f43f aeef 	beq.w	404578 <_svfprintf_r+0x4f0>
  40479a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40479c:	3507      	adds	r5, #7
  40479e:	f025 0307 	bic.w	r3, r5, #7
  4047a2:	f103 0208 	add.w	r2, r3, #8
  4047a6:	f01b 0f01 	tst.w	fp, #1
  4047aa:	920f      	str	r2, [sp, #60]	; 0x3c
  4047ac:	e9d3 4500 	ldrd	r4, r5, [r3]
  4047b0:	f47f aef4 	bne.w	40459c <_svfprintf_r+0x514>
  4047b4:	2302      	movs	r3, #2
  4047b6:	e55a      	b.n	40426e <_svfprintf_r+0x1e6>
  4047b8:	9311      	str	r3, [sp, #68]	; 0x44
  4047ba:	2a00      	cmp	r2, #0
  4047bc:	f040 8686 	bne.w	4054cc <_svfprintf_r+0x1444>
  4047c0:	f04b 0b10 	orr.w	fp, fp, #16
  4047c4:	f01b 0f20 	tst.w	fp, #32
  4047c8:	d0a1      	beq.n	40470e <_svfprintf_r+0x686>
  4047ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4047cc:	3507      	adds	r5, #7
  4047ce:	f025 0507 	bic.w	r5, r5, #7
  4047d2:	e9d5 2300 	ldrd	r2, r3, [r5]
  4047d6:	2a00      	cmp	r2, #0
  4047d8:	f105 0108 	add.w	r1, r5, #8
  4047dc:	461d      	mov	r5, r3
  4047de:	f173 0300 	sbcs.w	r3, r3, #0
  4047e2:	910f      	str	r1, [sp, #60]	; 0x3c
  4047e4:	4614      	mov	r4, r2
  4047e6:	daa6      	bge.n	404736 <_svfprintf_r+0x6ae>
  4047e8:	272d      	movs	r7, #45	; 0x2d
  4047ea:	4264      	negs	r4, r4
  4047ec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4047f0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4047f4:	2301      	movs	r3, #1
  4047f6:	e53d      	b.n	404274 <_svfprintf_r+0x1ec>
  4047f8:	9311      	str	r3, [sp, #68]	; 0x44
  4047fa:	2a00      	cmp	r2, #0
  4047fc:	f040 8662 	bne.w	4054c4 <_svfprintf_r+0x143c>
  404800:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404802:	3507      	adds	r5, #7
  404804:	f025 0307 	bic.w	r3, r5, #7
  404808:	f103 0208 	add.w	r2, r3, #8
  40480c:	920f      	str	r2, [sp, #60]	; 0x3c
  40480e:	681a      	ldr	r2, [r3, #0]
  404810:	9215      	str	r2, [sp, #84]	; 0x54
  404812:	685b      	ldr	r3, [r3, #4]
  404814:	9314      	str	r3, [sp, #80]	; 0x50
  404816:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404818:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40481a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40481e:	4628      	mov	r0, r5
  404820:	4621      	mov	r1, r4
  404822:	f04f 32ff 	mov.w	r2, #4294967295
  404826:	4b59      	ldr	r3, [pc, #356]	; (40498c <_svfprintf_r+0x904>)
  404828:	f003 fa94 	bl	407d54 <__aeabi_dcmpun>
  40482c:	2800      	cmp	r0, #0
  40482e:	f040 834a 	bne.w	404ec6 <_svfprintf_r+0xe3e>
  404832:	4628      	mov	r0, r5
  404834:	4621      	mov	r1, r4
  404836:	f04f 32ff 	mov.w	r2, #4294967295
  40483a:	4b54      	ldr	r3, [pc, #336]	; (40498c <_svfprintf_r+0x904>)
  40483c:	f003 fa6c 	bl	407d18 <__aeabi_dcmple>
  404840:	2800      	cmp	r0, #0
  404842:	f040 8340 	bne.w	404ec6 <_svfprintf_r+0xe3e>
  404846:	a815      	add	r0, sp, #84	; 0x54
  404848:	c80d      	ldmia	r0, {r0, r2, r3}
  40484a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40484c:	f003 fa5a 	bl	407d04 <__aeabi_dcmplt>
  404850:	2800      	cmp	r0, #0
  404852:	f040 8530 	bne.w	4052b6 <_svfprintf_r+0x122e>
  404856:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40485a:	4e4d      	ldr	r6, [pc, #308]	; (404990 <_svfprintf_r+0x908>)
  40485c:	4b4d      	ldr	r3, [pc, #308]	; (404994 <_svfprintf_r+0x90c>)
  40485e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404862:	9007      	str	r0, [sp, #28]
  404864:	9811      	ldr	r0, [sp, #68]	; 0x44
  404866:	2203      	movs	r2, #3
  404868:	2100      	movs	r1, #0
  40486a:	9208      	str	r2, [sp, #32]
  40486c:	910a      	str	r1, [sp, #40]	; 0x28
  40486e:	2847      	cmp	r0, #71	; 0x47
  404870:	bfd8      	it	le
  404872:	461e      	movle	r6, r3
  404874:	920e      	str	r2, [sp, #56]	; 0x38
  404876:	9112      	str	r1, [sp, #72]	; 0x48
  404878:	e51e      	b.n	4042b8 <_svfprintf_r+0x230>
  40487a:	f04b 0b08 	orr.w	fp, fp, #8
  40487e:	f89a 3000 	ldrb.w	r3, [sl]
  404882:	e459      	b.n	404138 <_svfprintf_r+0xb0>
  404884:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404888:	2300      	movs	r3, #0
  40488a:	461c      	mov	r4, r3
  40488c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404890:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404894:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404898:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40489c:	2809      	cmp	r0, #9
  40489e:	d9f5      	bls.n	40488c <_svfprintf_r+0x804>
  4048a0:	940d      	str	r4, [sp, #52]	; 0x34
  4048a2:	e44b      	b.n	40413c <_svfprintf_r+0xb4>
  4048a4:	f04b 0b10 	orr.w	fp, fp, #16
  4048a8:	9311      	str	r3, [sp, #68]	; 0x44
  4048aa:	f01b 0320 	ands.w	r3, fp, #32
  4048ae:	f43f ae1d 	beq.w	4044ec <_svfprintf_r+0x464>
  4048b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4048b4:	3507      	adds	r5, #7
  4048b6:	f025 0307 	bic.w	r3, r5, #7
  4048ba:	f103 0208 	add.w	r2, r3, #8
  4048be:	e9d3 4500 	ldrd	r4, r5, [r3]
  4048c2:	920f      	str	r2, [sp, #60]	; 0x3c
  4048c4:	2300      	movs	r3, #0
  4048c6:	e4d2      	b.n	40426e <_svfprintf_r+0x1e6>
  4048c8:	9311      	str	r3, [sp, #68]	; 0x44
  4048ca:	2a00      	cmp	r2, #0
  4048cc:	f040 85e7 	bne.w	40549e <_svfprintf_r+0x1416>
  4048d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4048d2:	2a00      	cmp	r2, #0
  4048d4:	f43f aca3 	beq.w	40421e <_svfprintf_r+0x196>
  4048d8:	2300      	movs	r3, #0
  4048da:	2101      	movs	r1, #1
  4048dc:	461f      	mov	r7, r3
  4048de:	9108      	str	r1, [sp, #32]
  4048e0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4048e4:	f8cd b01c 	str.w	fp, [sp, #28]
  4048e8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4048ec:	930a      	str	r3, [sp, #40]	; 0x28
  4048ee:	9312      	str	r3, [sp, #72]	; 0x48
  4048f0:	910e      	str	r1, [sp, #56]	; 0x38
  4048f2:	ae28      	add	r6, sp, #160	; 0xa0
  4048f4:	e4e4      	b.n	4042c0 <_svfprintf_r+0x238>
  4048f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048f8:	e534      	b.n	404364 <_svfprintf_r+0x2dc>
  4048fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4048fc:	2b65      	cmp	r3, #101	; 0x65
  4048fe:	f340 80a7 	ble.w	404a50 <_svfprintf_r+0x9c8>
  404902:	a815      	add	r0, sp, #84	; 0x54
  404904:	c80d      	ldmia	r0, {r0, r2, r3}
  404906:	9914      	ldr	r1, [sp, #80]	; 0x50
  404908:	f003 f9f2 	bl	407cf0 <__aeabi_dcmpeq>
  40490c:	2800      	cmp	r0, #0
  40490e:	f000 8150 	beq.w	404bb2 <_svfprintf_r+0xb2a>
  404912:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404914:	4a20      	ldr	r2, [pc, #128]	; (404998 <_svfprintf_r+0x910>)
  404916:	f8c8 2000 	str.w	r2, [r8]
  40491a:	3301      	adds	r3, #1
  40491c:	3401      	adds	r4, #1
  40491e:	2201      	movs	r2, #1
  404920:	2b07      	cmp	r3, #7
  404922:	9427      	str	r4, [sp, #156]	; 0x9c
  404924:	9326      	str	r3, [sp, #152]	; 0x98
  404926:	f8c8 2004 	str.w	r2, [r8, #4]
  40492a:	f300 836a 	bgt.w	405002 <_svfprintf_r+0xf7a>
  40492e:	f108 0808 	add.w	r8, r8, #8
  404932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404934:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404936:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404938:	4293      	cmp	r3, r2
  40493a:	db03      	blt.n	404944 <_svfprintf_r+0x8bc>
  40493c:	9b07      	ldr	r3, [sp, #28]
  40493e:	07dd      	lsls	r5, r3, #31
  404940:	f57f ad82 	bpl.w	404448 <_svfprintf_r+0x3c0>
  404944:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404946:	9919      	ldr	r1, [sp, #100]	; 0x64
  404948:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40494a:	f8c8 2000 	str.w	r2, [r8]
  40494e:	3301      	adds	r3, #1
  404950:	440c      	add	r4, r1
  404952:	2b07      	cmp	r3, #7
  404954:	f8c8 1004 	str.w	r1, [r8, #4]
  404958:	9427      	str	r4, [sp, #156]	; 0x9c
  40495a:	9326      	str	r3, [sp, #152]	; 0x98
  40495c:	f300 839e 	bgt.w	40509c <_svfprintf_r+0x1014>
  404960:	f108 0808 	add.w	r8, r8, #8
  404964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404966:	1e5e      	subs	r6, r3, #1
  404968:	2e00      	cmp	r6, #0
  40496a:	f77f ad6d 	ble.w	404448 <_svfprintf_r+0x3c0>
  40496e:	2e10      	cmp	r6, #16
  404970:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404972:	4d0a      	ldr	r5, [pc, #40]	; (40499c <_svfprintf_r+0x914>)
  404974:	f340 81f5 	ble.w	404d62 <_svfprintf_r+0xcda>
  404978:	4622      	mov	r2, r4
  40497a:	2710      	movs	r7, #16
  40497c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404980:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404982:	e013      	b.n	4049ac <_svfprintf_r+0x924>
  404984:	00408864 	.word	0x00408864
  404988:	00408850 	.word	0x00408850
  40498c:	7fefffff 	.word	0x7fefffff
  404990:	00408844 	.word	0x00408844
  404994:	00408840 	.word	0x00408840
  404998:	00408880 	.word	0x00408880
  40499c:	00408894 	.word	0x00408894
  4049a0:	f108 0808 	add.w	r8, r8, #8
  4049a4:	3e10      	subs	r6, #16
  4049a6:	2e10      	cmp	r6, #16
  4049a8:	f340 81da 	ble.w	404d60 <_svfprintf_r+0xcd8>
  4049ac:	3301      	adds	r3, #1
  4049ae:	3210      	adds	r2, #16
  4049b0:	2b07      	cmp	r3, #7
  4049b2:	9227      	str	r2, [sp, #156]	; 0x9c
  4049b4:	9326      	str	r3, [sp, #152]	; 0x98
  4049b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4049ba:	ddf1      	ble.n	4049a0 <_svfprintf_r+0x918>
  4049bc:	aa25      	add	r2, sp, #148	; 0x94
  4049be:	4621      	mov	r1, r4
  4049c0:	4658      	mov	r0, fp
  4049c2:	f002 fccb 	bl	40735c <__ssprint_r>
  4049c6:	2800      	cmp	r0, #0
  4049c8:	f47f ac30 	bne.w	40422c <_svfprintf_r+0x1a4>
  4049cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4049ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049d0:	46c8      	mov	r8, r9
  4049d2:	e7e7      	b.n	4049a4 <_svfprintf_r+0x91c>
  4049d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4049d6:	9a08      	ldr	r2, [sp, #32]
  4049d8:	1a9f      	subs	r7, r3, r2
  4049da:	2f00      	cmp	r7, #0
  4049dc:	f77f ace5 	ble.w	4043aa <_svfprintf_r+0x322>
  4049e0:	2f10      	cmp	r7, #16
  4049e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049e4:	4db6      	ldr	r5, [pc, #728]	; (404cc0 <_svfprintf_r+0xc38>)
  4049e6:	dd27      	ble.n	404a38 <_svfprintf_r+0x9b0>
  4049e8:	4642      	mov	r2, r8
  4049ea:	4621      	mov	r1, r4
  4049ec:	46b0      	mov	r8, r6
  4049ee:	f04f 0b10 	mov.w	fp, #16
  4049f2:	462e      	mov	r6, r5
  4049f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4049f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4049f8:	e004      	b.n	404a04 <_svfprintf_r+0x97c>
  4049fa:	3f10      	subs	r7, #16
  4049fc:	2f10      	cmp	r7, #16
  4049fe:	f102 0208 	add.w	r2, r2, #8
  404a02:	dd15      	ble.n	404a30 <_svfprintf_r+0x9a8>
  404a04:	3301      	adds	r3, #1
  404a06:	3110      	adds	r1, #16
  404a08:	2b07      	cmp	r3, #7
  404a0a:	9127      	str	r1, [sp, #156]	; 0x9c
  404a0c:	9326      	str	r3, [sp, #152]	; 0x98
  404a0e:	e882 0840 	stmia.w	r2, {r6, fp}
  404a12:	ddf2      	ble.n	4049fa <_svfprintf_r+0x972>
  404a14:	aa25      	add	r2, sp, #148	; 0x94
  404a16:	4629      	mov	r1, r5
  404a18:	4620      	mov	r0, r4
  404a1a:	f002 fc9f 	bl	40735c <__ssprint_r>
  404a1e:	2800      	cmp	r0, #0
  404a20:	f47f ac04 	bne.w	40422c <_svfprintf_r+0x1a4>
  404a24:	3f10      	subs	r7, #16
  404a26:	2f10      	cmp	r7, #16
  404a28:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404a2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a2c:	464a      	mov	r2, r9
  404a2e:	dce9      	bgt.n	404a04 <_svfprintf_r+0x97c>
  404a30:	4635      	mov	r5, r6
  404a32:	460c      	mov	r4, r1
  404a34:	4646      	mov	r6, r8
  404a36:	4690      	mov	r8, r2
  404a38:	3301      	adds	r3, #1
  404a3a:	443c      	add	r4, r7
  404a3c:	2b07      	cmp	r3, #7
  404a3e:	9427      	str	r4, [sp, #156]	; 0x9c
  404a40:	9326      	str	r3, [sp, #152]	; 0x98
  404a42:	e888 00a0 	stmia.w	r8, {r5, r7}
  404a46:	f300 8232 	bgt.w	404eae <_svfprintf_r+0xe26>
  404a4a:	f108 0808 	add.w	r8, r8, #8
  404a4e:	e4ac      	b.n	4043aa <_svfprintf_r+0x322>
  404a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a52:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404a54:	2b01      	cmp	r3, #1
  404a56:	f340 81fe 	ble.w	404e56 <_svfprintf_r+0xdce>
  404a5a:	3701      	adds	r7, #1
  404a5c:	3401      	adds	r4, #1
  404a5e:	2301      	movs	r3, #1
  404a60:	2f07      	cmp	r7, #7
  404a62:	9427      	str	r4, [sp, #156]	; 0x9c
  404a64:	9726      	str	r7, [sp, #152]	; 0x98
  404a66:	f8c8 6000 	str.w	r6, [r8]
  404a6a:	f8c8 3004 	str.w	r3, [r8, #4]
  404a6e:	f300 8203 	bgt.w	404e78 <_svfprintf_r+0xdf0>
  404a72:	f108 0808 	add.w	r8, r8, #8
  404a76:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404a78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404a7a:	f8c8 3000 	str.w	r3, [r8]
  404a7e:	3701      	adds	r7, #1
  404a80:	4414      	add	r4, r2
  404a82:	2f07      	cmp	r7, #7
  404a84:	9427      	str	r4, [sp, #156]	; 0x9c
  404a86:	9726      	str	r7, [sp, #152]	; 0x98
  404a88:	f8c8 2004 	str.w	r2, [r8, #4]
  404a8c:	f300 8200 	bgt.w	404e90 <_svfprintf_r+0xe08>
  404a90:	f108 0808 	add.w	r8, r8, #8
  404a94:	a815      	add	r0, sp, #84	; 0x54
  404a96:	c80d      	ldmia	r0, {r0, r2, r3}
  404a98:	9914      	ldr	r1, [sp, #80]	; 0x50
  404a9a:	f003 f929 	bl	407cf0 <__aeabi_dcmpeq>
  404a9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404aa0:	2800      	cmp	r0, #0
  404aa2:	f040 8101 	bne.w	404ca8 <_svfprintf_r+0xc20>
  404aa6:	3b01      	subs	r3, #1
  404aa8:	3701      	adds	r7, #1
  404aaa:	3601      	adds	r6, #1
  404aac:	441c      	add	r4, r3
  404aae:	2f07      	cmp	r7, #7
  404ab0:	9726      	str	r7, [sp, #152]	; 0x98
  404ab2:	9427      	str	r4, [sp, #156]	; 0x9c
  404ab4:	f8c8 6000 	str.w	r6, [r8]
  404ab8:	f8c8 3004 	str.w	r3, [r8, #4]
  404abc:	f300 8127 	bgt.w	404d0e <_svfprintf_r+0xc86>
  404ac0:	f108 0808 	add.w	r8, r8, #8
  404ac4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404ac6:	f8c8 2004 	str.w	r2, [r8, #4]
  404aca:	3701      	adds	r7, #1
  404acc:	4414      	add	r4, r2
  404ace:	ab21      	add	r3, sp, #132	; 0x84
  404ad0:	2f07      	cmp	r7, #7
  404ad2:	9427      	str	r4, [sp, #156]	; 0x9c
  404ad4:	9726      	str	r7, [sp, #152]	; 0x98
  404ad6:	f8c8 3000 	str.w	r3, [r8]
  404ada:	f77f acb3 	ble.w	404444 <_svfprintf_r+0x3bc>
  404ade:	aa25      	add	r2, sp, #148	; 0x94
  404ae0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ae2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ae4:	f002 fc3a 	bl	40735c <__ssprint_r>
  404ae8:	2800      	cmp	r0, #0
  404aea:	f47f ab9f 	bne.w	40422c <_svfprintf_r+0x1a4>
  404aee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404af0:	46c8      	mov	r8, r9
  404af2:	e4a9      	b.n	404448 <_svfprintf_r+0x3c0>
  404af4:	aa25      	add	r2, sp, #148	; 0x94
  404af6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404af8:	980c      	ldr	r0, [sp, #48]	; 0x30
  404afa:	f002 fc2f 	bl	40735c <__ssprint_r>
  404afe:	2800      	cmp	r0, #0
  404b00:	f43f aceb 	beq.w	4044da <_svfprintf_r+0x452>
  404b04:	f7ff bb92 	b.w	40422c <_svfprintf_r+0x1a4>
  404b08:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404b0c:	2b01      	cmp	r3, #1
  404b0e:	f000 8134 	beq.w	404d7a <_svfprintf_r+0xcf2>
  404b12:	2b02      	cmp	r3, #2
  404b14:	d125      	bne.n	404b62 <_svfprintf_r+0xada>
  404b16:	f8cd b01c 	str.w	fp, [sp, #28]
  404b1a:	2400      	movs	r4, #0
  404b1c:	2500      	movs	r5, #0
  404b1e:	e61e      	b.n	40475e <_svfprintf_r+0x6d6>
  404b20:	aa25      	add	r2, sp, #148	; 0x94
  404b22:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b24:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b26:	f002 fc19 	bl	40735c <__ssprint_r>
  404b2a:	2800      	cmp	r0, #0
  404b2c:	f47f ab7e 	bne.w	40422c <_svfprintf_r+0x1a4>
  404b30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b32:	46c8      	mov	r8, r9
  404b34:	e475      	b.n	404422 <_svfprintf_r+0x39a>
  404b36:	aa25      	add	r2, sp, #148	; 0x94
  404b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b3a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b3c:	f002 fc0e 	bl	40735c <__ssprint_r>
  404b40:	2800      	cmp	r0, #0
  404b42:	f47f ab73 	bne.w	40422c <_svfprintf_r+0x1a4>
  404b46:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b48:	46c8      	mov	r8, r9
  404b4a:	e41b      	b.n	404384 <_svfprintf_r+0x2fc>
  404b4c:	aa25      	add	r2, sp, #148	; 0x94
  404b4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b50:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b52:	f002 fc03 	bl	40735c <__ssprint_r>
  404b56:	2800      	cmp	r0, #0
  404b58:	f47f ab68 	bne.w	40422c <_svfprintf_r+0x1a4>
  404b5c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b5e:	46c8      	mov	r8, r9
  404b60:	e420      	b.n	4043a4 <_svfprintf_r+0x31c>
  404b62:	f8cd b01c 	str.w	fp, [sp, #28]
  404b66:	2400      	movs	r4, #0
  404b68:	2500      	movs	r5, #0
  404b6a:	4649      	mov	r1, r9
  404b6c:	e000      	b.n	404b70 <_svfprintf_r+0xae8>
  404b6e:	4631      	mov	r1, r6
  404b70:	08e2      	lsrs	r2, r4, #3
  404b72:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404b76:	08e8      	lsrs	r0, r5, #3
  404b78:	f004 0307 	and.w	r3, r4, #7
  404b7c:	4605      	mov	r5, r0
  404b7e:	4614      	mov	r4, r2
  404b80:	3330      	adds	r3, #48	; 0x30
  404b82:	ea54 0205 	orrs.w	r2, r4, r5
  404b86:	f801 3c01 	strb.w	r3, [r1, #-1]
  404b8a:	f101 36ff 	add.w	r6, r1, #4294967295
  404b8e:	d1ee      	bne.n	404b6e <_svfprintf_r+0xae6>
  404b90:	9a07      	ldr	r2, [sp, #28]
  404b92:	07d2      	lsls	r2, r2, #31
  404b94:	f57f adf3 	bpl.w	40477e <_svfprintf_r+0x6f6>
  404b98:	2b30      	cmp	r3, #48	; 0x30
  404b9a:	f43f adf0 	beq.w	40477e <_svfprintf_r+0x6f6>
  404b9e:	3902      	subs	r1, #2
  404ba0:	2330      	movs	r3, #48	; 0x30
  404ba2:	f806 3c01 	strb.w	r3, [r6, #-1]
  404ba6:	eba9 0301 	sub.w	r3, r9, r1
  404baa:	930e      	str	r3, [sp, #56]	; 0x38
  404bac:	460e      	mov	r6, r1
  404bae:	f7ff bb7b 	b.w	4042a8 <_svfprintf_r+0x220>
  404bb2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404bb4:	2900      	cmp	r1, #0
  404bb6:	f340 822e 	ble.w	405016 <_svfprintf_r+0xf8e>
  404bba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404bbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404bbe:	4293      	cmp	r3, r2
  404bc0:	bfa8      	it	ge
  404bc2:	4613      	movge	r3, r2
  404bc4:	2b00      	cmp	r3, #0
  404bc6:	461f      	mov	r7, r3
  404bc8:	dd0d      	ble.n	404be6 <_svfprintf_r+0xb5e>
  404bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bcc:	f8c8 6000 	str.w	r6, [r8]
  404bd0:	3301      	adds	r3, #1
  404bd2:	443c      	add	r4, r7
  404bd4:	2b07      	cmp	r3, #7
  404bd6:	9427      	str	r4, [sp, #156]	; 0x9c
  404bd8:	f8c8 7004 	str.w	r7, [r8, #4]
  404bdc:	9326      	str	r3, [sp, #152]	; 0x98
  404bde:	f300 831f 	bgt.w	405220 <_svfprintf_r+0x1198>
  404be2:	f108 0808 	add.w	r8, r8, #8
  404be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404be8:	2f00      	cmp	r7, #0
  404bea:	bfa8      	it	ge
  404bec:	1bdb      	subge	r3, r3, r7
  404bee:	2b00      	cmp	r3, #0
  404bf0:	461f      	mov	r7, r3
  404bf2:	f340 80d6 	ble.w	404da2 <_svfprintf_r+0xd1a>
  404bf6:	2f10      	cmp	r7, #16
  404bf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bfa:	4d31      	ldr	r5, [pc, #196]	; (404cc0 <_svfprintf_r+0xc38>)
  404bfc:	f340 81ed 	ble.w	404fda <_svfprintf_r+0xf52>
  404c00:	4642      	mov	r2, r8
  404c02:	4621      	mov	r1, r4
  404c04:	46b0      	mov	r8, r6
  404c06:	f04f 0b10 	mov.w	fp, #16
  404c0a:	462e      	mov	r6, r5
  404c0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404c0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404c10:	e004      	b.n	404c1c <_svfprintf_r+0xb94>
  404c12:	3208      	adds	r2, #8
  404c14:	3f10      	subs	r7, #16
  404c16:	2f10      	cmp	r7, #16
  404c18:	f340 81db 	ble.w	404fd2 <_svfprintf_r+0xf4a>
  404c1c:	3301      	adds	r3, #1
  404c1e:	3110      	adds	r1, #16
  404c20:	2b07      	cmp	r3, #7
  404c22:	9127      	str	r1, [sp, #156]	; 0x9c
  404c24:	9326      	str	r3, [sp, #152]	; 0x98
  404c26:	e882 0840 	stmia.w	r2, {r6, fp}
  404c2a:	ddf2      	ble.n	404c12 <_svfprintf_r+0xb8a>
  404c2c:	aa25      	add	r2, sp, #148	; 0x94
  404c2e:	4629      	mov	r1, r5
  404c30:	4620      	mov	r0, r4
  404c32:	f002 fb93 	bl	40735c <__ssprint_r>
  404c36:	2800      	cmp	r0, #0
  404c38:	f47f aaf8 	bne.w	40422c <_svfprintf_r+0x1a4>
  404c3c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c40:	464a      	mov	r2, r9
  404c42:	e7e7      	b.n	404c14 <_svfprintf_r+0xb8c>
  404c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c46:	930e      	str	r3, [sp, #56]	; 0x38
  404c48:	464e      	mov	r6, r9
  404c4a:	f7ff bb2d 	b.w	4042a8 <_svfprintf_r+0x220>
  404c4e:	2d00      	cmp	r5, #0
  404c50:	bf08      	it	eq
  404c52:	2c0a      	cmpeq	r4, #10
  404c54:	f0c0 808f 	bcc.w	404d76 <_svfprintf_r+0xcee>
  404c58:	464e      	mov	r6, r9
  404c5a:	4620      	mov	r0, r4
  404c5c:	4629      	mov	r1, r5
  404c5e:	220a      	movs	r2, #10
  404c60:	2300      	movs	r3, #0
  404c62:	f7fe ffed 	bl	403c40 <__aeabi_uldivmod>
  404c66:	3230      	adds	r2, #48	; 0x30
  404c68:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404c6c:	4620      	mov	r0, r4
  404c6e:	4629      	mov	r1, r5
  404c70:	2300      	movs	r3, #0
  404c72:	220a      	movs	r2, #10
  404c74:	f7fe ffe4 	bl	403c40 <__aeabi_uldivmod>
  404c78:	4604      	mov	r4, r0
  404c7a:	460d      	mov	r5, r1
  404c7c:	ea54 0305 	orrs.w	r3, r4, r5
  404c80:	d1eb      	bne.n	404c5a <_svfprintf_r+0xbd2>
  404c82:	eba9 0306 	sub.w	r3, r9, r6
  404c86:	930e      	str	r3, [sp, #56]	; 0x38
  404c88:	f7ff bb0e 	b.w	4042a8 <_svfprintf_r+0x220>
  404c8c:	aa25      	add	r2, sp, #148	; 0x94
  404c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c90:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c92:	f002 fb63 	bl	40735c <__ssprint_r>
  404c96:	2800      	cmp	r0, #0
  404c98:	f47f aac8 	bne.w	40422c <_svfprintf_r+0x1a4>
  404c9c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404ca0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ca2:	46c8      	mov	r8, r9
  404ca4:	f7ff bb5e 	b.w	404364 <_svfprintf_r+0x2dc>
  404ca8:	1e5e      	subs	r6, r3, #1
  404caa:	2e00      	cmp	r6, #0
  404cac:	f77f af0a 	ble.w	404ac4 <_svfprintf_r+0xa3c>
  404cb0:	2e10      	cmp	r6, #16
  404cb2:	4d03      	ldr	r5, [pc, #12]	; (404cc0 <_svfprintf_r+0xc38>)
  404cb4:	dd22      	ble.n	404cfc <_svfprintf_r+0xc74>
  404cb6:	4622      	mov	r2, r4
  404cb8:	f04f 0b10 	mov.w	fp, #16
  404cbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404cbe:	e006      	b.n	404cce <_svfprintf_r+0xc46>
  404cc0:	00408894 	.word	0x00408894
  404cc4:	3e10      	subs	r6, #16
  404cc6:	2e10      	cmp	r6, #16
  404cc8:	f108 0808 	add.w	r8, r8, #8
  404ccc:	dd15      	ble.n	404cfa <_svfprintf_r+0xc72>
  404cce:	3701      	adds	r7, #1
  404cd0:	3210      	adds	r2, #16
  404cd2:	2f07      	cmp	r7, #7
  404cd4:	9227      	str	r2, [sp, #156]	; 0x9c
  404cd6:	9726      	str	r7, [sp, #152]	; 0x98
  404cd8:	e888 0820 	stmia.w	r8, {r5, fp}
  404cdc:	ddf2      	ble.n	404cc4 <_svfprintf_r+0xc3c>
  404cde:	aa25      	add	r2, sp, #148	; 0x94
  404ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ce2:	4620      	mov	r0, r4
  404ce4:	f002 fb3a 	bl	40735c <__ssprint_r>
  404ce8:	2800      	cmp	r0, #0
  404cea:	f47f aa9f 	bne.w	40422c <_svfprintf_r+0x1a4>
  404cee:	3e10      	subs	r6, #16
  404cf0:	2e10      	cmp	r6, #16
  404cf2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404cf4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404cf6:	46c8      	mov	r8, r9
  404cf8:	dce9      	bgt.n	404cce <_svfprintf_r+0xc46>
  404cfa:	4614      	mov	r4, r2
  404cfc:	3701      	adds	r7, #1
  404cfe:	4434      	add	r4, r6
  404d00:	2f07      	cmp	r7, #7
  404d02:	9427      	str	r4, [sp, #156]	; 0x9c
  404d04:	9726      	str	r7, [sp, #152]	; 0x98
  404d06:	e888 0060 	stmia.w	r8, {r5, r6}
  404d0a:	f77f aed9 	ble.w	404ac0 <_svfprintf_r+0xa38>
  404d0e:	aa25      	add	r2, sp, #148	; 0x94
  404d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d14:	f002 fb22 	bl	40735c <__ssprint_r>
  404d18:	2800      	cmp	r0, #0
  404d1a:	f47f aa87 	bne.w	40422c <_svfprintf_r+0x1a4>
  404d1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d20:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404d22:	46c8      	mov	r8, r9
  404d24:	e6ce      	b.n	404ac4 <_svfprintf_r+0xa3c>
  404d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d28:	6814      	ldr	r4, [r2, #0]
  404d2a:	4613      	mov	r3, r2
  404d2c:	3304      	adds	r3, #4
  404d2e:	17e5      	asrs	r5, r4, #31
  404d30:	930f      	str	r3, [sp, #60]	; 0x3c
  404d32:	4622      	mov	r2, r4
  404d34:	462b      	mov	r3, r5
  404d36:	e4fa      	b.n	40472e <_svfprintf_r+0x6a6>
  404d38:	3204      	adds	r2, #4
  404d3a:	681c      	ldr	r4, [r3, #0]
  404d3c:	920f      	str	r2, [sp, #60]	; 0x3c
  404d3e:	2301      	movs	r3, #1
  404d40:	2500      	movs	r5, #0
  404d42:	f7ff ba94 	b.w	40426e <_svfprintf_r+0x1e6>
  404d46:	681c      	ldr	r4, [r3, #0]
  404d48:	3304      	adds	r3, #4
  404d4a:	930f      	str	r3, [sp, #60]	; 0x3c
  404d4c:	2500      	movs	r5, #0
  404d4e:	e421      	b.n	404594 <_svfprintf_r+0x50c>
  404d50:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404d52:	460a      	mov	r2, r1
  404d54:	3204      	adds	r2, #4
  404d56:	680c      	ldr	r4, [r1, #0]
  404d58:	920f      	str	r2, [sp, #60]	; 0x3c
  404d5a:	2500      	movs	r5, #0
  404d5c:	f7ff ba87 	b.w	40426e <_svfprintf_r+0x1e6>
  404d60:	4614      	mov	r4, r2
  404d62:	3301      	adds	r3, #1
  404d64:	4434      	add	r4, r6
  404d66:	2b07      	cmp	r3, #7
  404d68:	9427      	str	r4, [sp, #156]	; 0x9c
  404d6a:	9326      	str	r3, [sp, #152]	; 0x98
  404d6c:	e888 0060 	stmia.w	r8, {r5, r6}
  404d70:	f77f ab68 	ble.w	404444 <_svfprintf_r+0x3bc>
  404d74:	e6b3      	b.n	404ade <_svfprintf_r+0xa56>
  404d76:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404d7a:	f8cd b01c 	str.w	fp, [sp, #28]
  404d7e:	ae42      	add	r6, sp, #264	; 0x108
  404d80:	3430      	adds	r4, #48	; 0x30
  404d82:	2301      	movs	r3, #1
  404d84:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404d88:	930e      	str	r3, [sp, #56]	; 0x38
  404d8a:	f7ff ba8d 	b.w	4042a8 <_svfprintf_r+0x220>
  404d8e:	aa25      	add	r2, sp, #148	; 0x94
  404d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d92:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d94:	f002 fae2 	bl	40735c <__ssprint_r>
  404d98:	2800      	cmp	r0, #0
  404d9a:	f47f aa47 	bne.w	40422c <_svfprintf_r+0x1a4>
  404d9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404da0:	46c8      	mov	r8, r9
  404da2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404da6:	429a      	cmp	r2, r3
  404da8:	db44      	blt.n	404e34 <_svfprintf_r+0xdac>
  404daa:	9b07      	ldr	r3, [sp, #28]
  404dac:	07d9      	lsls	r1, r3, #31
  404dae:	d441      	bmi.n	404e34 <_svfprintf_r+0xdac>
  404db0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404db2:	9812      	ldr	r0, [sp, #72]	; 0x48
  404db4:	1a9a      	subs	r2, r3, r2
  404db6:	1a1d      	subs	r5, r3, r0
  404db8:	4295      	cmp	r5, r2
  404dba:	bfa8      	it	ge
  404dbc:	4615      	movge	r5, r2
  404dbe:	2d00      	cmp	r5, #0
  404dc0:	dd0e      	ble.n	404de0 <_svfprintf_r+0xd58>
  404dc2:	9926      	ldr	r1, [sp, #152]	; 0x98
  404dc4:	f8c8 5004 	str.w	r5, [r8, #4]
  404dc8:	3101      	adds	r1, #1
  404dca:	4406      	add	r6, r0
  404dcc:	442c      	add	r4, r5
  404dce:	2907      	cmp	r1, #7
  404dd0:	f8c8 6000 	str.w	r6, [r8]
  404dd4:	9427      	str	r4, [sp, #156]	; 0x9c
  404dd6:	9126      	str	r1, [sp, #152]	; 0x98
  404dd8:	f300 823b 	bgt.w	405252 <_svfprintf_r+0x11ca>
  404ddc:	f108 0808 	add.w	r8, r8, #8
  404de0:	2d00      	cmp	r5, #0
  404de2:	bfac      	ite	ge
  404de4:	1b56      	subge	r6, r2, r5
  404de6:	4616      	movlt	r6, r2
  404de8:	2e00      	cmp	r6, #0
  404dea:	f77f ab2d 	ble.w	404448 <_svfprintf_r+0x3c0>
  404dee:	2e10      	cmp	r6, #16
  404df0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404df2:	4db0      	ldr	r5, [pc, #704]	; (4050b4 <_svfprintf_r+0x102c>)
  404df4:	ddb5      	ble.n	404d62 <_svfprintf_r+0xcda>
  404df6:	4622      	mov	r2, r4
  404df8:	2710      	movs	r7, #16
  404dfa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404dfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404e00:	e004      	b.n	404e0c <_svfprintf_r+0xd84>
  404e02:	f108 0808 	add.w	r8, r8, #8
  404e06:	3e10      	subs	r6, #16
  404e08:	2e10      	cmp	r6, #16
  404e0a:	dda9      	ble.n	404d60 <_svfprintf_r+0xcd8>
  404e0c:	3301      	adds	r3, #1
  404e0e:	3210      	adds	r2, #16
  404e10:	2b07      	cmp	r3, #7
  404e12:	9227      	str	r2, [sp, #156]	; 0x9c
  404e14:	9326      	str	r3, [sp, #152]	; 0x98
  404e16:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e1a:	ddf2      	ble.n	404e02 <_svfprintf_r+0xd7a>
  404e1c:	aa25      	add	r2, sp, #148	; 0x94
  404e1e:	4621      	mov	r1, r4
  404e20:	4658      	mov	r0, fp
  404e22:	f002 fa9b 	bl	40735c <__ssprint_r>
  404e26:	2800      	cmp	r0, #0
  404e28:	f47f aa00 	bne.w	40422c <_svfprintf_r+0x1a4>
  404e2c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e30:	46c8      	mov	r8, r9
  404e32:	e7e8      	b.n	404e06 <_svfprintf_r+0xd7e>
  404e34:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e36:	9819      	ldr	r0, [sp, #100]	; 0x64
  404e38:	991a      	ldr	r1, [sp, #104]	; 0x68
  404e3a:	f8c8 1000 	str.w	r1, [r8]
  404e3e:	3301      	adds	r3, #1
  404e40:	4404      	add	r4, r0
  404e42:	2b07      	cmp	r3, #7
  404e44:	9427      	str	r4, [sp, #156]	; 0x9c
  404e46:	f8c8 0004 	str.w	r0, [r8, #4]
  404e4a:	9326      	str	r3, [sp, #152]	; 0x98
  404e4c:	f300 81f5 	bgt.w	40523a <_svfprintf_r+0x11b2>
  404e50:	f108 0808 	add.w	r8, r8, #8
  404e54:	e7ac      	b.n	404db0 <_svfprintf_r+0xd28>
  404e56:	9b07      	ldr	r3, [sp, #28]
  404e58:	07da      	lsls	r2, r3, #31
  404e5a:	f53f adfe 	bmi.w	404a5a <_svfprintf_r+0x9d2>
  404e5e:	3701      	adds	r7, #1
  404e60:	3401      	adds	r4, #1
  404e62:	2301      	movs	r3, #1
  404e64:	2f07      	cmp	r7, #7
  404e66:	9427      	str	r4, [sp, #156]	; 0x9c
  404e68:	9726      	str	r7, [sp, #152]	; 0x98
  404e6a:	f8c8 6000 	str.w	r6, [r8]
  404e6e:	f8c8 3004 	str.w	r3, [r8, #4]
  404e72:	f77f ae25 	ble.w	404ac0 <_svfprintf_r+0xa38>
  404e76:	e74a      	b.n	404d0e <_svfprintf_r+0xc86>
  404e78:	aa25      	add	r2, sp, #148	; 0x94
  404e7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e7c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e7e:	f002 fa6d 	bl	40735c <__ssprint_r>
  404e82:	2800      	cmp	r0, #0
  404e84:	f47f a9d2 	bne.w	40422c <_svfprintf_r+0x1a4>
  404e88:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e8a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404e8c:	46c8      	mov	r8, r9
  404e8e:	e5f2      	b.n	404a76 <_svfprintf_r+0x9ee>
  404e90:	aa25      	add	r2, sp, #148	; 0x94
  404e92:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e94:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e96:	f002 fa61 	bl	40735c <__ssprint_r>
  404e9a:	2800      	cmp	r0, #0
  404e9c:	f47f a9c6 	bne.w	40422c <_svfprintf_r+0x1a4>
  404ea0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ea2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404ea4:	46c8      	mov	r8, r9
  404ea6:	e5f5      	b.n	404a94 <_svfprintf_r+0xa0c>
  404ea8:	464e      	mov	r6, r9
  404eaa:	f7ff b9fd 	b.w	4042a8 <_svfprintf_r+0x220>
  404eae:	aa25      	add	r2, sp, #148	; 0x94
  404eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404eb2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404eb4:	f002 fa52 	bl	40735c <__ssprint_r>
  404eb8:	2800      	cmp	r0, #0
  404eba:	f47f a9b7 	bne.w	40422c <_svfprintf_r+0x1a4>
  404ebe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ec0:	46c8      	mov	r8, r9
  404ec2:	f7ff ba72 	b.w	4043aa <_svfprintf_r+0x322>
  404ec6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404ec8:	4622      	mov	r2, r4
  404eca:	4620      	mov	r0, r4
  404ecc:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404ece:	4623      	mov	r3, r4
  404ed0:	4621      	mov	r1, r4
  404ed2:	f002 ff3f 	bl	407d54 <__aeabi_dcmpun>
  404ed6:	2800      	cmp	r0, #0
  404ed8:	f040 8286 	bne.w	4053e8 <_svfprintf_r+0x1360>
  404edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ede:	3301      	adds	r3, #1
  404ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ee2:	f023 0320 	bic.w	r3, r3, #32
  404ee6:	930e      	str	r3, [sp, #56]	; 0x38
  404ee8:	f000 81e2 	beq.w	4052b0 <_svfprintf_r+0x1228>
  404eec:	2b47      	cmp	r3, #71	; 0x47
  404eee:	f000 811e 	beq.w	40512e <_svfprintf_r+0x10a6>
  404ef2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404ef6:	9307      	str	r3, [sp, #28]
  404ef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404efa:	1e1f      	subs	r7, r3, #0
  404efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404efe:	9308      	str	r3, [sp, #32]
  404f00:	bfbb      	ittet	lt
  404f02:	463b      	movlt	r3, r7
  404f04:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404f08:	2300      	movge	r3, #0
  404f0a:	232d      	movlt	r3, #45	; 0x2d
  404f0c:	9310      	str	r3, [sp, #64]	; 0x40
  404f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f10:	2b66      	cmp	r3, #102	; 0x66
  404f12:	f000 81bb 	beq.w	40528c <_svfprintf_r+0x1204>
  404f16:	2b46      	cmp	r3, #70	; 0x46
  404f18:	f000 80df 	beq.w	4050da <_svfprintf_r+0x1052>
  404f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404f1e:	9a08      	ldr	r2, [sp, #32]
  404f20:	2b45      	cmp	r3, #69	; 0x45
  404f22:	bf0c      	ite	eq
  404f24:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404f26:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404f28:	a823      	add	r0, sp, #140	; 0x8c
  404f2a:	a920      	add	r1, sp, #128	; 0x80
  404f2c:	bf08      	it	eq
  404f2e:	1c5d      	addeq	r5, r3, #1
  404f30:	9004      	str	r0, [sp, #16]
  404f32:	9103      	str	r1, [sp, #12]
  404f34:	a81f      	add	r0, sp, #124	; 0x7c
  404f36:	2102      	movs	r1, #2
  404f38:	463b      	mov	r3, r7
  404f3a:	9002      	str	r0, [sp, #8]
  404f3c:	9501      	str	r5, [sp, #4]
  404f3e:	9100      	str	r1, [sp, #0]
  404f40:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f42:	f000 fb75 	bl	405630 <_dtoa_r>
  404f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f48:	2b67      	cmp	r3, #103	; 0x67
  404f4a:	4606      	mov	r6, r0
  404f4c:	f040 81e0 	bne.w	405310 <_svfprintf_r+0x1288>
  404f50:	f01b 0f01 	tst.w	fp, #1
  404f54:	f000 8246 	beq.w	4053e4 <_svfprintf_r+0x135c>
  404f58:	1974      	adds	r4, r6, r5
  404f5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404f5c:	9808      	ldr	r0, [sp, #32]
  404f5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404f60:	4639      	mov	r1, r7
  404f62:	f002 fec5 	bl	407cf0 <__aeabi_dcmpeq>
  404f66:	2800      	cmp	r0, #0
  404f68:	f040 8165 	bne.w	405236 <_svfprintf_r+0x11ae>
  404f6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404f6e:	42a3      	cmp	r3, r4
  404f70:	d206      	bcs.n	404f80 <_svfprintf_r+0xef8>
  404f72:	2130      	movs	r1, #48	; 0x30
  404f74:	1c5a      	adds	r2, r3, #1
  404f76:	9223      	str	r2, [sp, #140]	; 0x8c
  404f78:	7019      	strb	r1, [r3, #0]
  404f7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404f7c:	429c      	cmp	r4, r3
  404f7e:	d8f9      	bhi.n	404f74 <_svfprintf_r+0xeec>
  404f80:	1b9b      	subs	r3, r3, r6
  404f82:	9313      	str	r3, [sp, #76]	; 0x4c
  404f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404f86:	2b47      	cmp	r3, #71	; 0x47
  404f88:	f000 80e9 	beq.w	40515e <_svfprintf_r+0x10d6>
  404f8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f8e:	2b65      	cmp	r3, #101	; 0x65
  404f90:	f340 81cd 	ble.w	40532e <_svfprintf_r+0x12a6>
  404f94:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f96:	2b66      	cmp	r3, #102	; 0x66
  404f98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f9a:	9312      	str	r3, [sp, #72]	; 0x48
  404f9c:	f000 819e 	beq.w	4052dc <_svfprintf_r+0x1254>
  404fa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404fa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404fa4:	4619      	mov	r1, r3
  404fa6:	4291      	cmp	r1, r2
  404fa8:	f300 818a 	bgt.w	4052c0 <_svfprintf_r+0x1238>
  404fac:	f01b 0f01 	tst.w	fp, #1
  404fb0:	f040 8213 	bne.w	4053da <_svfprintf_r+0x1352>
  404fb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404fb8:	9308      	str	r3, [sp, #32]
  404fba:	2367      	movs	r3, #103	; 0x67
  404fbc:	920e      	str	r2, [sp, #56]	; 0x38
  404fbe:	9311      	str	r3, [sp, #68]	; 0x44
  404fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404fc2:	2b00      	cmp	r3, #0
  404fc4:	f040 80c4 	bne.w	405150 <_svfprintf_r+0x10c8>
  404fc8:	930a      	str	r3, [sp, #40]	; 0x28
  404fca:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404fce:	f7ff b973 	b.w	4042b8 <_svfprintf_r+0x230>
  404fd2:	4635      	mov	r5, r6
  404fd4:	460c      	mov	r4, r1
  404fd6:	4646      	mov	r6, r8
  404fd8:	4690      	mov	r8, r2
  404fda:	3301      	adds	r3, #1
  404fdc:	443c      	add	r4, r7
  404fde:	2b07      	cmp	r3, #7
  404fe0:	9427      	str	r4, [sp, #156]	; 0x9c
  404fe2:	9326      	str	r3, [sp, #152]	; 0x98
  404fe4:	e888 00a0 	stmia.w	r8, {r5, r7}
  404fe8:	f73f aed1 	bgt.w	404d8e <_svfprintf_r+0xd06>
  404fec:	f108 0808 	add.w	r8, r8, #8
  404ff0:	e6d7      	b.n	404da2 <_svfprintf_r+0xd1a>
  404ff2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ff4:	6813      	ldr	r3, [r2, #0]
  404ff6:	3204      	adds	r2, #4
  404ff8:	920f      	str	r2, [sp, #60]	; 0x3c
  404ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404ffc:	601a      	str	r2, [r3, #0]
  404ffe:	f7ff b86a 	b.w	4040d6 <_svfprintf_r+0x4e>
  405002:	aa25      	add	r2, sp, #148	; 0x94
  405004:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405006:	980c      	ldr	r0, [sp, #48]	; 0x30
  405008:	f002 f9a8 	bl	40735c <__ssprint_r>
  40500c:	2800      	cmp	r0, #0
  40500e:	f47f a90d 	bne.w	40422c <_svfprintf_r+0x1a4>
  405012:	46c8      	mov	r8, r9
  405014:	e48d      	b.n	404932 <_svfprintf_r+0x8aa>
  405016:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405018:	4a27      	ldr	r2, [pc, #156]	; (4050b8 <_svfprintf_r+0x1030>)
  40501a:	f8c8 2000 	str.w	r2, [r8]
  40501e:	3301      	adds	r3, #1
  405020:	3401      	adds	r4, #1
  405022:	2201      	movs	r2, #1
  405024:	2b07      	cmp	r3, #7
  405026:	9427      	str	r4, [sp, #156]	; 0x9c
  405028:	9326      	str	r3, [sp, #152]	; 0x98
  40502a:	f8c8 2004 	str.w	r2, [r8, #4]
  40502e:	dc72      	bgt.n	405116 <_svfprintf_r+0x108e>
  405030:	f108 0808 	add.w	r8, r8, #8
  405034:	b929      	cbnz	r1, 405042 <_svfprintf_r+0xfba>
  405036:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405038:	b91b      	cbnz	r3, 405042 <_svfprintf_r+0xfba>
  40503a:	9b07      	ldr	r3, [sp, #28]
  40503c:	07d8      	lsls	r0, r3, #31
  40503e:	f57f aa03 	bpl.w	404448 <_svfprintf_r+0x3c0>
  405042:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405044:	9819      	ldr	r0, [sp, #100]	; 0x64
  405046:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405048:	f8c8 2000 	str.w	r2, [r8]
  40504c:	3301      	adds	r3, #1
  40504e:	4602      	mov	r2, r0
  405050:	4422      	add	r2, r4
  405052:	2b07      	cmp	r3, #7
  405054:	9227      	str	r2, [sp, #156]	; 0x9c
  405056:	f8c8 0004 	str.w	r0, [r8, #4]
  40505a:	9326      	str	r3, [sp, #152]	; 0x98
  40505c:	f300 818d 	bgt.w	40537a <_svfprintf_r+0x12f2>
  405060:	f108 0808 	add.w	r8, r8, #8
  405064:	2900      	cmp	r1, #0
  405066:	f2c0 8165 	blt.w	405334 <_svfprintf_r+0x12ac>
  40506a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40506c:	f8c8 6000 	str.w	r6, [r8]
  405070:	3301      	adds	r3, #1
  405072:	188c      	adds	r4, r1, r2
  405074:	2b07      	cmp	r3, #7
  405076:	9427      	str	r4, [sp, #156]	; 0x9c
  405078:	9326      	str	r3, [sp, #152]	; 0x98
  40507a:	f8c8 1004 	str.w	r1, [r8, #4]
  40507e:	f77f a9e1 	ble.w	404444 <_svfprintf_r+0x3bc>
  405082:	e52c      	b.n	404ade <_svfprintf_r+0xa56>
  405084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405086:	9909      	ldr	r1, [sp, #36]	; 0x24
  405088:	6813      	ldr	r3, [r2, #0]
  40508a:	17cd      	asrs	r5, r1, #31
  40508c:	4608      	mov	r0, r1
  40508e:	3204      	adds	r2, #4
  405090:	4629      	mov	r1, r5
  405092:	920f      	str	r2, [sp, #60]	; 0x3c
  405094:	e9c3 0100 	strd	r0, r1, [r3]
  405098:	f7ff b81d 	b.w	4040d6 <_svfprintf_r+0x4e>
  40509c:	aa25      	add	r2, sp, #148	; 0x94
  40509e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050a0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050a2:	f002 f95b 	bl	40735c <__ssprint_r>
  4050a6:	2800      	cmp	r0, #0
  4050a8:	f47f a8c0 	bne.w	40422c <_svfprintf_r+0x1a4>
  4050ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4050ae:	46c8      	mov	r8, r9
  4050b0:	e458      	b.n	404964 <_svfprintf_r+0x8dc>
  4050b2:	bf00      	nop
  4050b4:	00408894 	.word	0x00408894
  4050b8:	00408880 	.word	0x00408880
  4050bc:	2140      	movs	r1, #64	; 0x40
  4050be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050c0:	f001 fa0c 	bl	4064dc <_malloc_r>
  4050c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4050c6:	6010      	str	r0, [r2, #0]
  4050c8:	6110      	str	r0, [r2, #16]
  4050ca:	2800      	cmp	r0, #0
  4050cc:	f000 81f2 	beq.w	4054b4 <_svfprintf_r+0x142c>
  4050d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4050d2:	2340      	movs	r3, #64	; 0x40
  4050d4:	6153      	str	r3, [r2, #20]
  4050d6:	f7fe bfee 	b.w	4040b6 <_svfprintf_r+0x2e>
  4050da:	a823      	add	r0, sp, #140	; 0x8c
  4050dc:	a920      	add	r1, sp, #128	; 0x80
  4050de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4050e0:	9004      	str	r0, [sp, #16]
  4050e2:	9103      	str	r1, [sp, #12]
  4050e4:	a81f      	add	r0, sp, #124	; 0x7c
  4050e6:	2103      	movs	r1, #3
  4050e8:	9002      	str	r0, [sp, #8]
  4050ea:	9a08      	ldr	r2, [sp, #32]
  4050ec:	9401      	str	r4, [sp, #4]
  4050ee:	463b      	mov	r3, r7
  4050f0:	9100      	str	r1, [sp, #0]
  4050f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050f4:	f000 fa9c 	bl	405630 <_dtoa_r>
  4050f8:	4625      	mov	r5, r4
  4050fa:	4606      	mov	r6, r0
  4050fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4050fe:	2b46      	cmp	r3, #70	; 0x46
  405100:	eb06 0405 	add.w	r4, r6, r5
  405104:	f47f af29 	bne.w	404f5a <_svfprintf_r+0xed2>
  405108:	7833      	ldrb	r3, [r6, #0]
  40510a:	2b30      	cmp	r3, #48	; 0x30
  40510c:	f000 8178 	beq.w	405400 <_svfprintf_r+0x1378>
  405110:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405112:	442c      	add	r4, r5
  405114:	e721      	b.n	404f5a <_svfprintf_r+0xed2>
  405116:	aa25      	add	r2, sp, #148	; 0x94
  405118:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40511a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40511c:	f002 f91e 	bl	40735c <__ssprint_r>
  405120:	2800      	cmp	r0, #0
  405122:	f47f a883 	bne.w	40422c <_svfprintf_r+0x1a4>
  405126:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405128:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40512a:	46c8      	mov	r8, r9
  40512c:	e782      	b.n	405034 <_svfprintf_r+0xfac>
  40512e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405130:	2b00      	cmp	r3, #0
  405132:	bf08      	it	eq
  405134:	2301      	moveq	r3, #1
  405136:	930a      	str	r3, [sp, #40]	; 0x28
  405138:	e6db      	b.n	404ef2 <_svfprintf_r+0xe6a>
  40513a:	4630      	mov	r0, r6
  40513c:	940a      	str	r4, [sp, #40]	; 0x28
  40513e:	f002 f89f 	bl	407280 <strlen>
  405142:	950f      	str	r5, [sp, #60]	; 0x3c
  405144:	900e      	str	r0, [sp, #56]	; 0x38
  405146:	f8cd b01c 	str.w	fp, [sp, #28]
  40514a:	4603      	mov	r3, r0
  40514c:	f7ff b9f9 	b.w	404542 <_svfprintf_r+0x4ba>
  405150:	272d      	movs	r7, #45	; 0x2d
  405152:	2300      	movs	r3, #0
  405154:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405158:	930a      	str	r3, [sp, #40]	; 0x28
  40515a:	f7ff b8ae 	b.w	4042ba <_svfprintf_r+0x232>
  40515e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405160:	9312      	str	r3, [sp, #72]	; 0x48
  405162:	461a      	mov	r2, r3
  405164:	3303      	adds	r3, #3
  405166:	db04      	blt.n	405172 <_svfprintf_r+0x10ea>
  405168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40516a:	4619      	mov	r1, r3
  40516c:	4291      	cmp	r1, r2
  40516e:	f6bf af17 	bge.w	404fa0 <_svfprintf_r+0xf18>
  405172:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405174:	3b02      	subs	r3, #2
  405176:	9311      	str	r3, [sp, #68]	; 0x44
  405178:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40517c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405180:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405182:	3b01      	subs	r3, #1
  405184:	2b00      	cmp	r3, #0
  405186:	931f      	str	r3, [sp, #124]	; 0x7c
  405188:	bfbd      	ittte	lt
  40518a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40518c:	f1c3 0301 	rsblt	r3, r3, #1
  405190:	222d      	movlt	r2, #45	; 0x2d
  405192:	222b      	movge	r2, #43	; 0x2b
  405194:	2b09      	cmp	r3, #9
  405196:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40519a:	f340 8116 	ble.w	4053ca <_svfprintf_r+0x1342>
  40519e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4051a2:	4620      	mov	r0, r4
  4051a4:	4dab      	ldr	r5, [pc, #684]	; (405454 <_svfprintf_r+0x13cc>)
  4051a6:	e000      	b.n	4051aa <_svfprintf_r+0x1122>
  4051a8:	4610      	mov	r0, r2
  4051aa:	fb85 1203 	smull	r1, r2, r5, r3
  4051ae:	17d9      	asrs	r1, r3, #31
  4051b0:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4051b4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4051b8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4051bc:	3230      	adds	r2, #48	; 0x30
  4051be:	2909      	cmp	r1, #9
  4051c0:	f800 2c01 	strb.w	r2, [r0, #-1]
  4051c4:	460b      	mov	r3, r1
  4051c6:	f100 32ff 	add.w	r2, r0, #4294967295
  4051ca:	dced      	bgt.n	4051a8 <_svfprintf_r+0x1120>
  4051cc:	3330      	adds	r3, #48	; 0x30
  4051ce:	3802      	subs	r0, #2
  4051d0:	b2d9      	uxtb	r1, r3
  4051d2:	4284      	cmp	r4, r0
  4051d4:	f802 1c01 	strb.w	r1, [r2, #-1]
  4051d8:	f240 8165 	bls.w	4054a6 <_svfprintf_r+0x141e>
  4051dc:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4051e0:	4613      	mov	r3, r2
  4051e2:	e001      	b.n	4051e8 <_svfprintf_r+0x1160>
  4051e4:	f813 1b01 	ldrb.w	r1, [r3], #1
  4051e8:	f800 1b01 	strb.w	r1, [r0], #1
  4051ec:	42a3      	cmp	r3, r4
  4051ee:	d1f9      	bne.n	4051e4 <_svfprintf_r+0x115c>
  4051f0:	3301      	adds	r3, #1
  4051f2:	1a9b      	subs	r3, r3, r2
  4051f4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4051f8:	4413      	add	r3, r2
  4051fa:	aa21      	add	r2, sp, #132	; 0x84
  4051fc:	1a9b      	subs	r3, r3, r2
  4051fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405200:	931b      	str	r3, [sp, #108]	; 0x6c
  405202:	2a01      	cmp	r2, #1
  405204:	4413      	add	r3, r2
  405206:	930e      	str	r3, [sp, #56]	; 0x38
  405208:	f340 8119 	ble.w	40543e <_svfprintf_r+0x13b6>
  40520c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40520e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405210:	4413      	add	r3, r2
  405212:	930e      	str	r3, [sp, #56]	; 0x38
  405214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405218:	9308      	str	r3, [sp, #32]
  40521a:	2300      	movs	r3, #0
  40521c:	9312      	str	r3, [sp, #72]	; 0x48
  40521e:	e6cf      	b.n	404fc0 <_svfprintf_r+0xf38>
  405220:	aa25      	add	r2, sp, #148	; 0x94
  405222:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405224:	980c      	ldr	r0, [sp, #48]	; 0x30
  405226:	f002 f899 	bl	40735c <__ssprint_r>
  40522a:	2800      	cmp	r0, #0
  40522c:	f47e affe 	bne.w	40422c <_svfprintf_r+0x1a4>
  405230:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405232:	46c8      	mov	r8, r9
  405234:	e4d7      	b.n	404be6 <_svfprintf_r+0xb5e>
  405236:	4623      	mov	r3, r4
  405238:	e6a2      	b.n	404f80 <_svfprintf_r+0xef8>
  40523a:	aa25      	add	r2, sp, #148	; 0x94
  40523c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40523e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405240:	f002 f88c 	bl	40735c <__ssprint_r>
  405244:	2800      	cmp	r0, #0
  405246:	f47e aff1 	bne.w	40422c <_svfprintf_r+0x1a4>
  40524a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40524c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40524e:	46c8      	mov	r8, r9
  405250:	e5ae      	b.n	404db0 <_svfprintf_r+0xd28>
  405252:	aa25      	add	r2, sp, #148	; 0x94
  405254:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405256:	980c      	ldr	r0, [sp, #48]	; 0x30
  405258:	f002 f880 	bl	40735c <__ssprint_r>
  40525c:	2800      	cmp	r0, #0
  40525e:	f47e afe5 	bne.w	40422c <_svfprintf_r+0x1a4>
  405262:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405266:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405268:	1a9a      	subs	r2, r3, r2
  40526a:	46c8      	mov	r8, r9
  40526c:	e5b8      	b.n	404de0 <_svfprintf_r+0xd58>
  40526e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405270:	9612      	str	r6, [sp, #72]	; 0x48
  405272:	2b06      	cmp	r3, #6
  405274:	bf28      	it	cs
  405276:	2306      	movcs	r3, #6
  405278:	960a      	str	r6, [sp, #40]	; 0x28
  40527a:	4637      	mov	r7, r6
  40527c:	9308      	str	r3, [sp, #32]
  40527e:	950f      	str	r5, [sp, #60]	; 0x3c
  405280:	f8cd b01c 	str.w	fp, [sp, #28]
  405284:	930e      	str	r3, [sp, #56]	; 0x38
  405286:	4e74      	ldr	r6, [pc, #464]	; (405458 <_svfprintf_r+0x13d0>)
  405288:	f7ff b816 	b.w	4042b8 <_svfprintf_r+0x230>
  40528c:	a823      	add	r0, sp, #140	; 0x8c
  40528e:	a920      	add	r1, sp, #128	; 0x80
  405290:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405292:	9004      	str	r0, [sp, #16]
  405294:	9103      	str	r1, [sp, #12]
  405296:	a81f      	add	r0, sp, #124	; 0x7c
  405298:	2103      	movs	r1, #3
  40529a:	9002      	str	r0, [sp, #8]
  40529c:	9a08      	ldr	r2, [sp, #32]
  40529e:	9501      	str	r5, [sp, #4]
  4052a0:	463b      	mov	r3, r7
  4052a2:	9100      	str	r1, [sp, #0]
  4052a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4052a6:	f000 f9c3 	bl	405630 <_dtoa_r>
  4052aa:	4606      	mov	r6, r0
  4052ac:	1944      	adds	r4, r0, r5
  4052ae:	e72b      	b.n	405108 <_svfprintf_r+0x1080>
  4052b0:	2306      	movs	r3, #6
  4052b2:	930a      	str	r3, [sp, #40]	; 0x28
  4052b4:	e61d      	b.n	404ef2 <_svfprintf_r+0xe6a>
  4052b6:	272d      	movs	r7, #45	; 0x2d
  4052b8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4052bc:	f7ff bacd 	b.w	40485a <_svfprintf_r+0x7d2>
  4052c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4052c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4052c4:	4413      	add	r3, r2
  4052c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4052c8:	930e      	str	r3, [sp, #56]	; 0x38
  4052ca:	2a00      	cmp	r2, #0
  4052cc:	f340 80b0 	ble.w	405430 <_svfprintf_r+0x13a8>
  4052d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4052d4:	9308      	str	r3, [sp, #32]
  4052d6:	2367      	movs	r3, #103	; 0x67
  4052d8:	9311      	str	r3, [sp, #68]	; 0x44
  4052da:	e671      	b.n	404fc0 <_svfprintf_r+0xf38>
  4052dc:	2b00      	cmp	r3, #0
  4052de:	f340 80c3 	ble.w	405468 <_svfprintf_r+0x13e0>
  4052e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052e4:	2a00      	cmp	r2, #0
  4052e6:	f040 8099 	bne.w	40541c <_svfprintf_r+0x1394>
  4052ea:	f01b 0f01 	tst.w	fp, #1
  4052ee:	f040 8095 	bne.w	40541c <_svfprintf_r+0x1394>
  4052f2:	9308      	str	r3, [sp, #32]
  4052f4:	930e      	str	r3, [sp, #56]	; 0x38
  4052f6:	e663      	b.n	404fc0 <_svfprintf_r+0xf38>
  4052f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052fa:	9308      	str	r3, [sp, #32]
  4052fc:	930e      	str	r3, [sp, #56]	; 0x38
  4052fe:	900a      	str	r0, [sp, #40]	; 0x28
  405300:	950f      	str	r5, [sp, #60]	; 0x3c
  405302:	f8cd b01c 	str.w	fp, [sp, #28]
  405306:	9012      	str	r0, [sp, #72]	; 0x48
  405308:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40530c:	f7fe bfd4 	b.w	4042b8 <_svfprintf_r+0x230>
  405310:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405312:	2b47      	cmp	r3, #71	; 0x47
  405314:	f47f ae20 	bne.w	404f58 <_svfprintf_r+0xed0>
  405318:	f01b 0f01 	tst.w	fp, #1
  40531c:	f47f aeee 	bne.w	4050fc <_svfprintf_r+0x1074>
  405320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405322:	1b9b      	subs	r3, r3, r6
  405324:	9313      	str	r3, [sp, #76]	; 0x4c
  405326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405328:	2b47      	cmp	r3, #71	; 0x47
  40532a:	f43f af18 	beq.w	40515e <_svfprintf_r+0x10d6>
  40532e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405330:	9312      	str	r3, [sp, #72]	; 0x48
  405332:	e721      	b.n	405178 <_svfprintf_r+0x10f0>
  405334:	424f      	negs	r7, r1
  405336:	3110      	adds	r1, #16
  405338:	4d48      	ldr	r5, [pc, #288]	; (40545c <_svfprintf_r+0x13d4>)
  40533a:	da2f      	bge.n	40539c <_svfprintf_r+0x1314>
  40533c:	2410      	movs	r4, #16
  40533e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405342:	e004      	b.n	40534e <_svfprintf_r+0x12c6>
  405344:	f108 0808 	add.w	r8, r8, #8
  405348:	3f10      	subs	r7, #16
  40534a:	2f10      	cmp	r7, #16
  40534c:	dd26      	ble.n	40539c <_svfprintf_r+0x1314>
  40534e:	3301      	adds	r3, #1
  405350:	3210      	adds	r2, #16
  405352:	2b07      	cmp	r3, #7
  405354:	9227      	str	r2, [sp, #156]	; 0x9c
  405356:	9326      	str	r3, [sp, #152]	; 0x98
  405358:	f8c8 5000 	str.w	r5, [r8]
  40535c:	f8c8 4004 	str.w	r4, [r8, #4]
  405360:	ddf0      	ble.n	405344 <_svfprintf_r+0x12bc>
  405362:	aa25      	add	r2, sp, #148	; 0x94
  405364:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405366:	4658      	mov	r0, fp
  405368:	f001 fff8 	bl	40735c <__ssprint_r>
  40536c:	2800      	cmp	r0, #0
  40536e:	f47e af5d 	bne.w	40422c <_svfprintf_r+0x1a4>
  405372:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405374:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405376:	46c8      	mov	r8, r9
  405378:	e7e6      	b.n	405348 <_svfprintf_r+0x12c0>
  40537a:	aa25      	add	r2, sp, #148	; 0x94
  40537c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40537e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405380:	f001 ffec 	bl	40735c <__ssprint_r>
  405384:	2800      	cmp	r0, #0
  405386:	f47e af51 	bne.w	40422c <_svfprintf_r+0x1a4>
  40538a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40538c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40538e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405390:	46c8      	mov	r8, r9
  405392:	e667      	b.n	405064 <_svfprintf_r+0xfdc>
  405394:	2000      	movs	r0, #0
  405396:	900a      	str	r0, [sp, #40]	; 0x28
  405398:	f7fe bed0 	b.w	40413c <_svfprintf_r+0xb4>
  40539c:	3301      	adds	r3, #1
  40539e:	443a      	add	r2, r7
  4053a0:	2b07      	cmp	r3, #7
  4053a2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4053a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4053a8:	9326      	str	r3, [sp, #152]	; 0x98
  4053aa:	f108 0808 	add.w	r8, r8, #8
  4053ae:	f77f ae5c 	ble.w	40506a <_svfprintf_r+0xfe2>
  4053b2:	aa25      	add	r2, sp, #148	; 0x94
  4053b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053b8:	f001 ffd0 	bl	40735c <__ssprint_r>
  4053bc:	2800      	cmp	r0, #0
  4053be:	f47e af35 	bne.w	40422c <_svfprintf_r+0x1a4>
  4053c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4053c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4053c6:	46c8      	mov	r8, r9
  4053c8:	e64f      	b.n	40506a <_svfprintf_r+0xfe2>
  4053ca:	3330      	adds	r3, #48	; 0x30
  4053cc:	2230      	movs	r2, #48	; 0x30
  4053ce:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4053d2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4053d6:	ab22      	add	r3, sp, #136	; 0x88
  4053d8:	e70f      	b.n	4051fa <_svfprintf_r+0x1172>
  4053da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4053dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4053de:	4413      	add	r3, r2
  4053e0:	930e      	str	r3, [sp, #56]	; 0x38
  4053e2:	e775      	b.n	4052d0 <_svfprintf_r+0x1248>
  4053e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4053e6:	e5cb      	b.n	404f80 <_svfprintf_r+0xef8>
  4053e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4053ea:	4e1d      	ldr	r6, [pc, #116]	; (405460 <_svfprintf_r+0x13d8>)
  4053ec:	2b00      	cmp	r3, #0
  4053ee:	bfb6      	itet	lt
  4053f0:	272d      	movlt	r7, #45	; 0x2d
  4053f2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4053f6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4053fa:	4b1a      	ldr	r3, [pc, #104]	; (405464 <_svfprintf_r+0x13dc>)
  4053fc:	f7ff ba2f 	b.w	40485e <_svfprintf_r+0x7d6>
  405400:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405402:	9808      	ldr	r0, [sp, #32]
  405404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405406:	4639      	mov	r1, r7
  405408:	f002 fc72 	bl	407cf0 <__aeabi_dcmpeq>
  40540c:	2800      	cmp	r0, #0
  40540e:	f47f ae7f 	bne.w	405110 <_svfprintf_r+0x1088>
  405412:	f1c5 0501 	rsb	r5, r5, #1
  405416:	951f      	str	r5, [sp, #124]	; 0x7c
  405418:	442c      	add	r4, r5
  40541a:	e59e      	b.n	404f5a <_svfprintf_r+0xed2>
  40541c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40541e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405420:	4413      	add	r3, r2
  405422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405424:	441a      	add	r2, r3
  405426:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40542a:	920e      	str	r2, [sp, #56]	; 0x38
  40542c:	9308      	str	r3, [sp, #32]
  40542e:	e5c7      	b.n	404fc0 <_svfprintf_r+0xf38>
  405430:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405434:	f1c3 0301 	rsb	r3, r3, #1
  405438:	441a      	add	r2, r3
  40543a:	4613      	mov	r3, r2
  40543c:	e7d0      	b.n	4053e0 <_svfprintf_r+0x1358>
  40543e:	f01b 0301 	ands.w	r3, fp, #1
  405442:	9312      	str	r3, [sp, #72]	; 0x48
  405444:	f47f aee2 	bne.w	40520c <_svfprintf_r+0x1184>
  405448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40544a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40544e:	9308      	str	r3, [sp, #32]
  405450:	e5b6      	b.n	404fc0 <_svfprintf_r+0xf38>
  405452:	bf00      	nop
  405454:	66666667 	.word	0x66666667
  405458:	00408878 	.word	0x00408878
  40545c:	00408894 	.word	0x00408894
  405460:	0040884c 	.word	0x0040884c
  405464:	00408848 	.word	0x00408848
  405468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40546a:	b913      	cbnz	r3, 405472 <_svfprintf_r+0x13ea>
  40546c:	f01b 0f01 	tst.w	fp, #1
  405470:	d002      	beq.n	405478 <_svfprintf_r+0x13f0>
  405472:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405474:	3301      	adds	r3, #1
  405476:	e7d4      	b.n	405422 <_svfprintf_r+0x139a>
  405478:	2301      	movs	r3, #1
  40547a:	e73a      	b.n	4052f2 <_svfprintf_r+0x126a>
  40547c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40547e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405482:	6828      	ldr	r0, [r5, #0]
  405484:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405488:	900a      	str	r0, [sp, #40]	; 0x28
  40548a:	4628      	mov	r0, r5
  40548c:	3004      	adds	r0, #4
  40548e:	46a2      	mov	sl, r4
  405490:	900f      	str	r0, [sp, #60]	; 0x3c
  405492:	f7fe be51 	b.w	404138 <_svfprintf_r+0xb0>
  405496:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40549a:	f7ff b867 	b.w	40456c <_svfprintf_r+0x4e4>
  40549e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4054a2:	f7ff ba15 	b.w	4048d0 <_svfprintf_r+0x848>
  4054a6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4054aa:	e6a6      	b.n	4051fa <_svfprintf_r+0x1172>
  4054ac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4054b0:	f7ff b8eb 	b.w	40468a <_svfprintf_r+0x602>
  4054b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4054b6:	230c      	movs	r3, #12
  4054b8:	6013      	str	r3, [r2, #0]
  4054ba:	f04f 33ff 	mov.w	r3, #4294967295
  4054be:	9309      	str	r3, [sp, #36]	; 0x24
  4054c0:	f7fe bebd 	b.w	40423e <_svfprintf_r+0x1b6>
  4054c4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4054c8:	f7ff b99a 	b.w	404800 <_svfprintf_r+0x778>
  4054cc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4054d0:	f7ff b976 	b.w	4047c0 <_svfprintf_r+0x738>
  4054d4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4054d8:	f7ff b959 	b.w	40478e <_svfprintf_r+0x706>
  4054dc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4054e0:	f7ff b912 	b.w	404708 <_svfprintf_r+0x680>

004054e4 <register_fini>:
  4054e4:	4b02      	ldr	r3, [pc, #8]	; (4054f0 <register_fini+0xc>)
  4054e6:	b113      	cbz	r3, 4054ee <register_fini+0xa>
  4054e8:	4802      	ldr	r0, [pc, #8]	; (4054f4 <register_fini+0x10>)
  4054ea:	f000 b805 	b.w	4054f8 <atexit>
  4054ee:	4770      	bx	lr
  4054f0:	00000000 	.word	0x00000000
  4054f4:	00406485 	.word	0x00406485

004054f8 <atexit>:
  4054f8:	2300      	movs	r3, #0
  4054fa:	4601      	mov	r1, r0
  4054fc:	461a      	mov	r2, r3
  4054fe:	4618      	mov	r0, r3
  405500:	f001 bfaa 	b.w	407458 <__register_exitproc>

00405504 <quorem>:
  405504:	6902      	ldr	r2, [r0, #16]
  405506:	690b      	ldr	r3, [r1, #16]
  405508:	4293      	cmp	r3, r2
  40550a:	f300 808d 	bgt.w	405628 <quorem+0x124>
  40550e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405512:	f103 38ff 	add.w	r8, r3, #4294967295
  405516:	f101 0714 	add.w	r7, r1, #20
  40551a:	f100 0b14 	add.w	fp, r0, #20
  40551e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405522:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405526:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40552a:	b083      	sub	sp, #12
  40552c:	3201      	adds	r2, #1
  40552e:	fbb3 f9f2 	udiv	r9, r3, r2
  405532:	eb0b 0304 	add.w	r3, fp, r4
  405536:	9400      	str	r4, [sp, #0]
  405538:	eb07 0a04 	add.w	sl, r7, r4
  40553c:	9301      	str	r3, [sp, #4]
  40553e:	f1b9 0f00 	cmp.w	r9, #0
  405542:	d039      	beq.n	4055b8 <quorem+0xb4>
  405544:	2500      	movs	r5, #0
  405546:	462e      	mov	r6, r5
  405548:	46bc      	mov	ip, r7
  40554a:	46de      	mov	lr, fp
  40554c:	f85c 4b04 	ldr.w	r4, [ip], #4
  405550:	f8de 3000 	ldr.w	r3, [lr]
  405554:	b2a2      	uxth	r2, r4
  405556:	fb09 5502 	mla	r5, r9, r2, r5
  40555a:	0c22      	lsrs	r2, r4, #16
  40555c:	0c2c      	lsrs	r4, r5, #16
  40555e:	fb09 4202 	mla	r2, r9, r2, r4
  405562:	b2ad      	uxth	r5, r5
  405564:	1b75      	subs	r5, r6, r5
  405566:	b296      	uxth	r6, r2
  405568:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40556c:	fa15 f383 	uxtah	r3, r5, r3
  405570:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405574:	b29b      	uxth	r3, r3
  405576:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40557a:	45e2      	cmp	sl, ip
  40557c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405580:	f84e 3b04 	str.w	r3, [lr], #4
  405584:	ea4f 4626 	mov.w	r6, r6, asr #16
  405588:	d2e0      	bcs.n	40554c <quorem+0x48>
  40558a:	9b00      	ldr	r3, [sp, #0]
  40558c:	f85b 3003 	ldr.w	r3, [fp, r3]
  405590:	b993      	cbnz	r3, 4055b8 <quorem+0xb4>
  405592:	9c01      	ldr	r4, [sp, #4]
  405594:	1f23      	subs	r3, r4, #4
  405596:	459b      	cmp	fp, r3
  405598:	d20c      	bcs.n	4055b4 <quorem+0xb0>
  40559a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40559e:	b94b      	cbnz	r3, 4055b4 <quorem+0xb0>
  4055a0:	f1a4 0308 	sub.w	r3, r4, #8
  4055a4:	e002      	b.n	4055ac <quorem+0xa8>
  4055a6:	681a      	ldr	r2, [r3, #0]
  4055a8:	3b04      	subs	r3, #4
  4055aa:	b91a      	cbnz	r2, 4055b4 <quorem+0xb0>
  4055ac:	459b      	cmp	fp, r3
  4055ae:	f108 38ff 	add.w	r8, r8, #4294967295
  4055b2:	d3f8      	bcc.n	4055a6 <quorem+0xa2>
  4055b4:	f8c0 8010 	str.w	r8, [r0, #16]
  4055b8:	4604      	mov	r4, r0
  4055ba:	f001 fd35 	bl	407028 <__mcmp>
  4055be:	2800      	cmp	r0, #0
  4055c0:	db2e      	blt.n	405620 <quorem+0x11c>
  4055c2:	f109 0901 	add.w	r9, r9, #1
  4055c6:	465d      	mov	r5, fp
  4055c8:	2300      	movs	r3, #0
  4055ca:	f857 1b04 	ldr.w	r1, [r7], #4
  4055ce:	6828      	ldr	r0, [r5, #0]
  4055d0:	b28a      	uxth	r2, r1
  4055d2:	1a9a      	subs	r2, r3, r2
  4055d4:	0c0b      	lsrs	r3, r1, #16
  4055d6:	fa12 f280 	uxtah	r2, r2, r0
  4055da:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4055de:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4055e2:	b292      	uxth	r2, r2
  4055e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4055e8:	45ba      	cmp	sl, r7
  4055ea:	f845 2b04 	str.w	r2, [r5], #4
  4055ee:	ea4f 4323 	mov.w	r3, r3, asr #16
  4055f2:	d2ea      	bcs.n	4055ca <quorem+0xc6>
  4055f4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4055f8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4055fc:	b982      	cbnz	r2, 405620 <quorem+0x11c>
  4055fe:	1f1a      	subs	r2, r3, #4
  405600:	4593      	cmp	fp, r2
  405602:	d20b      	bcs.n	40561c <quorem+0x118>
  405604:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405608:	b942      	cbnz	r2, 40561c <quorem+0x118>
  40560a:	3b08      	subs	r3, #8
  40560c:	e002      	b.n	405614 <quorem+0x110>
  40560e:	681a      	ldr	r2, [r3, #0]
  405610:	3b04      	subs	r3, #4
  405612:	b91a      	cbnz	r2, 40561c <quorem+0x118>
  405614:	459b      	cmp	fp, r3
  405616:	f108 38ff 	add.w	r8, r8, #4294967295
  40561a:	d3f8      	bcc.n	40560e <quorem+0x10a>
  40561c:	f8c4 8010 	str.w	r8, [r4, #16]
  405620:	4648      	mov	r0, r9
  405622:	b003      	add	sp, #12
  405624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405628:	2000      	movs	r0, #0
  40562a:	4770      	bx	lr
  40562c:	0000      	movs	r0, r0
	...

00405630 <_dtoa_r>:
  405630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405634:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405636:	b09b      	sub	sp, #108	; 0x6c
  405638:	4604      	mov	r4, r0
  40563a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40563c:	4692      	mov	sl, r2
  40563e:	469b      	mov	fp, r3
  405640:	b141      	cbz	r1, 405654 <_dtoa_r+0x24>
  405642:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405644:	604a      	str	r2, [r1, #4]
  405646:	2301      	movs	r3, #1
  405648:	4093      	lsls	r3, r2
  40564a:	608b      	str	r3, [r1, #8]
  40564c:	f001 fb14 	bl	406c78 <_Bfree>
  405650:	2300      	movs	r3, #0
  405652:	6423      	str	r3, [r4, #64]	; 0x40
  405654:	f1bb 0f00 	cmp.w	fp, #0
  405658:	465d      	mov	r5, fp
  40565a:	db35      	blt.n	4056c8 <_dtoa_r+0x98>
  40565c:	2300      	movs	r3, #0
  40565e:	6033      	str	r3, [r6, #0]
  405660:	4b9d      	ldr	r3, [pc, #628]	; (4058d8 <_dtoa_r+0x2a8>)
  405662:	43ab      	bics	r3, r5
  405664:	d015      	beq.n	405692 <_dtoa_r+0x62>
  405666:	4650      	mov	r0, sl
  405668:	4659      	mov	r1, fp
  40566a:	2200      	movs	r2, #0
  40566c:	2300      	movs	r3, #0
  40566e:	f002 fb3f 	bl	407cf0 <__aeabi_dcmpeq>
  405672:	4680      	mov	r8, r0
  405674:	2800      	cmp	r0, #0
  405676:	d02d      	beq.n	4056d4 <_dtoa_r+0xa4>
  405678:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40567a:	2301      	movs	r3, #1
  40567c:	6013      	str	r3, [r2, #0]
  40567e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405680:	2b00      	cmp	r3, #0
  405682:	f000 80bd 	beq.w	405800 <_dtoa_r+0x1d0>
  405686:	4895      	ldr	r0, [pc, #596]	; (4058dc <_dtoa_r+0x2ac>)
  405688:	6018      	str	r0, [r3, #0]
  40568a:	3801      	subs	r0, #1
  40568c:	b01b      	add	sp, #108	; 0x6c
  40568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405692:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405694:	f242 730f 	movw	r3, #9999	; 0x270f
  405698:	6013      	str	r3, [r2, #0]
  40569a:	f1ba 0f00 	cmp.w	sl, #0
  40569e:	d10d      	bne.n	4056bc <_dtoa_r+0x8c>
  4056a0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4056a4:	b955      	cbnz	r5, 4056bc <_dtoa_r+0x8c>
  4056a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4056a8:	488d      	ldr	r0, [pc, #564]	; (4058e0 <_dtoa_r+0x2b0>)
  4056aa:	2b00      	cmp	r3, #0
  4056ac:	d0ee      	beq.n	40568c <_dtoa_r+0x5c>
  4056ae:	f100 0308 	add.w	r3, r0, #8
  4056b2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4056b4:	6013      	str	r3, [r2, #0]
  4056b6:	b01b      	add	sp, #108	; 0x6c
  4056b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4056be:	4889      	ldr	r0, [pc, #548]	; (4058e4 <_dtoa_r+0x2b4>)
  4056c0:	2b00      	cmp	r3, #0
  4056c2:	d0e3      	beq.n	40568c <_dtoa_r+0x5c>
  4056c4:	1cc3      	adds	r3, r0, #3
  4056c6:	e7f4      	b.n	4056b2 <_dtoa_r+0x82>
  4056c8:	2301      	movs	r3, #1
  4056ca:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4056ce:	6033      	str	r3, [r6, #0]
  4056d0:	46ab      	mov	fp, r5
  4056d2:	e7c5      	b.n	405660 <_dtoa_r+0x30>
  4056d4:	aa18      	add	r2, sp, #96	; 0x60
  4056d6:	ab19      	add	r3, sp, #100	; 0x64
  4056d8:	9201      	str	r2, [sp, #4]
  4056da:	9300      	str	r3, [sp, #0]
  4056dc:	4652      	mov	r2, sl
  4056de:	465b      	mov	r3, fp
  4056e0:	4620      	mov	r0, r4
  4056e2:	f001 fd41 	bl	407168 <__d2b>
  4056e6:	0d2b      	lsrs	r3, r5, #20
  4056e8:	4681      	mov	r9, r0
  4056ea:	d071      	beq.n	4057d0 <_dtoa_r+0x1a0>
  4056ec:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4056f0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4056f4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4056f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4056fa:	4650      	mov	r0, sl
  4056fc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405700:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405704:	2200      	movs	r2, #0
  405706:	4b78      	ldr	r3, [pc, #480]	; (4058e8 <_dtoa_r+0x2b8>)
  405708:	f7fd fe84 	bl	403414 <__aeabi_dsub>
  40570c:	a36c      	add	r3, pc, #432	; (adr r3, 4058c0 <_dtoa_r+0x290>)
  40570e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405712:	f7fe f833 	bl	40377c <__aeabi_dmul>
  405716:	a36c      	add	r3, pc, #432	; (adr r3, 4058c8 <_dtoa_r+0x298>)
  405718:	e9d3 2300 	ldrd	r2, r3, [r3]
  40571c:	f7fd fe7c 	bl	403418 <__adddf3>
  405720:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405724:	4630      	mov	r0, r6
  405726:	f7fd ffc3 	bl	4036b0 <__aeabi_i2d>
  40572a:	a369      	add	r3, pc, #420	; (adr r3, 4058d0 <_dtoa_r+0x2a0>)
  40572c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405730:	f7fe f824 	bl	40377c <__aeabi_dmul>
  405734:	4602      	mov	r2, r0
  405736:	460b      	mov	r3, r1
  405738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40573c:	f7fd fe6c 	bl	403418 <__adddf3>
  405740:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405744:	f002 fb1c 	bl	407d80 <__aeabi_d2iz>
  405748:	2200      	movs	r2, #0
  40574a:	9002      	str	r0, [sp, #8]
  40574c:	2300      	movs	r3, #0
  40574e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405752:	f002 fad7 	bl	407d04 <__aeabi_dcmplt>
  405756:	2800      	cmp	r0, #0
  405758:	f040 8173 	bne.w	405a42 <_dtoa_r+0x412>
  40575c:	9d02      	ldr	r5, [sp, #8]
  40575e:	2d16      	cmp	r5, #22
  405760:	f200 815d 	bhi.w	405a1e <_dtoa_r+0x3ee>
  405764:	4b61      	ldr	r3, [pc, #388]	; (4058ec <_dtoa_r+0x2bc>)
  405766:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40576a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40576e:	4652      	mov	r2, sl
  405770:	465b      	mov	r3, fp
  405772:	f002 fae5 	bl	407d40 <__aeabi_dcmpgt>
  405776:	2800      	cmp	r0, #0
  405778:	f000 81c5 	beq.w	405b06 <_dtoa_r+0x4d6>
  40577c:	1e6b      	subs	r3, r5, #1
  40577e:	9302      	str	r3, [sp, #8]
  405780:	2300      	movs	r3, #0
  405782:	930e      	str	r3, [sp, #56]	; 0x38
  405784:	1bbf      	subs	r7, r7, r6
  405786:	1e7b      	subs	r3, r7, #1
  405788:	9306      	str	r3, [sp, #24]
  40578a:	f100 8154 	bmi.w	405a36 <_dtoa_r+0x406>
  40578e:	2300      	movs	r3, #0
  405790:	9308      	str	r3, [sp, #32]
  405792:	9b02      	ldr	r3, [sp, #8]
  405794:	2b00      	cmp	r3, #0
  405796:	f2c0 8145 	blt.w	405a24 <_dtoa_r+0x3f4>
  40579a:	9a06      	ldr	r2, [sp, #24]
  40579c:	930d      	str	r3, [sp, #52]	; 0x34
  40579e:	4611      	mov	r1, r2
  4057a0:	4419      	add	r1, r3
  4057a2:	2300      	movs	r3, #0
  4057a4:	9106      	str	r1, [sp, #24]
  4057a6:	930c      	str	r3, [sp, #48]	; 0x30
  4057a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4057aa:	2b09      	cmp	r3, #9
  4057ac:	d82a      	bhi.n	405804 <_dtoa_r+0x1d4>
  4057ae:	2b05      	cmp	r3, #5
  4057b0:	f340 865b 	ble.w	40646a <_dtoa_r+0xe3a>
  4057b4:	3b04      	subs	r3, #4
  4057b6:	9324      	str	r3, [sp, #144]	; 0x90
  4057b8:	2500      	movs	r5, #0
  4057ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4057bc:	3b02      	subs	r3, #2
  4057be:	2b03      	cmp	r3, #3
  4057c0:	f200 8642 	bhi.w	406448 <_dtoa_r+0xe18>
  4057c4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4057c8:	02c903d4 	.word	0x02c903d4
  4057cc:	046103df 	.word	0x046103df
  4057d0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4057d2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4057d4:	443e      	add	r6, r7
  4057d6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4057da:	2b20      	cmp	r3, #32
  4057dc:	f340 818e 	ble.w	405afc <_dtoa_r+0x4cc>
  4057e0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4057e4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4057e8:	409d      	lsls	r5, r3
  4057ea:	fa2a f000 	lsr.w	r0, sl, r0
  4057ee:	4328      	orrs	r0, r5
  4057f0:	f7fd ff4e 	bl	403690 <__aeabi_ui2d>
  4057f4:	2301      	movs	r3, #1
  4057f6:	3e01      	subs	r6, #1
  4057f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4057fc:	9314      	str	r3, [sp, #80]	; 0x50
  4057fe:	e781      	b.n	405704 <_dtoa_r+0xd4>
  405800:	483b      	ldr	r0, [pc, #236]	; (4058f0 <_dtoa_r+0x2c0>)
  405802:	e743      	b.n	40568c <_dtoa_r+0x5c>
  405804:	2100      	movs	r1, #0
  405806:	6461      	str	r1, [r4, #68]	; 0x44
  405808:	4620      	mov	r0, r4
  40580a:	9125      	str	r1, [sp, #148]	; 0x94
  40580c:	f001 fa0e 	bl	406c2c <_Balloc>
  405810:	f04f 33ff 	mov.w	r3, #4294967295
  405814:	930a      	str	r3, [sp, #40]	; 0x28
  405816:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405818:	930f      	str	r3, [sp, #60]	; 0x3c
  40581a:	2301      	movs	r3, #1
  40581c:	9004      	str	r0, [sp, #16]
  40581e:	6420      	str	r0, [r4, #64]	; 0x40
  405820:	9224      	str	r2, [sp, #144]	; 0x90
  405822:	930b      	str	r3, [sp, #44]	; 0x2c
  405824:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405826:	2b00      	cmp	r3, #0
  405828:	f2c0 80d9 	blt.w	4059de <_dtoa_r+0x3ae>
  40582c:	9a02      	ldr	r2, [sp, #8]
  40582e:	2a0e      	cmp	r2, #14
  405830:	f300 80d5 	bgt.w	4059de <_dtoa_r+0x3ae>
  405834:	4b2d      	ldr	r3, [pc, #180]	; (4058ec <_dtoa_r+0x2bc>)
  405836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40583a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40583e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405842:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405844:	2b00      	cmp	r3, #0
  405846:	f2c0 83ba 	blt.w	405fbe <_dtoa_r+0x98e>
  40584a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40584e:	4650      	mov	r0, sl
  405850:	462a      	mov	r2, r5
  405852:	4633      	mov	r3, r6
  405854:	4659      	mov	r1, fp
  405856:	f7fe f8bb 	bl	4039d0 <__aeabi_ddiv>
  40585a:	f002 fa91 	bl	407d80 <__aeabi_d2iz>
  40585e:	4680      	mov	r8, r0
  405860:	f7fd ff26 	bl	4036b0 <__aeabi_i2d>
  405864:	462a      	mov	r2, r5
  405866:	4633      	mov	r3, r6
  405868:	f7fd ff88 	bl	40377c <__aeabi_dmul>
  40586c:	460b      	mov	r3, r1
  40586e:	4602      	mov	r2, r0
  405870:	4659      	mov	r1, fp
  405872:	4650      	mov	r0, sl
  405874:	f7fd fdce 	bl	403414 <__aeabi_dsub>
  405878:	9d04      	ldr	r5, [sp, #16]
  40587a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40587e:	702b      	strb	r3, [r5, #0]
  405880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405882:	2b01      	cmp	r3, #1
  405884:	4606      	mov	r6, r0
  405886:	460f      	mov	r7, r1
  405888:	f105 0501 	add.w	r5, r5, #1
  40588c:	d068      	beq.n	405960 <_dtoa_r+0x330>
  40588e:	2200      	movs	r2, #0
  405890:	4b18      	ldr	r3, [pc, #96]	; (4058f4 <_dtoa_r+0x2c4>)
  405892:	f7fd ff73 	bl	40377c <__aeabi_dmul>
  405896:	2200      	movs	r2, #0
  405898:	2300      	movs	r3, #0
  40589a:	4606      	mov	r6, r0
  40589c:	460f      	mov	r7, r1
  40589e:	f002 fa27 	bl	407cf0 <__aeabi_dcmpeq>
  4058a2:	2800      	cmp	r0, #0
  4058a4:	f040 8088 	bne.w	4059b8 <_dtoa_r+0x388>
  4058a8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4058ac:	f04f 0a00 	mov.w	sl, #0
  4058b0:	f8df b040 	ldr.w	fp, [pc, #64]	; 4058f4 <_dtoa_r+0x2c4>
  4058b4:	940c      	str	r4, [sp, #48]	; 0x30
  4058b6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4058ba:	e028      	b.n	40590e <_dtoa_r+0x2de>
  4058bc:	f3af 8000 	nop.w
  4058c0:	636f4361 	.word	0x636f4361
  4058c4:	3fd287a7 	.word	0x3fd287a7
  4058c8:	8b60c8b3 	.word	0x8b60c8b3
  4058cc:	3fc68a28 	.word	0x3fc68a28
  4058d0:	509f79fb 	.word	0x509f79fb
  4058d4:	3fd34413 	.word	0x3fd34413
  4058d8:	7ff00000 	.word	0x7ff00000
  4058dc:	00408881 	.word	0x00408881
  4058e0:	004088a4 	.word	0x004088a4
  4058e4:	004088b0 	.word	0x004088b0
  4058e8:	3ff80000 	.word	0x3ff80000
  4058ec:	004088e0 	.word	0x004088e0
  4058f0:	00408880 	.word	0x00408880
  4058f4:	40240000 	.word	0x40240000
  4058f8:	f7fd ff40 	bl	40377c <__aeabi_dmul>
  4058fc:	2200      	movs	r2, #0
  4058fe:	2300      	movs	r3, #0
  405900:	4606      	mov	r6, r0
  405902:	460f      	mov	r7, r1
  405904:	f002 f9f4 	bl	407cf0 <__aeabi_dcmpeq>
  405908:	2800      	cmp	r0, #0
  40590a:	f040 83c1 	bne.w	406090 <_dtoa_r+0xa60>
  40590e:	4642      	mov	r2, r8
  405910:	464b      	mov	r3, r9
  405912:	4630      	mov	r0, r6
  405914:	4639      	mov	r1, r7
  405916:	f7fe f85b 	bl	4039d0 <__aeabi_ddiv>
  40591a:	f002 fa31 	bl	407d80 <__aeabi_d2iz>
  40591e:	4604      	mov	r4, r0
  405920:	f7fd fec6 	bl	4036b0 <__aeabi_i2d>
  405924:	4642      	mov	r2, r8
  405926:	464b      	mov	r3, r9
  405928:	f7fd ff28 	bl	40377c <__aeabi_dmul>
  40592c:	4602      	mov	r2, r0
  40592e:	460b      	mov	r3, r1
  405930:	4630      	mov	r0, r6
  405932:	4639      	mov	r1, r7
  405934:	f7fd fd6e 	bl	403414 <__aeabi_dsub>
  405938:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40593c:	9e04      	ldr	r6, [sp, #16]
  40593e:	f805 eb01 	strb.w	lr, [r5], #1
  405942:	eba5 0e06 	sub.w	lr, r5, r6
  405946:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405948:	45b6      	cmp	lr, r6
  40594a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40594e:	4652      	mov	r2, sl
  405950:	465b      	mov	r3, fp
  405952:	d1d1      	bne.n	4058f8 <_dtoa_r+0x2c8>
  405954:	46a0      	mov	r8, r4
  405956:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40595a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40595c:	4606      	mov	r6, r0
  40595e:	460f      	mov	r7, r1
  405960:	4632      	mov	r2, r6
  405962:	463b      	mov	r3, r7
  405964:	4630      	mov	r0, r6
  405966:	4639      	mov	r1, r7
  405968:	f7fd fd56 	bl	403418 <__adddf3>
  40596c:	4606      	mov	r6, r0
  40596e:	460f      	mov	r7, r1
  405970:	4602      	mov	r2, r0
  405972:	460b      	mov	r3, r1
  405974:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405978:	f002 f9c4 	bl	407d04 <__aeabi_dcmplt>
  40597c:	b948      	cbnz	r0, 405992 <_dtoa_r+0x362>
  40597e:	4632      	mov	r2, r6
  405980:	463b      	mov	r3, r7
  405982:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405986:	f002 f9b3 	bl	407cf0 <__aeabi_dcmpeq>
  40598a:	b1a8      	cbz	r0, 4059b8 <_dtoa_r+0x388>
  40598c:	f018 0f01 	tst.w	r8, #1
  405990:	d012      	beq.n	4059b8 <_dtoa_r+0x388>
  405992:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405996:	9a04      	ldr	r2, [sp, #16]
  405998:	1e6b      	subs	r3, r5, #1
  40599a:	e004      	b.n	4059a6 <_dtoa_r+0x376>
  40599c:	429a      	cmp	r2, r3
  40599e:	f000 8401 	beq.w	4061a4 <_dtoa_r+0xb74>
  4059a2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4059a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4059aa:	f103 0501 	add.w	r5, r3, #1
  4059ae:	d0f5      	beq.n	40599c <_dtoa_r+0x36c>
  4059b0:	f108 0801 	add.w	r8, r8, #1
  4059b4:	f883 8000 	strb.w	r8, [r3]
  4059b8:	4649      	mov	r1, r9
  4059ba:	4620      	mov	r0, r4
  4059bc:	f001 f95c 	bl	406c78 <_Bfree>
  4059c0:	2200      	movs	r2, #0
  4059c2:	9b02      	ldr	r3, [sp, #8]
  4059c4:	702a      	strb	r2, [r5, #0]
  4059c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4059c8:	3301      	adds	r3, #1
  4059ca:	6013      	str	r3, [r2, #0]
  4059cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4059ce:	2b00      	cmp	r3, #0
  4059d0:	f000 839e 	beq.w	406110 <_dtoa_r+0xae0>
  4059d4:	9804      	ldr	r0, [sp, #16]
  4059d6:	601d      	str	r5, [r3, #0]
  4059d8:	b01b      	add	sp, #108	; 0x6c
  4059da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4059e0:	2a00      	cmp	r2, #0
  4059e2:	d03e      	beq.n	405a62 <_dtoa_r+0x432>
  4059e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4059e6:	2a01      	cmp	r2, #1
  4059e8:	f340 8311 	ble.w	40600e <_dtoa_r+0x9de>
  4059ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4059f0:	1e5f      	subs	r7, r3, #1
  4059f2:	42ba      	cmp	r2, r7
  4059f4:	f2c0 838f 	blt.w	406116 <_dtoa_r+0xae6>
  4059f8:	1bd7      	subs	r7, r2, r7
  4059fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059fc:	2b00      	cmp	r3, #0
  4059fe:	f2c0 848b 	blt.w	406318 <_dtoa_r+0xce8>
  405a02:	9d08      	ldr	r5, [sp, #32]
  405a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a06:	9a08      	ldr	r2, [sp, #32]
  405a08:	441a      	add	r2, r3
  405a0a:	9208      	str	r2, [sp, #32]
  405a0c:	9a06      	ldr	r2, [sp, #24]
  405a0e:	2101      	movs	r1, #1
  405a10:	441a      	add	r2, r3
  405a12:	4620      	mov	r0, r4
  405a14:	9206      	str	r2, [sp, #24]
  405a16:	f001 f9c9 	bl	406dac <__i2b>
  405a1a:	4606      	mov	r6, r0
  405a1c:	e024      	b.n	405a68 <_dtoa_r+0x438>
  405a1e:	2301      	movs	r3, #1
  405a20:	930e      	str	r3, [sp, #56]	; 0x38
  405a22:	e6af      	b.n	405784 <_dtoa_r+0x154>
  405a24:	9a08      	ldr	r2, [sp, #32]
  405a26:	9b02      	ldr	r3, [sp, #8]
  405a28:	1ad2      	subs	r2, r2, r3
  405a2a:	425b      	negs	r3, r3
  405a2c:	930c      	str	r3, [sp, #48]	; 0x30
  405a2e:	2300      	movs	r3, #0
  405a30:	9208      	str	r2, [sp, #32]
  405a32:	930d      	str	r3, [sp, #52]	; 0x34
  405a34:	e6b8      	b.n	4057a8 <_dtoa_r+0x178>
  405a36:	f1c7 0301 	rsb	r3, r7, #1
  405a3a:	9308      	str	r3, [sp, #32]
  405a3c:	2300      	movs	r3, #0
  405a3e:	9306      	str	r3, [sp, #24]
  405a40:	e6a7      	b.n	405792 <_dtoa_r+0x162>
  405a42:	9d02      	ldr	r5, [sp, #8]
  405a44:	4628      	mov	r0, r5
  405a46:	f7fd fe33 	bl	4036b0 <__aeabi_i2d>
  405a4a:	4602      	mov	r2, r0
  405a4c:	460b      	mov	r3, r1
  405a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405a52:	f002 f94d 	bl	407cf0 <__aeabi_dcmpeq>
  405a56:	2800      	cmp	r0, #0
  405a58:	f47f ae80 	bne.w	40575c <_dtoa_r+0x12c>
  405a5c:	1e6b      	subs	r3, r5, #1
  405a5e:	9302      	str	r3, [sp, #8]
  405a60:	e67c      	b.n	40575c <_dtoa_r+0x12c>
  405a62:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405a64:	9d08      	ldr	r5, [sp, #32]
  405a66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405a68:	2d00      	cmp	r5, #0
  405a6a:	dd0c      	ble.n	405a86 <_dtoa_r+0x456>
  405a6c:	9906      	ldr	r1, [sp, #24]
  405a6e:	2900      	cmp	r1, #0
  405a70:	460b      	mov	r3, r1
  405a72:	dd08      	ble.n	405a86 <_dtoa_r+0x456>
  405a74:	42a9      	cmp	r1, r5
  405a76:	9a08      	ldr	r2, [sp, #32]
  405a78:	bfa8      	it	ge
  405a7a:	462b      	movge	r3, r5
  405a7c:	1ad2      	subs	r2, r2, r3
  405a7e:	1aed      	subs	r5, r5, r3
  405a80:	1acb      	subs	r3, r1, r3
  405a82:	9208      	str	r2, [sp, #32]
  405a84:	9306      	str	r3, [sp, #24]
  405a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405a88:	b1d3      	cbz	r3, 405ac0 <_dtoa_r+0x490>
  405a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a8c:	2b00      	cmp	r3, #0
  405a8e:	f000 82b7 	beq.w	406000 <_dtoa_r+0x9d0>
  405a92:	2f00      	cmp	r7, #0
  405a94:	dd10      	ble.n	405ab8 <_dtoa_r+0x488>
  405a96:	4631      	mov	r1, r6
  405a98:	463a      	mov	r2, r7
  405a9a:	4620      	mov	r0, r4
  405a9c:	f001 fa22 	bl	406ee4 <__pow5mult>
  405aa0:	464a      	mov	r2, r9
  405aa2:	4601      	mov	r1, r0
  405aa4:	4606      	mov	r6, r0
  405aa6:	4620      	mov	r0, r4
  405aa8:	f001 f98a 	bl	406dc0 <__multiply>
  405aac:	4649      	mov	r1, r9
  405aae:	4680      	mov	r8, r0
  405ab0:	4620      	mov	r0, r4
  405ab2:	f001 f8e1 	bl	406c78 <_Bfree>
  405ab6:	46c1      	mov	r9, r8
  405ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405aba:	1bda      	subs	r2, r3, r7
  405abc:	f040 82a1 	bne.w	406002 <_dtoa_r+0x9d2>
  405ac0:	2101      	movs	r1, #1
  405ac2:	4620      	mov	r0, r4
  405ac4:	f001 f972 	bl	406dac <__i2b>
  405ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405aca:	2b00      	cmp	r3, #0
  405acc:	4680      	mov	r8, r0
  405ace:	dd1c      	ble.n	405b0a <_dtoa_r+0x4da>
  405ad0:	4601      	mov	r1, r0
  405ad2:	461a      	mov	r2, r3
  405ad4:	4620      	mov	r0, r4
  405ad6:	f001 fa05 	bl	406ee4 <__pow5mult>
  405ada:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405adc:	2b01      	cmp	r3, #1
  405ade:	4680      	mov	r8, r0
  405ae0:	f340 8254 	ble.w	405f8c <_dtoa_r+0x95c>
  405ae4:	2300      	movs	r3, #0
  405ae6:	930c      	str	r3, [sp, #48]	; 0x30
  405ae8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405aec:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405af0:	6918      	ldr	r0, [r3, #16]
  405af2:	f001 f90b 	bl	406d0c <__hi0bits>
  405af6:	f1c0 0020 	rsb	r0, r0, #32
  405afa:	e010      	b.n	405b1e <_dtoa_r+0x4ee>
  405afc:	f1c3 0520 	rsb	r5, r3, #32
  405b00:	fa0a f005 	lsl.w	r0, sl, r5
  405b04:	e674      	b.n	4057f0 <_dtoa_r+0x1c0>
  405b06:	900e      	str	r0, [sp, #56]	; 0x38
  405b08:	e63c      	b.n	405784 <_dtoa_r+0x154>
  405b0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b0c:	2b01      	cmp	r3, #1
  405b0e:	f340 8287 	ble.w	406020 <_dtoa_r+0x9f0>
  405b12:	2300      	movs	r3, #0
  405b14:	930c      	str	r3, [sp, #48]	; 0x30
  405b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405b18:	2001      	movs	r0, #1
  405b1a:	2b00      	cmp	r3, #0
  405b1c:	d1e4      	bne.n	405ae8 <_dtoa_r+0x4b8>
  405b1e:	9a06      	ldr	r2, [sp, #24]
  405b20:	4410      	add	r0, r2
  405b22:	f010 001f 	ands.w	r0, r0, #31
  405b26:	f000 80a1 	beq.w	405c6c <_dtoa_r+0x63c>
  405b2a:	f1c0 0320 	rsb	r3, r0, #32
  405b2e:	2b04      	cmp	r3, #4
  405b30:	f340 849e 	ble.w	406470 <_dtoa_r+0xe40>
  405b34:	9b08      	ldr	r3, [sp, #32]
  405b36:	f1c0 001c 	rsb	r0, r0, #28
  405b3a:	4403      	add	r3, r0
  405b3c:	9308      	str	r3, [sp, #32]
  405b3e:	4613      	mov	r3, r2
  405b40:	4403      	add	r3, r0
  405b42:	4405      	add	r5, r0
  405b44:	9306      	str	r3, [sp, #24]
  405b46:	9b08      	ldr	r3, [sp, #32]
  405b48:	2b00      	cmp	r3, #0
  405b4a:	dd05      	ble.n	405b58 <_dtoa_r+0x528>
  405b4c:	4649      	mov	r1, r9
  405b4e:	461a      	mov	r2, r3
  405b50:	4620      	mov	r0, r4
  405b52:	f001 fa17 	bl	406f84 <__lshift>
  405b56:	4681      	mov	r9, r0
  405b58:	9b06      	ldr	r3, [sp, #24]
  405b5a:	2b00      	cmp	r3, #0
  405b5c:	dd05      	ble.n	405b6a <_dtoa_r+0x53a>
  405b5e:	4641      	mov	r1, r8
  405b60:	461a      	mov	r2, r3
  405b62:	4620      	mov	r0, r4
  405b64:	f001 fa0e 	bl	406f84 <__lshift>
  405b68:	4680      	mov	r8, r0
  405b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405b6c:	2b00      	cmp	r3, #0
  405b6e:	f040 8086 	bne.w	405c7e <_dtoa_r+0x64e>
  405b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b74:	2b00      	cmp	r3, #0
  405b76:	f340 8266 	ble.w	406046 <_dtoa_r+0xa16>
  405b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405b7c:	2b00      	cmp	r3, #0
  405b7e:	f000 8098 	beq.w	405cb2 <_dtoa_r+0x682>
  405b82:	2d00      	cmp	r5, #0
  405b84:	dd05      	ble.n	405b92 <_dtoa_r+0x562>
  405b86:	4631      	mov	r1, r6
  405b88:	462a      	mov	r2, r5
  405b8a:	4620      	mov	r0, r4
  405b8c:	f001 f9fa 	bl	406f84 <__lshift>
  405b90:	4606      	mov	r6, r0
  405b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405b94:	2b00      	cmp	r3, #0
  405b96:	f040 8337 	bne.w	406208 <_dtoa_r+0xbd8>
  405b9a:	9606      	str	r6, [sp, #24]
  405b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b9e:	9a04      	ldr	r2, [sp, #16]
  405ba0:	f8dd b018 	ldr.w	fp, [sp, #24]
  405ba4:	3b01      	subs	r3, #1
  405ba6:	18d3      	adds	r3, r2, r3
  405ba8:	930b      	str	r3, [sp, #44]	; 0x2c
  405baa:	f00a 0301 	and.w	r3, sl, #1
  405bae:	930c      	str	r3, [sp, #48]	; 0x30
  405bb0:	4617      	mov	r7, r2
  405bb2:	46c2      	mov	sl, r8
  405bb4:	4651      	mov	r1, sl
  405bb6:	4648      	mov	r0, r9
  405bb8:	f7ff fca4 	bl	405504 <quorem>
  405bbc:	4631      	mov	r1, r6
  405bbe:	4605      	mov	r5, r0
  405bc0:	4648      	mov	r0, r9
  405bc2:	f001 fa31 	bl	407028 <__mcmp>
  405bc6:	465a      	mov	r2, fp
  405bc8:	900a      	str	r0, [sp, #40]	; 0x28
  405bca:	4651      	mov	r1, sl
  405bcc:	4620      	mov	r0, r4
  405bce:	f001 fa47 	bl	407060 <__mdiff>
  405bd2:	68c2      	ldr	r2, [r0, #12]
  405bd4:	4680      	mov	r8, r0
  405bd6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405bda:	2a00      	cmp	r2, #0
  405bdc:	f040 822b 	bne.w	406036 <_dtoa_r+0xa06>
  405be0:	4601      	mov	r1, r0
  405be2:	4648      	mov	r0, r9
  405be4:	9308      	str	r3, [sp, #32]
  405be6:	f001 fa1f 	bl	407028 <__mcmp>
  405bea:	4641      	mov	r1, r8
  405bec:	9006      	str	r0, [sp, #24]
  405bee:	4620      	mov	r0, r4
  405bf0:	f001 f842 	bl	406c78 <_Bfree>
  405bf4:	9a06      	ldr	r2, [sp, #24]
  405bf6:	9b08      	ldr	r3, [sp, #32]
  405bf8:	b932      	cbnz	r2, 405c08 <_dtoa_r+0x5d8>
  405bfa:	9924      	ldr	r1, [sp, #144]	; 0x90
  405bfc:	b921      	cbnz	r1, 405c08 <_dtoa_r+0x5d8>
  405bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405c00:	2a00      	cmp	r2, #0
  405c02:	f000 83ef 	beq.w	4063e4 <_dtoa_r+0xdb4>
  405c06:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405c08:	990a      	ldr	r1, [sp, #40]	; 0x28
  405c0a:	2900      	cmp	r1, #0
  405c0c:	f2c0 829f 	blt.w	40614e <_dtoa_r+0xb1e>
  405c10:	d105      	bne.n	405c1e <_dtoa_r+0x5ee>
  405c12:	9924      	ldr	r1, [sp, #144]	; 0x90
  405c14:	b919      	cbnz	r1, 405c1e <_dtoa_r+0x5ee>
  405c16:	990c      	ldr	r1, [sp, #48]	; 0x30
  405c18:	2900      	cmp	r1, #0
  405c1a:	f000 8298 	beq.w	40614e <_dtoa_r+0xb1e>
  405c1e:	2a00      	cmp	r2, #0
  405c20:	f300 8306 	bgt.w	406230 <_dtoa_r+0xc00>
  405c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405c26:	703b      	strb	r3, [r7, #0]
  405c28:	f107 0801 	add.w	r8, r7, #1
  405c2c:	4297      	cmp	r7, r2
  405c2e:	4645      	mov	r5, r8
  405c30:	f000 830c 	beq.w	40624c <_dtoa_r+0xc1c>
  405c34:	4649      	mov	r1, r9
  405c36:	2300      	movs	r3, #0
  405c38:	220a      	movs	r2, #10
  405c3a:	4620      	mov	r0, r4
  405c3c:	f001 f826 	bl	406c8c <__multadd>
  405c40:	455e      	cmp	r6, fp
  405c42:	4681      	mov	r9, r0
  405c44:	4631      	mov	r1, r6
  405c46:	f04f 0300 	mov.w	r3, #0
  405c4a:	f04f 020a 	mov.w	r2, #10
  405c4e:	4620      	mov	r0, r4
  405c50:	f000 81eb 	beq.w	40602a <_dtoa_r+0x9fa>
  405c54:	f001 f81a 	bl	406c8c <__multadd>
  405c58:	4659      	mov	r1, fp
  405c5a:	4606      	mov	r6, r0
  405c5c:	2300      	movs	r3, #0
  405c5e:	220a      	movs	r2, #10
  405c60:	4620      	mov	r0, r4
  405c62:	f001 f813 	bl	406c8c <__multadd>
  405c66:	4647      	mov	r7, r8
  405c68:	4683      	mov	fp, r0
  405c6a:	e7a3      	b.n	405bb4 <_dtoa_r+0x584>
  405c6c:	201c      	movs	r0, #28
  405c6e:	9b08      	ldr	r3, [sp, #32]
  405c70:	4403      	add	r3, r0
  405c72:	9308      	str	r3, [sp, #32]
  405c74:	9b06      	ldr	r3, [sp, #24]
  405c76:	4403      	add	r3, r0
  405c78:	4405      	add	r5, r0
  405c7a:	9306      	str	r3, [sp, #24]
  405c7c:	e763      	b.n	405b46 <_dtoa_r+0x516>
  405c7e:	4641      	mov	r1, r8
  405c80:	4648      	mov	r0, r9
  405c82:	f001 f9d1 	bl	407028 <__mcmp>
  405c86:	2800      	cmp	r0, #0
  405c88:	f6bf af73 	bge.w	405b72 <_dtoa_r+0x542>
  405c8c:	9f02      	ldr	r7, [sp, #8]
  405c8e:	4649      	mov	r1, r9
  405c90:	2300      	movs	r3, #0
  405c92:	220a      	movs	r2, #10
  405c94:	4620      	mov	r0, r4
  405c96:	3f01      	subs	r7, #1
  405c98:	9702      	str	r7, [sp, #8]
  405c9a:	f000 fff7 	bl	406c8c <__multadd>
  405c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405ca0:	4681      	mov	r9, r0
  405ca2:	2b00      	cmp	r3, #0
  405ca4:	f040 83b6 	bne.w	406414 <_dtoa_r+0xde4>
  405ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405caa:	2b00      	cmp	r3, #0
  405cac:	f340 83bf 	ble.w	40642e <_dtoa_r+0xdfe>
  405cb0:	930a      	str	r3, [sp, #40]	; 0x28
  405cb2:	f8dd b010 	ldr.w	fp, [sp, #16]
  405cb6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405cb8:	465d      	mov	r5, fp
  405cba:	e002      	b.n	405cc2 <_dtoa_r+0x692>
  405cbc:	f000 ffe6 	bl	406c8c <__multadd>
  405cc0:	4681      	mov	r9, r0
  405cc2:	4641      	mov	r1, r8
  405cc4:	4648      	mov	r0, r9
  405cc6:	f7ff fc1d 	bl	405504 <quorem>
  405cca:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405cce:	f805 ab01 	strb.w	sl, [r5], #1
  405cd2:	eba5 030b 	sub.w	r3, r5, fp
  405cd6:	42bb      	cmp	r3, r7
  405cd8:	f04f 020a 	mov.w	r2, #10
  405cdc:	f04f 0300 	mov.w	r3, #0
  405ce0:	4649      	mov	r1, r9
  405ce2:	4620      	mov	r0, r4
  405ce4:	dbea      	blt.n	405cbc <_dtoa_r+0x68c>
  405ce6:	9b04      	ldr	r3, [sp, #16]
  405ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405cea:	2a01      	cmp	r2, #1
  405cec:	bfac      	ite	ge
  405cee:	189b      	addge	r3, r3, r2
  405cf0:	3301      	addlt	r3, #1
  405cf2:	461d      	mov	r5, r3
  405cf4:	f04f 0b00 	mov.w	fp, #0
  405cf8:	4649      	mov	r1, r9
  405cfa:	2201      	movs	r2, #1
  405cfc:	4620      	mov	r0, r4
  405cfe:	f001 f941 	bl	406f84 <__lshift>
  405d02:	4641      	mov	r1, r8
  405d04:	4681      	mov	r9, r0
  405d06:	f001 f98f 	bl	407028 <__mcmp>
  405d0a:	2800      	cmp	r0, #0
  405d0c:	f340 823d 	ble.w	40618a <_dtoa_r+0xb5a>
  405d10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405d14:	9904      	ldr	r1, [sp, #16]
  405d16:	1e6b      	subs	r3, r5, #1
  405d18:	e004      	b.n	405d24 <_dtoa_r+0x6f4>
  405d1a:	428b      	cmp	r3, r1
  405d1c:	f000 81ae 	beq.w	40607c <_dtoa_r+0xa4c>
  405d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405d24:	2a39      	cmp	r2, #57	; 0x39
  405d26:	f103 0501 	add.w	r5, r3, #1
  405d2a:	d0f6      	beq.n	405d1a <_dtoa_r+0x6ea>
  405d2c:	3201      	adds	r2, #1
  405d2e:	701a      	strb	r2, [r3, #0]
  405d30:	4641      	mov	r1, r8
  405d32:	4620      	mov	r0, r4
  405d34:	f000 ffa0 	bl	406c78 <_Bfree>
  405d38:	2e00      	cmp	r6, #0
  405d3a:	f43f ae3d 	beq.w	4059b8 <_dtoa_r+0x388>
  405d3e:	f1bb 0f00 	cmp.w	fp, #0
  405d42:	d005      	beq.n	405d50 <_dtoa_r+0x720>
  405d44:	45b3      	cmp	fp, r6
  405d46:	d003      	beq.n	405d50 <_dtoa_r+0x720>
  405d48:	4659      	mov	r1, fp
  405d4a:	4620      	mov	r0, r4
  405d4c:	f000 ff94 	bl	406c78 <_Bfree>
  405d50:	4631      	mov	r1, r6
  405d52:	4620      	mov	r0, r4
  405d54:	f000 ff90 	bl	406c78 <_Bfree>
  405d58:	e62e      	b.n	4059b8 <_dtoa_r+0x388>
  405d5a:	2300      	movs	r3, #0
  405d5c:	930b      	str	r3, [sp, #44]	; 0x2c
  405d5e:	9b02      	ldr	r3, [sp, #8]
  405d60:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405d62:	4413      	add	r3, r2
  405d64:	930f      	str	r3, [sp, #60]	; 0x3c
  405d66:	3301      	adds	r3, #1
  405d68:	2b01      	cmp	r3, #1
  405d6a:	461f      	mov	r7, r3
  405d6c:	461e      	mov	r6, r3
  405d6e:	930a      	str	r3, [sp, #40]	; 0x28
  405d70:	bfb8      	it	lt
  405d72:	2701      	movlt	r7, #1
  405d74:	2100      	movs	r1, #0
  405d76:	2f17      	cmp	r7, #23
  405d78:	6461      	str	r1, [r4, #68]	; 0x44
  405d7a:	d90a      	bls.n	405d92 <_dtoa_r+0x762>
  405d7c:	2201      	movs	r2, #1
  405d7e:	2304      	movs	r3, #4
  405d80:	005b      	lsls	r3, r3, #1
  405d82:	f103 0014 	add.w	r0, r3, #20
  405d86:	4287      	cmp	r7, r0
  405d88:	4611      	mov	r1, r2
  405d8a:	f102 0201 	add.w	r2, r2, #1
  405d8e:	d2f7      	bcs.n	405d80 <_dtoa_r+0x750>
  405d90:	6461      	str	r1, [r4, #68]	; 0x44
  405d92:	4620      	mov	r0, r4
  405d94:	f000 ff4a 	bl	406c2c <_Balloc>
  405d98:	2e0e      	cmp	r6, #14
  405d9a:	9004      	str	r0, [sp, #16]
  405d9c:	6420      	str	r0, [r4, #64]	; 0x40
  405d9e:	f63f ad41 	bhi.w	405824 <_dtoa_r+0x1f4>
  405da2:	2d00      	cmp	r5, #0
  405da4:	f43f ad3e 	beq.w	405824 <_dtoa_r+0x1f4>
  405da8:	9902      	ldr	r1, [sp, #8]
  405daa:	2900      	cmp	r1, #0
  405dac:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405db0:	f340 8202 	ble.w	4061b8 <_dtoa_r+0xb88>
  405db4:	4bb8      	ldr	r3, [pc, #736]	; (406098 <_dtoa_r+0xa68>)
  405db6:	f001 020f 	and.w	r2, r1, #15
  405dba:	110d      	asrs	r5, r1, #4
  405dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405dc0:	06e9      	lsls	r1, r5, #27
  405dc2:	e9d3 6700 	ldrd	r6, r7, [r3]
  405dc6:	f140 81ae 	bpl.w	406126 <_dtoa_r+0xaf6>
  405dca:	4bb4      	ldr	r3, [pc, #720]	; (40609c <_dtoa_r+0xa6c>)
  405dcc:	4650      	mov	r0, sl
  405dce:	4659      	mov	r1, fp
  405dd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405dd4:	f7fd fdfc 	bl	4039d0 <__aeabi_ddiv>
  405dd8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405ddc:	f005 050f 	and.w	r5, r5, #15
  405de0:	f04f 0a03 	mov.w	sl, #3
  405de4:	b18d      	cbz	r5, 405e0a <_dtoa_r+0x7da>
  405de6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40609c <_dtoa_r+0xa6c>
  405dea:	07ea      	lsls	r2, r5, #31
  405dec:	d509      	bpl.n	405e02 <_dtoa_r+0x7d2>
  405dee:	4630      	mov	r0, r6
  405df0:	4639      	mov	r1, r7
  405df2:	e9d8 2300 	ldrd	r2, r3, [r8]
  405df6:	f7fd fcc1 	bl	40377c <__aeabi_dmul>
  405dfa:	f10a 0a01 	add.w	sl, sl, #1
  405dfe:	4606      	mov	r6, r0
  405e00:	460f      	mov	r7, r1
  405e02:	106d      	asrs	r5, r5, #1
  405e04:	f108 0808 	add.w	r8, r8, #8
  405e08:	d1ef      	bne.n	405dea <_dtoa_r+0x7ba>
  405e0a:	463b      	mov	r3, r7
  405e0c:	4632      	mov	r2, r6
  405e0e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405e12:	f7fd fddd 	bl	4039d0 <__aeabi_ddiv>
  405e16:	4607      	mov	r7, r0
  405e18:	4688      	mov	r8, r1
  405e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405e1c:	b143      	cbz	r3, 405e30 <_dtoa_r+0x800>
  405e1e:	2200      	movs	r2, #0
  405e20:	4b9f      	ldr	r3, [pc, #636]	; (4060a0 <_dtoa_r+0xa70>)
  405e22:	4638      	mov	r0, r7
  405e24:	4641      	mov	r1, r8
  405e26:	f001 ff6d 	bl	407d04 <__aeabi_dcmplt>
  405e2a:	2800      	cmp	r0, #0
  405e2c:	f040 8286 	bne.w	40633c <_dtoa_r+0xd0c>
  405e30:	4650      	mov	r0, sl
  405e32:	f7fd fc3d 	bl	4036b0 <__aeabi_i2d>
  405e36:	463a      	mov	r2, r7
  405e38:	4643      	mov	r3, r8
  405e3a:	f7fd fc9f 	bl	40377c <__aeabi_dmul>
  405e3e:	4b99      	ldr	r3, [pc, #612]	; (4060a4 <_dtoa_r+0xa74>)
  405e40:	2200      	movs	r2, #0
  405e42:	f7fd fae9 	bl	403418 <__adddf3>
  405e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e48:	4605      	mov	r5, r0
  405e4a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405e4e:	2b00      	cmp	r3, #0
  405e50:	f000 813e 	beq.w	4060d0 <_dtoa_r+0xaa0>
  405e54:	9b02      	ldr	r3, [sp, #8]
  405e56:	9315      	str	r3, [sp, #84]	; 0x54
  405e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e5a:	9312      	str	r3, [sp, #72]	; 0x48
  405e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405e5e:	2b00      	cmp	r3, #0
  405e60:	f000 81fa 	beq.w	406258 <_dtoa_r+0xc28>
  405e64:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405e66:	4b8c      	ldr	r3, [pc, #560]	; (406098 <_dtoa_r+0xa68>)
  405e68:	498f      	ldr	r1, [pc, #572]	; (4060a8 <_dtoa_r+0xa78>)
  405e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405e6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405e72:	2000      	movs	r0, #0
  405e74:	f7fd fdac 	bl	4039d0 <__aeabi_ddiv>
  405e78:	462a      	mov	r2, r5
  405e7a:	4633      	mov	r3, r6
  405e7c:	f7fd faca 	bl	403414 <__aeabi_dsub>
  405e80:	4682      	mov	sl, r0
  405e82:	468b      	mov	fp, r1
  405e84:	4638      	mov	r0, r7
  405e86:	4641      	mov	r1, r8
  405e88:	f001 ff7a 	bl	407d80 <__aeabi_d2iz>
  405e8c:	4605      	mov	r5, r0
  405e8e:	f7fd fc0f 	bl	4036b0 <__aeabi_i2d>
  405e92:	4602      	mov	r2, r0
  405e94:	460b      	mov	r3, r1
  405e96:	4638      	mov	r0, r7
  405e98:	4641      	mov	r1, r8
  405e9a:	f7fd fabb 	bl	403414 <__aeabi_dsub>
  405e9e:	3530      	adds	r5, #48	; 0x30
  405ea0:	fa5f f885 	uxtb.w	r8, r5
  405ea4:	9d04      	ldr	r5, [sp, #16]
  405ea6:	4606      	mov	r6, r0
  405ea8:	460f      	mov	r7, r1
  405eaa:	f885 8000 	strb.w	r8, [r5]
  405eae:	4602      	mov	r2, r0
  405eb0:	460b      	mov	r3, r1
  405eb2:	4650      	mov	r0, sl
  405eb4:	4659      	mov	r1, fp
  405eb6:	3501      	adds	r5, #1
  405eb8:	f001 ff42 	bl	407d40 <__aeabi_dcmpgt>
  405ebc:	2800      	cmp	r0, #0
  405ebe:	d154      	bne.n	405f6a <_dtoa_r+0x93a>
  405ec0:	4632      	mov	r2, r6
  405ec2:	463b      	mov	r3, r7
  405ec4:	2000      	movs	r0, #0
  405ec6:	4976      	ldr	r1, [pc, #472]	; (4060a0 <_dtoa_r+0xa70>)
  405ec8:	f7fd faa4 	bl	403414 <__aeabi_dsub>
  405ecc:	4602      	mov	r2, r0
  405ece:	460b      	mov	r3, r1
  405ed0:	4650      	mov	r0, sl
  405ed2:	4659      	mov	r1, fp
  405ed4:	f001 ff34 	bl	407d40 <__aeabi_dcmpgt>
  405ed8:	2800      	cmp	r0, #0
  405eda:	f040 8270 	bne.w	4063be <_dtoa_r+0xd8e>
  405ede:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405ee0:	2a01      	cmp	r2, #1
  405ee2:	f000 8111 	beq.w	406108 <_dtoa_r+0xad8>
  405ee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ee8:	9a04      	ldr	r2, [sp, #16]
  405eea:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405eee:	4413      	add	r3, r2
  405ef0:	4699      	mov	r9, r3
  405ef2:	e00d      	b.n	405f10 <_dtoa_r+0x8e0>
  405ef4:	2000      	movs	r0, #0
  405ef6:	496a      	ldr	r1, [pc, #424]	; (4060a0 <_dtoa_r+0xa70>)
  405ef8:	f7fd fa8c 	bl	403414 <__aeabi_dsub>
  405efc:	4652      	mov	r2, sl
  405efe:	465b      	mov	r3, fp
  405f00:	f001 ff00 	bl	407d04 <__aeabi_dcmplt>
  405f04:	2800      	cmp	r0, #0
  405f06:	f040 8258 	bne.w	4063ba <_dtoa_r+0xd8a>
  405f0a:	454d      	cmp	r5, r9
  405f0c:	f000 80fa 	beq.w	406104 <_dtoa_r+0xad4>
  405f10:	4650      	mov	r0, sl
  405f12:	4659      	mov	r1, fp
  405f14:	2200      	movs	r2, #0
  405f16:	4b65      	ldr	r3, [pc, #404]	; (4060ac <_dtoa_r+0xa7c>)
  405f18:	f7fd fc30 	bl	40377c <__aeabi_dmul>
  405f1c:	2200      	movs	r2, #0
  405f1e:	4b63      	ldr	r3, [pc, #396]	; (4060ac <_dtoa_r+0xa7c>)
  405f20:	4682      	mov	sl, r0
  405f22:	468b      	mov	fp, r1
  405f24:	4630      	mov	r0, r6
  405f26:	4639      	mov	r1, r7
  405f28:	f7fd fc28 	bl	40377c <__aeabi_dmul>
  405f2c:	460f      	mov	r7, r1
  405f2e:	4606      	mov	r6, r0
  405f30:	f001 ff26 	bl	407d80 <__aeabi_d2iz>
  405f34:	4680      	mov	r8, r0
  405f36:	f7fd fbbb 	bl	4036b0 <__aeabi_i2d>
  405f3a:	4602      	mov	r2, r0
  405f3c:	460b      	mov	r3, r1
  405f3e:	4630      	mov	r0, r6
  405f40:	4639      	mov	r1, r7
  405f42:	f7fd fa67 	bl	403414 <__aeabi_dsub>
  405f46:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405f4a:	fa5f f888 	uxtb.w	r8, r8
  405f4e:	4652      	mov	r2, sl
  405f50:	465b      	mov	r3, fp
  405f52:	f805 8b01 	strb.w	r8, [r5], #1
  405f56:	4606      	mov	r6, r0
  405f58:	460f      	mov	r7, r1
  405f5a:	f001 fed3 	bl	407d04 <__aeabi_dcmplt>
  405f5e:	4632      	mov	r2, r6
  405f60:	463b      	mov	r3, r7
  405f62:	2800      	cmp	r0, #0
  405f64:	d0c6      	beq.n	405ef4 <_dtoa_r+0x8c4>
  405f66:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405f6c:	9302      	str	r3, [sp, #8]
  405f6e:	e523      	b.n	4059b8 <_dtoa_r+0x388>
  405f70:	2300      	movs	r3, #0
  405f72:	930b      	str	r3, [sp, #44]	; 0x2c
  405f74:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405f76:	2b00      	cmp	r3, #0
  405f78:	f340 80dc 	ble.w	406134 <_dtoa_r+0xb04>
  405f7c:	461f      	mov	r7, r3
  405f7e:	461e      	mov	r6, r3
  405f80:	930f      	str	r3, [sp, #60]	; 0x3c
  405f82:	930a      	str	r3, [sp, #40]	; 0x28
  405f84:	e6f6      	b.n	405d74 <_dtoa_r+0x744>
  405f86:	2301      	movs	r3, #1
  405f88:	930b      	str	r3, [sp, #44]	; 0x2c
  405f8a:	e7f3      	b.n	405f74 <_dtoa_r+0x944>
  405f8c:	f1ba 0f00 	cmp.w	sl, #0
  405f90:	f47f ada8 	bne.w	405ae4 <_dtoa_r+0x4b4>
  405f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405f98:	2b00      	cmp	r3, #0
  405f9a:	f47f adba 	bne.w	405b12 <_dtoa_r+0x4e2>
  405f9e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405fa2:	0d3f      	lsrs	r7, r7, #20
  405fa4:	053f      	lsls	r7, r7, #20
  405fa6:	2f00      	cmp	r7, #0
  405fa8:	f000 820d 	beq.w	4063c6 <_dtoa_r+0xd96>
  405fac:	9b08      	ldr	r3, [sp, #32]
  405fae:	3301      	adds	r3, #1
  405fb0:	9308      	str	r3, [sp, #32]
  405fb2:	9b06      	ldr	r3, [sp, #24]
  405fb4:	3301      	adds	r3, #1
  405fb6:	9306      	str	r3, [sp, #24]
  405fb8:	2301      	movs	r3, #1
  405fba:	930c      	str	r3, [sp, #48]	; 0x30
  405fbc:	e5ab      	b.n	405b16 <_dtoa_r+0x4e6>
  405fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405fc0:	2b00      	cmp	r3, #0
  405fc2:	f73f ac42 	bgt.w	40584a <_dtoa_r+0x21a>
  405fc6:	f040 8221 	bne.w	40640c <_dtoa_r+0xddc>
  405fca:	2200      	movs	r2, #0
  405fcc:	4b38      	ldr	r3, [pc, #224]	; (4060b0 <_dtoa_r+0xa80>)
  405fce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405fd2:	f7fd fbd3 	bl	40377c <__aeabi_dmul>
  405fd6:	4652      	mov	r2, sl
  405fd8:	465b      	mov	r3, fp
  405fda:	f001 fea7 	bl	407d2c <__aeabi_dcmpge>
  405fde:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405fe2:	4646      	mov	r6, r8
  405fe4:	2800      	cmp	r0, #0
  405fe6:	d041      	beq.n	40606c <_dtoa_r+0xa3c>
  405fe8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405fea:	9d04      	ldr	r5, [sp, #16]
  405fec:	43db      	mvns	r3, r3
  405fee:	9302      	str	r3, [sp, #8]
  405ff0:	4641      	mov	r1, r8
  405ff2:	4620      	mov	r0, r4
  405ff4:	f000 fe40 	bl	406c78 <_Bfree>
  405ff8:	2e00      	cmp	r6, #0
  405ffa:	f43f acdd 	beq.w	4059b8 <_dtoa_r+0x388>
  405ffe:	e6a7      	b.n	405d50 <_dtoa_r+0x720>
  406000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406002:	4649      	mov	r1, r9
  406004:	4620      	mov	r0, r4
  406006:	f000 ff6d 	bl	406ee4 <__pow5mult>
  40600a:	4681      	mov	r9, r0
  40600c:	e558      	b.n	405ac0 <_dtoa_r+0x490>
  40600e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406010:	2a00      	cmp	r2, #0
  406012:	f000 8187 	beq.w	406324 <_dtoa_r+0xcf4>
  406016:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40601a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40601c:	9d08      	ldr	r5, [sp, #32]
  40601e:	e4f2      	b.n	405a06 <_dtoa_r+0x3d6>
  406020:	f1ba 0f00 	cmp.w	sl, #0
  406024:	f47f ad75 	bne.w	405b12 <_dtoa_r+0x4e2>
  406028:	e7b4      	b.n	405f94 <_dtoa_r+0x964>
  40602a:	f000 fe2f 	bl	406c8c <__multadd>
  40602e:	4647      	mov	r7, r8
  406030:	4606      	mov	r6, r0
  406032:	4683      	mov	fp, r0
  406034:	e5be      	b.n	405bb4 <_dtoa_r+0x584>
  406036:	4601      	mov	r1, r0
  406038:	4620      	mov	r0, r4
  40603a:	9306      	str	r3, [sp, #24]
  40603c:	f000 fe1c 	bl	406c78 <_Bfree>
  406040:	2201      	movs	r2, #1
  406042:	9b06      	ldr	r3, [sp, #24]
  406044:	e5e0      	b.n	405c08 <_dtoa_r+0x5d8>
  406046:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406048:	2b02      	cmp	r3, #2
  40604a:	f77f ad96 	ble.w	405b7a <_dtoa_r+0x54a>
  40604e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406050:	2b00      	cmp	r3, #0
  406052:	d1c9      	bne.n	405fe8 <_dtoa_r+0x9b8>
  406054:	4641      	mov	r1, r8
  406056:	2205      	movs	r2, #5
  406058:	4620      	mov	r0, r4
  40605a:	f000 fe17 	bl	406c8c <__multadd>
  40605e:	4601      	mov	r1, r0
  406060:	4680      	mov	r8, r0
  406062:	4648      	mov	r0, r9
  406064:	f000 ffe0 	bl	407028 <__mcmp>
  406068:	2800      	cmp	r0, #0
  40606a:	ddbd      	ble.n	405fe8 <_dtoa_r+0x9b8>
  40606c:	9a02      	ldr	r2, [sp, #8]
  40606e:	9904      	ldr	r1, [sp, #16]
  406070:	2331      	movs	r3, #49	; 0x31
  406072:	3201      	adds	r2, #1
  406074:	9202      	str	r2, [sp, #8]
  406076:	700b      	strb	r3, [r1, #0]
  406078:	1c4d      	adds	r5, r1, #1
  40607a:	e7b9      	b.n	405ff0 <_dtoa_r+0x9c0>
  40607c:	9a02      	ldr	r2, [sp, #8]
  40607e:	3201      	adds	r2, #1
  406080:	9202      	str	r2, [sp, #8]
  406082:	9a04      	ldr	r2, [sp, #16]
  406084:	2331      	movs	r3, #49	; 0x31
  406086:	7013      	strb	r3, [r2, #0]
  406088:	e652      	b.n	405d30 <_dtoa_r+0x700>
  40608a:	2301      	movs	r3, #1
  40608c:	930b      	str	r3, [sp, #44]	; 0x2c
  40608e:	e666      	b.n	405d5e <_dtoa_r+0x72e>
  406090:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406094:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406096:	e48f      	b.n	4059b8 <_dtoa_r+0x388>
  406098:	004088e0 	.word	0x004088e0
  40609c:	004088b8 	.word	0x004088b8
  4060a0:	3ff00000 	.word	0x3ff00000
  4060a4:	401c0000 	.word	0x401c0000
  4060a8:	3fe00000 	.word	0x3fe00000
  4060ac:	40240000 	.word	0x40240000
  4060b0:	40140000 	.word	0x40140000
  4060b4:	4650      	mov	r0, sl
  4060b6:	f7fd fafb 	bl	4036b0 <__aeabi_i2d>
  4060ba:	463a      	mov	r2, r7
  4060bc:	4643      	mov	r3, r8
  4060be:	f7fd fb5d 	bl	40377c <__aeabi_dmul>
  4060c2:	2200      	movs	r2, #0
  4060c4:	4bc1      	ldr	r3, [pc, #772]	; (4063cc <_dtoa_r+0xd9c>)
  4060c6:	f7fd f9a7 	bl	403418 <__adddf3>
  4060ca:	4605      	mov	r5, r0
  4060cc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4060d0:	4641      	mov	r1, r8
  4060d2:	2200      	movs	r2, #0
  4060d4:	4bbe      	ldr	r3, [pc, #760]	; (4063d0 <_dtoa_r+0xda0>)
  4060d6:	4638      	mov	r0, r7
  4060d8:	f7fd f99c 	bl	403414 <__aeabi_dsub>
  4060dc:	462a      	mov	r2, r5
  4060de:	4633      	mov	r3, r6
  4060e0:	4682      	mov	sl, r0
  4060e2:	468b      	mov	fp, r1
  4060e4:	f001 fe2c 	bl	407d40 <__aeabi_dcmpgt>
  4060e8:	4680      	mov	r8, r0
  4060ea:	2800      	cmp	r0, #0
  4060ec:	f040 8110 	bne.w	406310 <_dtoa_r+0xce0>
  4060f0:	462a      	mov	r2, r5
  4060f2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4060f6:	4650      	mov	r0, sl
  4060f8:	4659      	mov	r1, fp
  4060fa:	f001 fe03 	bl	407d04 <__aeabi_dcmplt>
  4060fe:	b118      	cbz	r0, 406108 <_dtoa_r+0xad8>
  406100:	4646      	mov	r6, r8
  406102:	e771      	b.n	405fe8 <_dtoa_r+0x9b8>
  406104:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406108:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40610c:	f7ff bb8a 	b.w	405824 <_dtoa_r+0x1f4>
  406110:	9804      	ldr	r0, [sp, #16]
  406112:	f7ff babb 	b.w	40568c <_dtoa_r+0x5c>
  406116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40611a:	970c      	str	r7, [sp, #48]	; 0x30
  40611c:	1afb      	subs	r3, r7, r3
  40611e:	441a      	add	r2, r3
  406120:	920d      	str	r2, [sp, #52]	; 0x34
  406122:	2700      	movs	r7, #0
  406124:	e469      	b.n	4059fa <_dtoa_r+0x3ca>
  406126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40612a:	f04f 0a02 	mov.w	sl, #2
  40612e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406132:	e657      	b.n	405de4 <_dtoa_r+0x7b4>
  406134:	2100      	movs	r1, #0
  406136:	2301      	movs	r3, #1
  406138:	6461      	str	r1, [r4, #68]	; 0x44
  40613a:	4620      	mov	r0, r4
  40613c:	9325      	str	r3, [sp, #148]	; 0x94
  40613e:	f000 fd75 	bl	406c2c <_Balloc>
  406142:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406144:	9004      	str	r0, [sp, #16]
  406146:	6420      	str	r0, [r4, #64]	; 0x40
  406148:	930a      	str	r3, [sp, #40]	; 0x28
  40614a:	930f      	str	r3, [sp, #60]	; 0x3c
  40614c:	e629      	b.n	405da2 <_dtoa_r+0x772>
  40614e:	2a00      	cmp	r2, #0
  406150:	46d0      	mov	r8, sl
  406152:	f8cd b018 	str.w	fp, [sp, #24]
  406156:	469a      	mov	sl, r3
  406158:	dd11      	ble.n	40617e <_dtoa_r+0xb4e>
  40615a:	4649      	mov	r1, r9
  40615c:	2201      	movs	r2, #1
  40615e:	4620      	mov	r0, r4
  406160:	f000 ff10 	bl	406f84 <__lshift>
  406164:	4641      	mov	r1, r8
  406166:	4681      	mov	r9, r0
  406168:	f000 ff5e 	bl	407028 <__mcmp>
  40616c:	2800      	cmp	r0, #0
  40616e:	f340 8146 	ble.w	4063fe <_dtoa_r+0xdce>
  406172:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406176:	f000 8106 	beq.w	406386 <_dtoa_r+0xd56>
  40617a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40617e:	46b3      	mov	fp, r6
  406180:	f887 a000 	strb.w	sl, [r7]
  406184:	1c7d      	adds	r5, r7, #1
  406186:	9e06      	ldr	r6, [sp, #24]
  406188:	e5d2      	b.n	405d30 <_dtoa_r+0x700>
  40618a:	d104      	bne.n	406196 <_dtoa_r+0xb66>
  40618c:	f01a 0f01 	tst.w	sl, #1
  406190:	d001      	beq.n	406196 <_dtoa_r+0xb66>
  406192:	e5bd      	b.n	405d10 <_dtoa_r+0x6e0>
  406194:	4615      	mov	r5, r2
  406196:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40619a:	2b30      	cmp	r3, #48	; 0x30
  40619c:	f105 32ff 	add.w	r2, r5, #4294967295
  4061a0:	d0f8      	beq.n	406194 <_dtoa_r+0xb64>
  4061a2:	e5c5      	b.n	405d30 <_dtoa_r+0x700>
  4061a4:	9904      	ldr	r1, [sp, #16]
  4061a6:	2230      	movs	r2, #48	; 0x30
  4061a8:	700a      	strb	r2, [r1, #0]
  4061aa:	9a02      	ldr	r2, [sp, #8]
  4061ac:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4061b0:	3201      	adds	r2, #1
  4061b2:	9202      	str	r2, [sp, #8]
  4061b4:	f7ff bbfc 	b.w	4059b0 <_dtoa_r+0x380>
  4061b8:	f000 80bb 	beq.w	406332 <_dtoa_r+0xd02>
  4061bc:	9b02      	ldr	r3, [sp, #8]
  4061be:	425d      	negs	r5, r3
  4061c0:	4b84      	ldr	r3, [pc, #528]	; (4063d4 <_dtoa_r+0xda4>)
  4061c2:	f005 020f 	and.w	r2, r5, #15
  4061c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4061ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4061d2:	f7fd fad3 	bl	40377c <__aeabi_dmul>
  4061d6:	112d      	asrs	r5, r5, #4
  4061d8:	4607      	mov	r7, r0
  4061da:	4688      	mov	r8, r1
  4061dc:	f000 812c 	beq.w	406438 <_dtoa_r+0xe08>
  4061e0:	4e7d      	ldr	r6, [pc, #500]	; (4063d8 <_dtoa_r+0xda8>)
  4061e2:	f04f 0a02 	mov.w	sl, #2
  4061e6:	07eb      	lsls	r3, r5, #31
  4061e8:	d509      	bpl.n	4061fe <_dtoa_r+0xbce>
  4061ea:	4638      	mov	r0, r7
  4061ec:	4641      	mov	r1, r8
  4061ee:	e9d6 2300 	ldrd	r2, r3, [r6]
  4061f2:	f7fd fac3 	bl	40377c <__aeabi_dmul>
  4061f6:	f10a 0a01 	add.w	sl, sl, #1
  4061fa:	4607      	mov	r7, r0
  4061fc:	4688      	mov	r8, r1
  4061fe:	106d      	asrs	r5, r5, #1
  406200:	f106 0608 	add.w	r6, r6, #8
  406204:	d1ef      	bne.n	4061e6 <_dtoa_r+0xbb6>
  406206:	e608      	b.n	405e1a <_dtoa_r+0x7ea>
  406208:	6871      	ldr	r1, [r6, #4]
  40620a:	4620      	mov	r0, r4
  40620c:	f000 fd0e 	bl	406c2c <_Balloc>
  406210:	6933      	ldr	r3, [r6, #16]
  406212:	3302      	adds	r3, #2
  406214:	009a      	lsls	r2, r3, #2
  406216:	4605      	mov	r5, r0
  406218:	f106 010c 	add.w	r1, r6, #12
  40621c:	300c      	adds	r0, #12
  40621e:	f000 fc5f 	bl	406ae0 <memcpy>
  406222:	4629      	mov	r1, r5
  406224:	2201      	movs	r2, #1
  406226:	4620      	mov	r0, r4
  406228:	f000 feac 	bl	406f84 <__lshift>
  40622c:	9006      	str	r0, [sp, #24]
  40622e:	e4b5      	b.n	405b9c <_dtoa_r+0x56c>
  406230:	2b39      	cmp	r3, #57	; 0x39
  406232:	f8cd b018 	str.w	fp, [sp, #24]
  406236:	46d0      	mov	r8, sl
  406238:	f000 80a5 	beq.w	406386 <_dtoa_r+0xd56>
  40623c:	f103 0a01 	add.w	sl, r3, #1
  406240:	46b3      	mov	fp, r6
  406242:	f887 a000 	strb.w	sl, [r7]
  406246:	1c7d      	adds	r5, r7, #1
  406248:	9e06      	ldr	r6, [sp, #24]
  40624a:	e571      	b.n	405d30 <_dtoa_r+0x700>
  40624c:	465a      	mov	r2, fp
  40624e:	46d0      	mov	r8, sl
  406250:	46b3      	mov	fp, r6
  406252:	469a      	mov	sl, r3
  406254:	4616      	mov	r6, r2
  406256:	e54f      	b.n	405cf8 <_dtoa_r+0x6c8>
  406258:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40625a:	495e      	ldr	r1, [pc, #376]	; (4063d4 <_dtoa_r+0xda4>)
  40625c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406260:	462a      	mov	r2, r5
  406262:	4633      	mov	r3, r6
  406264:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406268:	f7fd fa88 	bl	40377c <__aeabi_dmul>
  40626c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406270:	4638      	mov	r0, r7
  406272:	4641      	mov	r1, r8
  406274:	f001 fd84 	bl	407d80 <__aeabi_d2iz>
  406278:	4605      	mov	r5, r0
  40627a:	f7fd fa19 	bl	4036b0 <__aeabi_i2d>
  40627e:	460b      	mov	r3, r1
  406280:	4602      	mov	r2, r0
  406282:	4641      	mov	r1, r8
  406284:	4638      	mov	r0, r7
  406286:	f7fd f8c5 	bl	403414 <__aeabi_dsub>
  40628a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40628c:	460f      	mov	r7, r1
  40628e:	9904      	ldr	r1, [sp, #16]
  406290:	3530      	adds	r5, #48	; 0x30
  406292:	2b01      	cmp	r3, #1
  406294:	700d      	strb	r5, [r1, #0]
  406296:	4606      	mov	r6, r0
  406298:	f101 0501 	add.w	r5, r1, #1
  40629c:	d026      	beq.n	4062ec <_dtoa_r+0xcbc>
  40629e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4062a0:	9a04      	ldr	r2, [sp, #16]
  4062a2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4063e0 <_dtoa_r+0xdb0>
  4062a6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4062aa:	4413      	add	r3, r2
  4062ac:	f04f 0a00 	mov.w	sl, #0
  4062b0:	4699      	mov	r9, r3
  4062b2:	4652      	mov	r2, sl
  4062b4:	465b      	mov	r3, fp
  4062b6:	4630      	mov	r0, r6
  4062b8:	4639      	mov	r1, r7
  4062ba:	f7fd fa5f 	bl	40377c <__aeabi_dmul>
  4062be:	460f      	mov	r7, r1
  4062c0:	4606      	mov	r6, r0
  4062c2:	f001 fd5d 	bl	407d80 <__aeabi_d2iz>
  4062c6:	4680      	mov	r8, r0
  4062c8:	f7fd f9f2 	bl	4036b0 <__aeabi_i2d>
  4062cc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4062d0:	4602      	mov	r2, r0
  4062d2:	460b      	mov	r3, r1
  4062d4:	4630      	mov	r0, r6
  4062d6:	4639      	mov	r1, r7
  4062d8:	f7fd f89c 	bl	403414 <__aeabi_dsub>
  4062dc:	f805 8b01 	strb.w	r8, [r5], #1
  4062e0:	454d      	cmp	r5, r9
  4062e2:	4606      	mov	r6, r0
  4062e4:	460f      	mov	r7, r1
  4062e6:	d1e4      	bne.n	4062b2 <_dtoa_r+0xc82>
  4062e8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4062ec:	4b3b      	ldr	r3, [pc, #236]	; (4063dc <_dtoa_r+0xdac>)
  4062ee:	2200      	movs	r2, #0
  4062f0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4062f4:	f7fd f890 	bl	403418 <__adddf3>
  4062f8:	4632      	mov	r2, r6
  4062fa:	463b      	mov	r3, r7
  4062fc:	f001 fd02 	bl	407d04 <__aeabi_dcmplt>
  406300:	2800      	cmp	r0, #0
  406302:	d046      	beq.n	406392 <_dtoa_r+0xd62>
  406304:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406306:	9302      	str	r3, [sp, #8]
  406308:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40630c:	f7ff bb43 	b.w	405996 <_dtoa_r+0x366>
  406310:	f04f 0800 	mov.w	r8, #0
  406314:	4646      	mov	r6, r8
  406316:	e6a9      	b.n	40606c <_dtoa_r+0xa3c>
  406318:	9b08      	ldr	r3, [sp, #32]
  40631a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40631c:	1a9d      	subs	r5, r3, r2
  40631e:	2300      	movs	r3, #0
  406320:	f7ff bb71 	b.w	405a06 <_dtoa_r+0x3d6>
  406324:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406326:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406328:	9d08      	ldr	r5, [sp, #32]
  40632a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40632e:	f7ff bb6a 	b.w	405a06 <_dtoa_r+0x3d6>
  406332:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406336:	f04f 0a02 	mov.w	sl, #2
  40633a:	e56e      	b.n	405e1a <_dtoa_r+0x7ea>
  40633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40633e:	2b00      	cmp	r3, #0
  406340:	f43f aeb8 	beq.w	4060b4 <_dtoa_r+0xa84>
  406344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406346:	2b00      	cmp	r3, #0
  406348:	f77f aede 	ble.w	406108 <_dtoa_r+0xad8>
  40634c:	2200      	movs	r2, #0
  40634e:	4b24      	ldr	r3, [pc, #144]	; (4063e0 <_dtoa_r+0xdb0>)
  406350:	4638      	mov	r0, r7
  406352:	4641      	mov	r1, r8
  406354:	f7fd fa12 	bl	40377c <__aeabi_dmul>
  406358:	4607      	mov	r7, r0
  40635a:	4688      	mov	r8, r1
  40635c:	f10a 0001 	add.w	r0, sl, #1
  406360:	f7fd f9a6 	bl	4036b0 <__aeabi_i2d>
  406364:	463a      	mov	r2, r7
  406366:	4643      	mov	r3, r8
  406368:	f7fd fa08 	bl	40377c <__aeabi_dmul>
  40636c:	2200      	movs	r2, #0
  40636e:	4b17      	ldr	r3, [pc, #92]	; (4063cc <_dtoa_r+0xd9c>)
  406370:	f7fd f852 	bl	403418 <__adddf3>
  406374:	9a02      	ldr	r2, [sp, #8]
  406376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406378:	9312      	str	r3, [sp, #72]	; 0x48
  40637a:	3a01      	subs	r2, #1
  40637c:	4605      	mov	r5, r0
  40637e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406382:	9215      	str	r2, [sp, #84]	; 0x54
  406384:	e56a      	b.n	405e5c <_dtoa_r+0x82c>
  406386:	2239      	movs	r2, #57	; 0x39
  406388:	46b3      	mov	fp, r6
  40638a:	703a      	strb	r2, [r7, #0]
  40638c:	9e06      	ldr	r6, [sp, #24]
  40638e:	1c7d      	adds	r5, r7, #1
  406390:	e4c0      	b.n	405d14 <_dtoa_r+0x6e4>
  406392:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406396:	2000      	movs	r0, #0
  406398:	4910      	ldr	r1, [pc, #64]	; (4063dc <_dtoa_r+0xdac>)
  40639a:	f7fd f83b 	bl	403414 <__aeabi_dsub>
  40639e:	4632      	mov	r2, r6
  4063a0:	463b      	mov	r3, r7
  4063a2:	f001 fccd 	bl	407d40 <__aeabi_dcmpgt>
  4063a6:	b908      	cbnz	r0, 4063ac <_dtoa_r+0xd7c>
  4063a8:	e6ae      	b.n	406108 <_dtoa_r+0xad8>
  4063aa:	4615      	mov	r5, r2
  4063ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4063b0:	2b30      	cmp	r3, #48	; 0x30
  4063b2:	f105 32ff 	add.w	r2, r5, #4294967295
  4063b6:	d0f8      	beq.n	4063aa <_dtoa_r+0xd7a>
  4063b8:	e5d7      	b.n	405f6a <_dtoa_r+0x93a>
  4063ba:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4063be:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4063c0:	9302      	str	r3, [sp, #8]
  4063c2:	f7ff bae8 	b.w	405996 <_dtoa_r+0x366>
  4063c6:	970c      	str	r7, [sp, #48]	; 0x30
  4063c8:	f7ff bba5 	b.w	405b16 <_dtoa_r+0x4e6>
  4063cc:	401c0000 	.word	0x401c0000
  4063d0:	40140000 	.word	0x40140000
  4063d4:	004088e0 	.word	0x004088e0
  4063d8:	004088b8 	.word	0x004088b8
  4063dc:	3fe00000 	.word	0x3fe00000
  4063e0:	40240000 	.word	0x40240000
  4063e4:	2b39      	cmp	r3, #57	; 0x39
  4063e6:	f8cd b018 	str.w	fp, [sp, #24]
  4063ea:	46d0      	mov	r8, sl
  4063ec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4063f0:	469a      	mov	sl, r3
  4063f2:	d0c8      	beq.n	406386 <_dtoa_r+0xd56>
  4063f4:	f1bb 0f00 	cmp.w	fp, #0
  4063f8:	f73f aebf 	bgt.w	40617a <_dtoa_r+0xb4a>
  4063fc:	e6bf      	b.n	40617e <_dtoa_r+0xb4e>
  4063fe:	f47f aebe 	bne.w	40617e <_dtoa_r+0xb4e>
  406402:	f01a 0f01 	tst.w	sl, #1
  406406:	f43f aeba 	beq.w	40617e <_dtoa_r+0xb4e>
  40640a:	e6b2      	b.n	406172 <_dtoa_r+0xb42>
  40640c:	f04f 0800 	mov.w	r8, #0
  406410:	4646      	mov	r6, r8
  406412:	e5e9      	b.n	405fe8 <_dtoa_r+0x9b8>
  406414:	4631      	mov	r1, r6
  406416:	2300      	movs	r3, #0
  406418:	220a      	movs	r2, #10
  40641a:	4620      	mov	r0, r4
  40641c:	f000 fc36 	bl	406c8c <__multadd>
  406420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406422:	2b00      	cmp	r3, #0
  406424:	4606      	mov	r6, r0
  406426:	dd0a      	ble.n	40643e <_dtoa_r+0xe0e>
  406428:	930a      	str	r3, [sp, #40]	; 0x28
  40642a:	f7ff bbaa 	b.w	405b82 <_dtoa_r+0x552>
  40642e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406430:	2b02      	cmp	r3, #2
  406432:	dc23      	bgt.n	40647c <_dtoa_r+0xe4c>
  406434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406436:	e43b      	b.n	405cb0 <_dtoa_r+0x680>
  406438:	f04f 0a02 	mov.w	sl, #2
  40643c:	e4ed      	b.n	405e1a <_dtoa_r+0x7ea>
  40643e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406440:	2b02      	cmp	r3, #2
  406442:	dc1b      	bgt.n	40647c <_dtoa_r+0xe4c>
  406444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406446:	e7ef      	b.n	406428 <_dtoa_r+0xdf8>
  406448:	2500      	movs	r5, #0
  40644a:	6465      	str	r5, [r4, #68]	; 0x44
  40644c:	4629      	mov	r1, r5
  40644e:	4620      	mov	r0, r4
  406450:	f000 fbec 	bl	406c2c <_Balloc>
  406454:	f04f 33ff 	mov.w	r3, #4294967295
  406458:	930a      	str	r3, [sp, #40]	; 0x28
  40645a:	930f      	str	r3, [sp, #60]	; 0x3c
  40645c:	2301      	movs	r3, #1
  40645e:	9004      	str	r0, [sp, #16]
  406460:	9525      	str	r5, [sp, #148]	; 0x94
  406462:	6420      	str	r0, [r4, #64]	; 0x40
  406464:	930b      	str	r3, [sp, #44]	; 0x2c
  406466:	f7ff b9dd 	b.w	405824 <_dtoa_r+0x1f4>
  40646a:	2501      	movs	r5, #1
  40646c:	f7ff b9a5 	b.w	4057ba <_dtoa_r+0x18a>
  406470:	f43f ab69 	beq.w	405b46 <_dtoa_r+0x516>
  406474:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406478:	f7ff bbf9 	b.w	405c6e <_dtoa_r+0x63e>
  40647c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40647e:	930a      	str	r3, [sp, #40]	; 0x28
  406480:	e5e5      	b.n	40604e <_dtoa_r+0xa1e>
  406482:	bf00      	nop

00406484 <__libc_fini_array>:
  406484:	b538      	push	{r3, r4, r5, lr}
  406486:	4c0a      	ldr	r4, [pc, #40]	; (4064b0 <__libc_fini_array+0x2c>)
  406488:	4d0a      	ldr	r5, [pc, #40]	; (4064b4 <__libc_fini_array+0x30>)
  40648a:	1b64      	subs	r4, r4, r5
  40648c:	10a4      	asrs	r4, r4, #2
  40648e:	d00a      	beq.n	4064a6 <__libc_fini_array+0x22>
  406490:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406494:	3b01      	subs	r3, #1
  406496:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40649a:	3c01      	subs	r4, #1
  40649c:	f855 3904 	ldr.w	r3, [r5], #-4
  4064a0:	4798      	blx	r3
  4064a2:	2c00      	cmp	r4, #0
  4064a4:	d1f9      	bne.n	40649a <__libc_fini_array+0x16>
  4064a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4064aa:	f002 bb17 	b.w	408adc <_fini>
  4064ae:	bf00      	nop
  4064b0:	00408aec 	.word	0x00408aec
  4064b4:	00408ae8 	.word	0x00408ae8

004064b8 <_localeconv_r>:
  4064b8:	4a04      	ldr	r2, [pc, #16]	; (4064cc <_localeconv_r+0x14>)
  4064ba:	4b05      	ldr	r3, [pc, #20]	; (4064d0 <_localeconv_r+0x18>)
  4064bc:	6812      	ldr	r2, [r2, #0]
  4064be:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4064c0:	2800      	cmp	r0, #0
  4064c2:	bf08      	it	eq
  4064c4:	4618      	moveq	r0, r3
  4064c6:	30f0      	adds	r0, #240	; 0xf0
  4064c8:	4770      	bx	lr
  4064ca:	bf00      	nop
  4064cc:	20400030 	.word	0x20400030
  4064d0:	20400874 	.word	0x20400874

004064d4 <__retarget_lock_acquire_recursive>:
  4064d4:	4770      	bx	lr
  4064d6:	bf00      	nop

004064d8 <__retarget_lock_release_recursive>:
  4064d8:	4770      	bx	lr
  4064da:	bf00      	nop

004064dc <_malloc_r>:
  4064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064e0:	f101 060b 	add.w	r6, r1, #11
  4064e4:	2e16      	cmp	r6, #22
  4064e6:	b083      	sub	sp, #12
  4064e8:	4605      	mov	r5, r0
  4064ea:	f240 809e 	bls.w	40662a <_malloc_r+0x14e>
  4064ee:	f036 0607 	bics.w	r6, r6, #7
  4064f2:	f100 80bd 	bmi.w	406670 <_malloc_r+0x194>
  4064f6:	42b1      	cmp	r1, r6
  4064f8:	f200 80ba 	bhi.w	406670 <_malloc_r+0x194>
  4064fc:	f000 fb8a 	bl	406c14 <__malloc_lock>
  406500:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406504:	f0c0 8293 	bcc.w	406a2e <_malloc_r+0x552>
  406508:	0a73      	lsrs	r3, r6, #9
  40650a:	f000 80b8 	beq.w	40667e <_malloc_r+0x1a2>
  40650e:	2b04      	cmp	r3, #4
  406510:	f200 8179 	bhi.w	406806 <_malloc_r+0x32a>
  406514:	09b3      	lsrs	r3, r6, #6
  406516:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40651a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40651e:	00c3      	lsls	r3, r0, #3
  406520:	4fbf      	ldr	r7, [pc, #764]	; (406820 <_malloc_r+0x344>)
  406522:	443b      	add	r3, r7
  406524:	f1a3 0108 	sub.w	r1, r3, #8
  406528:	685c      	ldr	r4, [r3, #4]
  40652a:	42a1      	cmp	r1, r4
  40652c:	d106      	bne.n	40653c <_malloc_r+0x60>
  40652e:	e00c      	b.n	40654a <_malloc_r+0x6e>
  406530:	2a00      	cmp	r2, #0
  406532:	f280 80aa 	bge.w	40668a <_malloc_r+0x1ae>
  406536:	68e4      	ldr	r4, [r4, #12]
  406538:	42a1      	cmp	r1, r4
  40653a:	d006      	beq.n	40654a <_malloc_r+0x6e>
  40653c:	6863      	ldr	r3, [r4, #4]
  40653e:	f023 0303 	bic.w	r3, r3, #3
  406542:	1b9a      	subs	r2, r3, r6
  406544:	2a0f      	cmp	r2, #15
  406546:	ddf3      	ble.n	406530 <_malloc_r+0x54>
  406548:	4670      	mov	r0, lr
  40654a:	693c      	ldr	r4, [r7, #16]
  40654c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406834 <_malloc_r+0x358>
  406550:	4574      	cmp	r4, lr
  406552:	f000 81ab 	beq.w	4068ac <_malloc_r+0x3d0>
  406556:	6863      	ldr	r3, [r4, #4]
  406558:	f023 0303 	bic.w	r3, r3, #3
  40655c:	1b9a      	subs	r2, r3, r6
  40655e:	2a0f      	cmp	r2, #15
  406560:	f300 8190 	bgt.w	406884 <_malloc_r+0x3a8>
  406564:	2a00      	cmp	r2, #0
  406566:	f8c7 e014 	str.w	lr, [r7, #20]
  40656a:	f8c7 e010 	str.w	lr, [r7, #16]
  40656e:	f280 809d 	bge.w	4066ac <_malloc_r+0x1d0>
  406572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406576:	f080 8161 	bcs.w	40683c <_malloc_r+0x360>
  40657a:	08db      	lsrs	r3, r3, #3
  40657c:	f103 0c01 	add.w	ip, r3, #1
  406580:	1099      	asrs	r1, r3, #2
  406582:	687a      	ldr	r2, [r7, #4]
  406584:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406588:	f8c4 8008 	str.w	r8, [r4, #8]
  40658c:	2301      	movs	r3, #1
  40658e:	408b      	lsls	r3, r1
  406590:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406594:	4313      	orrs	r3, r2
  406596:	3908      	subs	r1, #8
  406598:	60e1      	str	r1, [r4, #12]
  40659a:	607b      	str	r3, [r7, #4]
  40659c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4065a0:	f8c8 400c 	str.w	r4, [r8, #12]
  4065a4:	1082      	asrs	r2, r0, #2
  4065a6:	2401      	movs	r4, #1
  4065a8:	4094      	lsls	r4, r2
  4065aa:	429c      	cmp	r4, r3
  4065ac:	f200 808b 	bhi.w	4066c6 <_malloc_r+0x1ea>
  4065b0:	421c      	tst	r4, r3
  4065b2:	d106      	bne.n	4065c2 <_malloc_r+0xe6>
  4065b4:	f020 0003 	bic.w	r0, r0, #3
  4065b8:	0064      	lsls	r4, r4, #1
  4065ba:	421c      	tst	r4, r3
  4065bc:	f100 0004 	add.w	r0, r0, #4
  4065c0:	d0fa      	beq.n	4065b8 <_malloc_r+0xdc>
  4065c2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4065c6:	46cc      	mov	ip, r9
  4065c8:	4680      	mov	r8, r0
  4065ca:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4065ce:	459c      	cmp	ip, r3
  4065d0:	d107      	bne.n	4065e2 <_malloc_r+0x106>
  4065d2:	e16d      	b.n	4068b0 <_malloc_r+0x3d4>
  4065d4:	2a00      	cmp	r2, #0
  4065d6:	f280 817b 	bge.w	4068d0 <_malloc_r+0x3f4>
  4065da:	68db      	ldr	r3, [r3, #12]
  4065dc:	459c      	cmp	ip, r3
  4065de:	f000 8167 	beq.w	4068b0 <_malloc_r+0x3d4>
  4065e2:	6859      	ldr	r1, [r3, #4]
  4065e4:	f021 0103 	bic.w	r1, r1, #3
  4065e8:	1b8a      	subs	r2, r1, r6
  4065ea:	2a0f      	cmp	r2, #15
  4065ec:	ddf2      	ble.n	4065d4 <_malloc_r+0xf8>
  4065ee:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4065f2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4065f6:	9300      	str	r3, [sp, #0]
  4065f8:	199c      	adds	r4, r3, r6
  4065fa:	4628      	mov	r0, r5
  4065fc:	f046 0601 	orr.w	r6, r6, #1
  406600:	f042 0501 	orr.w	r5, r2, #1
  406604:	605e      	str	r6, [r3, #4]
  406606:	f8c8 c00c 	str.w	ip, [r8, #12]
  40660a:	f8cc 8008 	str.w	r8, [ip, #8]
  40660e:	617c      	str	r4, [r7, #20]
  406610:	613c      	str	r4, [r7, #16]
  406612:	f8c4 e00c 	str.w	lr, [r4, #12]
  406616:	f8c4 e008 	str.w	lr, [r4, #8]
  40661a:	6065      	str	r5, [r4, #4]
  40661c:	505a      	str	r2, [r3, r1]
  40661e:	f000 faff 	bl	406c20 <__malloc_unlock>
  406622:	9b00      	ldr	r3, [sp, #0]
  406624:	f103 0408 	add.w	r4, r3, #8
  406628:	e01e      	b.n	406668 <_malloc_r+0x18c>
  40662a:	2910      	cmp	r1, #16
  40662c:	d820      	bhi.n	406670 <_malloc_r+0x194>
  40662e:	f000 faf1 	bl	406c14 <__malloc_lock>
  406632:	2610      	movs	r6, #16
  406634:	2318      	movs	r3, #24
  406636:	2002      	movs	r0, #2
  406638:	4f79      	ldr	r7, [pc, #484]	; (406820 <_malloc_r+0x344>)
  40663a:	443b      	add	r3, r7
  40663c:	f1a3 0208 	sub.w	r2, r3, #8
  406640:	685c      	ldr	r4, [r3, #4]
  406642:	4294      	cmp	r4, r2
  406644:	f000 813d 	beq.w	4068c2 <_malloc_r+0x3e6>
  406648:	6863      	ldr	r3, [r4, #4]
  40664a:	68e1      	ldr	r1, [r4, #12]
  40664c:	68a6      	ldr	r6, [r4, #8]
  40664e:	f023 0303 	bic.w	r3, r3, #3
  406652:	4423      	add	r3, r4
  406654:	4628      	mov	r0, r5
  406656:	685a      	ldr	r2, [r3, #4]
  406658:	60f1      	str	r1, [r6, #12]
  40665a:	f042 0201 	orr.w	r2, r2, #1
  40665e:	608e      	str	r6, [r1, #8]
  406660:	605a      	str	r2, [r3, #4]
  406662:	f000 fadd 	bl	406c20 <__malloc_unlock>
  406666:	3408      	adds	r4, #8
  406668:	4620      	mov	r0, r4
  40666a:	b003      	add	sp, #12
  40666c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406670:	2400      	movs	r4, #0
  406672:	230c      	movs	r3, #12
  406674:	4620      	mov	r0, r4
  406676:	602b      	str	r3, [r5, #0]
  406678:	b003      	add	sp, #12
  40667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40667e:	2040      	movs	r0, #64	; 0x40
  406680:	f44f 7300 	mov.w	r3, #512	; 0x200
  406684:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406688:	e74a      	b.n	406520 <_malloc_r+0x44>
  40668a:	4423      	add	r3, r4
  40668c:	68e1      	ldr	r1, [r4, #12]
  40668e:	685a      	ldr	r2, [r3, #4]
  406690:	68a6      	ldr	r6, [r4, #8]
  406692:	f042 0201 	orr.w	r2, r2, #1
  406696:	60f1      	str	r1, [r6, #12]
  406698:	4628      	mov	r0, r5
  40669a:	608e      	str	r6, [r1, #8]
  40669c:	605a      	str	r2, [r3, #4]
  40669e:	f000 fabf 	bl	406c20 <__malloc_unlock>
  4066a2:	3408      	adds	r4, #8
  4066a4:	4620      	mov	r0, r4
  4066a6:	b003      	add	sp, #12
  4066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066ac:	4423      	add	r3, r4
  4066ae:	4628      	mov	r0, r5
  4066b0:	685a      	ldr	r2, [r3, #4]
  4066b2:	f042 0201 	orr.w	r2, r2, #1
  4066b6:	605a      	str	r2, [r3, #4]
  4066b8:	f000 fab2 	bl	406c20 <__malloc_unlock>
  4066bc:	3408      	adds	r4, #8
  4066be:	4620      	mov	r0, r4
  4066c0:	b003      	add	sp, #12
  4066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066c6:	68bc      	ldr	r4, [r7, #8]
  4066c8:	6863      	ldr	r3, [r4, #4]
  4066ca:	f023 0803 	bic.w	r8, r3, #3
  4066ce:	45b0      	cmp	r8, r6
  4066d0:	d304      	bcc.n	4066dc <_malloc_r+0x200>
  4066d2:	eba8 0306 	sub.w	r3, r8, r6
  4066d6:	2b0f      	cmp	r3, #15
  4066d8:	f300 8085 	bgt.w	4067e6 <_malloc_r+0x30a>
  4066dc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406838 <_malloc_r+0x35c>
  4066e0:	4b50      	ldr	r3, [pc, #320]	; (406824 <_malloc_r+0x348>)
  4066e2:	f8d9 2000 	ldr.w	r2, [r9]
  4066e6:	681b      	ldr	r3, [r3, #0]
  4066e8:	3201      	adds	r2, #1
  4066ea:	4433      	add	r3, r6
  4066ec:	eb04 0a08 	add.w	sl, r4, r8
  4066f0:	f000 8155 	beq.w	40699e <_malloc_r+0x4c2>
  4066f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4066f8:	330f      	adds	r3, #15
  4066fa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4066fe:	f02b 0b0f 	bic.w	fp, fp, #15
  406702:	4659      	mov	r1, fp
  406704:	4628      	mov	r0, r5
  406706:	f000 fd8b 	bl	407220 <_sbrk_r>
  40670a:	1c41      	adds	r1, r0, #1
  40670c:	4602      	mov	r2, r0
  40670e:	f000 80fc 	beq.w	40690a <_malloc_r+0x42e>
  406712:	4582      	cmp	sl, r0
  406714:	f200 80f7 	bhi.w	406906 <_malloc_r+0x42a>
  406718:	4b43      	ldr	r3, [pc, #268]	; (406828 <_malloc_r+0x34c>)
  40671a:	6819      	ldr	r1, [r3, #0]
  40671c:	4459      	add	r1, fp
  40671e:	6019      	str	r1, [r3, #0]
  406720:	f000 814d 	beq.w	4069be <_malloc_r+0x4e2>
  406724:	f8d9 0000 	ldr.w	r0, [r9]
  406728:	3001      	adds	r0, #1
  40672a:	bf1b      	ittet	ne
  40672c:	eba2 0a0a 	subne.w	sl, r2, sl
  406730:	4451      	addne	r1, sl
  406732:	f8c9 2000 	streq.w	r2, [r9]
  406736:	6019      	strne	r1, [r3, #0]
  406738:	f012 0107 	ands.w	r1, r2, #7
  40673c:	f000 8115 	beq.w	40696a <_malloc_r+0x48e>
  406740:	f1c1 0008 	rsb	r0, r1, #8
  406744:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406748:	4402      	add	r2, r0
  40674a:	3108      	adds	r1, #8
  40674c:	eb02 090b 	add.w	r9, r2, fp
  406750:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406754:	eba1 0909 	sub.w	r9, r1, r9
  406758:	4649      	mov	r1, r9
  40675a:	4628      	mov	r0, r5
  40675c:	9301      	str	r3, [sp, #4]
  40675e:	9200      	str	r2, [sp, #0]
  406760:	f000 fd5e 	bl	407220 <_sbrk_r>
  406764:	1c43      	adds	r3, r0, #1
  406766:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40676a:	f000 8143 	beq.w	4069f4 <_malloc_r+0x518>
  40676e:	1a80      	subs	r0, r0, r2
  406770:	4448      	add	r0, r9
  406772:	f040 0001 	orr.w	r0, r0, #1
  406776:	6819      	ldr	r1, [r3, #0]
  406778:	60ba      	str	r2, [r7, #8]
  40677a:	4449      	add	r1, r9
  40677c:	42bc      	cmp	r4, r7
  40677e:	6050      	str	r0, [r2, #4]
  406780:	6019      	str	r1, [r3, #0]
  406782:	d017      	beq.n	4067b4 <_malloc_r+0x2d8>
  406784:	f1b8 0f0f 	cmp.w	r8, #15
  406788:	f240 80fb 	bls.w	406982 <_malloc_r+0x4a6>
  40678c:	6860      	ldr	r0, [r4, #4]
  40678e:	f1a8 020c 	sub.w	r2, r8, #12
  406792:	f022 0207 	bic.w	r2, r2, #7
  406796:	eb04 0e02 	add.w	lr, r4, r2
  40679a:	f000 0001 	and.w	r0, r0, #1
  40679e:	f04f 0c05 	mov.w	ip, #5
  4067a2:	4310      	orrs	r0, r2
  4067a4:	2a0f      	cmp	r2, #15
  4067a6:	6060      	str	r0, [r4, #4]
  4067a8:	f8ce c004 	str.w	ip, [lr, #4]
  4067ac:	f8ce c008 	str.w	ip, [lr, #8]
  4067b0:	f200 8117 	bhi.w	4069e2 <_malloc_r+0x506>
  4067b4:	4b1d      	ldr	r3, [pc, #116]	; (40682c <_malloc_r+0x350>)
  4067b6:	68bc      	ldr	r4, [r7, #8]
  4067b8:	681a      	ldr	r2, [r3, #0]
  4067ba:	4291      	cmp	r1, r2
  4067bc:	bf88      	it	hi
  4067be:	6019      	strhi	r1, [r3, #0]
  4067c0:	4b1b      	ldr	r3, [pc, #108]	; (406830 <_malloc_r+0x354>)
  4067c2:	681a      	ldr	r2, [r3, #0]
  4067c4:	4291      	cmp	r1, r2
  4067c6:	6862      	ldr	r2, [r4, #4]
  4067c8:	bf88      	it	hi
  4067ca:	6019      	strhi	r1, [r3, #0]
  4067cc:	f022 0203 	bic.w	r2, r2, #3
  4067d0:	4296      	cmp	r6, r2
  4067d2:	eba2 0306 	sub.w	r3, r2, r6
  4067d6:	d801      	bhi.n	4067dc <_malloc_r+0x300>
  4067d8:	2b0f      	cmp	r3, #15
  4067da:	dc04      	bgt.n	4067e6 <_malloc_r+0x30a>
  4067dc:	4628      	mov	r0, r5
  4067de:	f000 fa1f 	bl	406c20 <__malloc_unlock>
  4067e2:	2400      	movs	r4, #0
  4067e4:	e740      	b.n	406668 <_malloc_r+0x18c>
  4067e6:	19a2      	adds	r2, r4, r6
  4067e8:	f043 0301 	orr.w	r3, r3, #1
  4067ec:	f046 0601 	orr.w	r6, r6, #1
  4067f0:	6066      	str	r6, [r4, #4]
  4067f2:	4628      	mov	r0, r5
  4067f4:	60ba      	str	r2, [r7, #8]
  4067f6:	6053      	str	r3, [r2, #4]
  4067f8:	f000 fa12 	bl	406c20 <__malloc_unlock>
  4067fc:	3408      	adds	r4, #8
  4067fe:	4620      	mov	r0, r4
  406800:	b003      	add	sp, #12
  406802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406806:	2b14      	cmp	r3, #20
  406808:	d971      	bls.n	4068ee <_malloc_r+0x412>
  40680a:	2b54      	cmp	r3, #84	; 0x54
  40680c:	f200 80a3 	bhi.w	406956 <_malloc_r+0x47a>
  406810:	0b33      	lsrs	r3, r6, #12
  406812:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406816:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40681a:	00c3      	lsls	r3, r0, #3
  40681c:	e680      	b.n	406520 <_malloc_r+0x44>
  40681e:	bf00      	nop
  406820:	20400464 	.word	0x20400464
  406824:	20400cbc 	.word	0x20400cbc
  406828:	20400c8c 	.word	0x20400c8c
  40682c:	20400cb4 	.word	0x20400cb4
  406830:	20400cb8 	.word	0x20400cb8
  406834:	2040046c 	.word	0x2040046c
  406838:	2040086c 	.word	0x2040086c
  40683c:	0a5a      	lsrs	r2, r3, #9
  40683e:	2a04      	cmp	r2, #4
  406840:	d95b      	bls.n	4068fa <_malloc_r+0x41e>
  406842:	2a14      	cmp	r2, #20
  406844:	f200 80ae 	bhi.w	4069a4 <_malloc_r+0x4c8>
  406848:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40684c:	00c9      	lsls	r1, r1, #3
  40684e:	325b      	adds	r2, #91	; 0x5b
  406850:	eb07 0c01 	add.w	ip, r7, r1
  406854:	5879      	ldr	r1, [r7, r1]
  406856:	f1ac 0c08 	sub.w	ip, ip, #8
  40685a:	458c      	cmp	ip, r1
  40685c:	f000 8088 	beq.w	406970 <_malloc_r+0x494>
  406860:	684a      	ldr	r2, [r1, #4]
  406862:	f022 0203 	bic.w	r2, r2, #3
  406866:	4293      	cmp	r3, r2
  406868:	d273      	bcs.n	406952 <_malloc_r+0x476>
  40686a:	6889      	ldr	r1, [r1, #8]
  40686c:	458c      	cmp	ip, r1
  40686e:	d1f7      	bne.n	406860 <_malloc_r+0x384>
  406870:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406874:	687b      	ldr	r3, [r7, #4]
  406876:	60e2      	str	r2, [r4, #12]
  406878:	f8c4 c008 	str.w	ip, [r4, #8]
  40687c:	6094      	str	r4, [r2, #8]
  40687e:	f8cc 400c 	str.w	r4, [ip, #12]
  406882:	e68f      	b.n	4065a4 <_malloc_r+0xc8>
  406884:	19a1      	adds	r1, r4, r6
  406886:	f046 0c01 	orr.w	ip, r6, #1
  40688a:	f042 0601 	orr.w	r6, r2, #1
  40688e:	f8c4 c004 	str.w	ip, [r4, #4]
  406892:	4628      	mov	r0, r5
  406894:	6179      	str	r1, [r7, #20]
  406896:	6139      	str	r1, [r7, #16]
  406898:	f8c1 e00c 	str.w	lr, [r1, #12]
  40689c:	f8c1 e008 	str.w	lr, [r1, #8]
  4068a0:	604e      	str	r6, [r1, #4]
  4068a2:	50e2      	str	r2, [r4, r3]
  4068a4:	f000 f9bc 	bl	406c20 <__malloc_unlock>
  4068a8:	3408      	adds	r4, #8
  4068aa:	e6dd      	b.n	406668 <_malloc_r+0x18c>
  4068ac:	687b      	ldr	r3, [r7, #4]
  4068ae:	e679      	b.n	4065a4 <_malloc_r+0xc8>
  4068b0:	f108 0801 	add.w	r8, r8, #1
  4068b4:	f018 0f03 	tst.w	r8, #3
  4068b8:	f10c 0c08 	add.w	ip, ip, #8
  4068bc:	f47f ae85 	bne.w	4065ca <_malloc_r+0xee>
  4068c0:	e02d      	b.n	40691e <_malloc_r+0x442>
  4068c2:	68dc      	ldr	r4, [r3, #12]
  4068c4:	42a3      	cmp	r3, r4
  4068c6:	bf08      	it	eq
  4068c8:	3002      	addeq	r0, #2
  4068ca:	f43f ae3e 	beq.w	40654a <_malloc_r+0x6e>
  4068ce:	e6bb      	b.n	406648 <_malloc_r+0x16c>
  4068d0:	4419      	add	r1, r3
  4068d2:	461c      	mov	r4, r3
  4068d4:	684a      	ldr	r2, [r1, #4]
  4068d6:	68db      	ldr	r3, [r3, #12]
  4068d8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4068dc:	f042 0201 	orr.w	r2, r2, #1
  4068e0:	604a      	str	r2, [r1, #4]
  4068e2:	4628      	mov	r0, r5
  4068e4:	60f3      	str	r3, [r6, #12]
  4068e6:	609e      	str	r6, [r3, #8]
  4068e8:	f000 f99a 	bl	406c20 <__malloc_unlock>
  4068ec:	e6bc      	b.n	406668 <_malloc_r+0x18c>
  4068ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4068f2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4068f6:	00c3      	lsls	r3, r0, #3
  4068f8:	e612      	b.n	406520 <_malloc_r+0x44>
  4068fa:	099a      	lsrs	r2, r3, #6
  4068fc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406900:	00c9      	lsls	r1, r1, #3
  406902:	3238      	adds	r2, #56	; 0x38
  406904:	e7a4      	b.n	406850 <_malloc_r+0x374>
  406906:	42bc      	cmp	r4, r7
  406908:	d054      	beq.n	4069b4 <_malloc_r+0x4d8>
  40690a:	68bc      	ldr	r4, [r7, #8]
  40690c:	6862      	ldr	r2, [r4, #4]
  40690e:	f022 0203 	bic.w	r2, r2, #3
  406912:	e75d      	b.n	4067d0 <_malloc_r+0x2f4>
  406914:	f859 3908 	ldr.w	r3, [r9], #-8
  406918:	4599      	cmp	r9, r3
  40691a:	f040 8086 	bne.w	406a2a <_malloc_r+0x54e>
  40691e:	f010 0f03 	tst.w	r0, #3
  406922:	f100 30ff 	add.w	r0, r0, #4294967295
  406926:	d1f5      	bne.n	406914 <_malloc_r+0x438>
  406928:	687b      	ldr	r3, [r7, #4]
  40692a:	ea23 0304 	bic.w	r3, r3, r4
  40692e:	607b      	str	r3, [r7, #4]
  406930:	0064      	lsls	r4, r4, #1
  406932:	429c      	cmp	r4, r3
  406934:	f63f aec7 	bhi.w	4066c6 <_malloc_r+0x1ea>
  406938:	2c00      	cmp	r4, #0
  40693a:	f43f aec4 	beq.w	4066c6 <_malloc_r+0x1ea>
  40693e:	421c      	tst	r4, r3
  406940:	4640      	mov	r0, r8
  406942:	f47f ae3e 	bne.w	4065c2 <_malloc_r+0xe6>
  406946:	0064      	lsls	r4, r4, #1
  406948:	421c      	tst	r4, r3
  40694a:	f100 0004 	add.w	r0, r0, #4
  40694e:	d0fa      	beq.n	406946 <_malloc_r+0x46a>
  406950:	e637      	b.n	4065c2 <_malloc_r+0xe6>
  406952:	468c      	mov	ip, r1
  406954:	e78c      	b.n	406870 <_malloc_r+0x394>
  406956:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40695a:	d815      	bhi.n	406988 <_malloc_r+0x4ac>
  40695c:	0bf3      	lsrs	r3, r6, #15
  40695e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406962:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406966:	00c3      	lsls	r3, r0, #3
  406968:	e5da      	b.n	406520 <_malloc_r+0x44>
  40696a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40696e:	e6ed      	b.n	40674c <_malloc_r+0x270>
  406970:	687b      	ldr	r3, [r7, #4]
  406972:	1092      	asrs	r2, r2, #2
  406974:	2101      	movs	r1, #1
  406976:	fa01 f202 	lsl.w	r2, r1, r2
  40697a:	4313      	orrs	r3, r2
  40697c:	607b      	str	r3, [r7, #4]
  40697e:	4662      	mov	r2, ip
  406980:	e779      	b.n	406876 <_malloc_r+0x39a>
  406982:	2301      	movs	r3, #1
  406984:	6053      	str	r3, [r2, #4]
  406986:	e729      	b.n	4067dc <_malloc_r+0x300>
  406988:	f240 5254 	movw	r2, #1364	; 0x554
  40698c:	4293      	cmp	r3, r2
  40698e:	d822      	bhi.n	4069d6 <_malloc_r+0x4fa>
  406990:	0cb3      	lsrs	r3, r6, #18
  406992:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406996:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40699a:	00c3      	lsls	r3, r0, #3
  40699c:	e5c0      	b.n	406520 <_malloc_r+0x44>
  40699e:	f103 0b10 	add.w	fp, r3, #16
  4069a2:	e6ae      	b.n	406702 <_malloc_r+0x226>
  4069a4:	2a54      	cmp	r2, #84	; 0x54
  4069a6:	d829      	bhi.n	4069fc <_malloc_r+0x520>
  4069a8:	0b1a      	lsrs	r2, r3, #12
  4069aa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4069ae:	00c9      	lsls	r1, r1, #3
  4069b0:	326e      	adds	r2, #110	; 0x6e
  4069b2:	e74d      	b.n	406850 <_malloc_r+0x374>
  4069b4:	4b20      	ldr	r3, [pc, #128]	; (406a38 <_malloc_r+0x55c>)
  4069b6:	6819      	ldr	r1, [r3, #0]
  4069b8:	4459      	add	r1, fp
  4069ba:	6019      	str	r1, [r3, #0]
  4069bc:	e6b2      	b.n	406724 <_malloc_r+0x248>
  4069be:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4069c2:	2800      	cmp	r0, #0
  4069c4:	f47f aeae 	bne.w	406724 <_malloc_r+0x248>
  4069c8:	eb08 030b 	add.w	r3, r8, fp
  4069cc:	68ba      	ldr	r2, [r7, #8]
  4069ce:	f043 0301 	orr.w	r3, r3, #1
  4069d2:	6053      	str	r3, [r2, #4]
  4069d4:	e6ee      	b.n	4067b4 <_malloc_r+0x2d8>
  4069d6:	207f      	movs	r0, #127	; 0x7f
  4069d8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4069dc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4069e0:	e59e      	b.n	406520 <_malloc_r+0x44>
  4069e2:	f104 0108 	add.w	r1, r4, #8
  4069e6:	4628      	mov	r0, r5
  4069e8:	9300      	str	r3, [sp, #0]
  4069ea:	f000 fe17 	bl	40761c <_free_r>
  4069ee:	9b00      	ldr	r3, [sp, #0]
  4069f0:	6819      	ldr	r1, [r3, #0]
  4069f2:	e6df      	b.n	4067b4 <_malloc_r+0x2d8>
  4069f4:	2001      	movs	r0, #1
  4069f6:	f04f 0900 	mov.w	r9, #0
  4069fa:	e6bc      	b.n	406776 <_malloc_r+0x29a>
  4069fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406a00:	d805      	bhi.n	406a0e <_malloc_r+0x532>
  406a02:	0bda      	lsrs	r2, r3, #15
  406a04:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406a08:	00c9      	lsls	r1, r1, #3
  406a0a:	3277      	adds	r2, #119	; 0x77
  406a0c:	e720      	b.n	406850 <_malloc_r+0x374>
  406a0e:	f240 5154 	movw	r1, #1364	; 0x554
  406a12:	428a      	cmp	r2, r1
  406a14:	d805      	bhi.n	406a22 <_malloc_r+0x546>
  406a16:	0c9a      	lsrs	r2, r3, #18
  406a18:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406a1c:	00c9      	lsls	r1, r1, #3
  406a1e:	327c      	adds	r2, #124	; 0x7c
  406a20:	e716      	b.n	406850 <_malloc_r+0x374>
  406a22:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406a26:	227e      	movs	r2, #126	; 0x7e
  406a28:	e712      	b.n	406850 <_malloc_r+0x374>
  406a2a:	687b      	ldr	r3, [r7, #4]
  406a2c:	e780      	b.n	406930 <_malloc_r+0x454>
  406a2e:	08f0      	lsrs	r0, r6, #3
  406a30:	f106 0308 	add.w	r3, r6, #8
  406a34:	e600      	b.n	406638 <_malloc_r+0x15c>
  406a36:	bf00      	nop
  406a38:	20400c8c 	.word	0x20400c8c
  406a3c:	00000000 	.word	0x00000000

00406a40 <memchr>:
  406a40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a44:	2a10      	cmp	r2, #16
  406a46:	db2b      	blt.n	406aa0 <memchr+0x60>
  406a48:	f010 0f07 	tst.w	r0, #7
  406a4c:	d008      	beq.n	406a60 <memchr+0x20>
  406a4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a52:	3a01      	subs	r2, #1
  406a54:	428b      	cmp	r3, r1
  406a56:	d02d      	beq.n	406ab4 <memchr+0x74>
  406a58:	f010 0f07 	tst.w	r0, #7
  406a5c:	b342      	cbz	r2, 406ab0 <memchr+0x70>
  406a5e:	d1f6      	bne.n	406a4e <memchr+0xe>
  406a60:	b4f0      	push	{r4, r5, r6, r7}
  406a62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406a66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406a6a:	f022 0407 	bic.w	r4, r2, #7
  406a6e:	f07f 0700 	mvns.w	r7, #0
  406a72:	2300      	movs	r3, #0
  406a74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406a78:	3c08      	subs	r4, #8
  406a7a:	ea85 0501 	eor.w	r5, r5, r1
  406a7e:	ea86 0601 	eor.w	r6, r6, r1
  406a82:	fa85 f547 	uadd8	r5, r5, r7
  406a86:	faa3 f587 	sel	r5, r3, r7
  406a8a:	fa86 f647 	uadd8	r6, r6, r7
  406a8e:	faa5 f687 	sel	r6, r5, r7
  406a92:	b98e      	cbnz	r6, 406ab8 <memchr+0x78>
  406a94:	d1ee      	bne.n	406a74 <memchr+0x34>
  406a96:	bcf0      	pop	{r4, r5, r6, r7}
  406a98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a9c:	f002 0207 	and.w	r2, r2, #7
  406aa0:	b132      	cbz	r2, 406ab0 <memchr+0x70>
  406aa2:	f810 3b01 	ldrb.w	r3, [r0], #1
  406aa6:	3a01      	subs	r2, #1
  406aa8:	ea83 0301 	eor.w	r3, r3, r1
  406aac:	b113      	cbz	r3, 406ab4 <memchr+0x74>
  406aae:	d1f8      	bne.n	406aa2 <memchr+0x62>
  406ab0:	2000      	movs	r0, #0
  406ab2:	4770      	bx	lr
  406ab4:	3801      	subs	r0, #1
  406ab6:	4770      	bx	lr
  406ab8:	2d00      	cmp	r5, #0
  406aba:	bf06      	itte	eq
  406abc:	4635      	moveq	r5, r6
  406abe:	3803      	subeq	r0, #3
  406ac0:	3807      	subne	r0, #7
  406ac2:	f015 0f01 	tst.w	r5, #1
  406ac6:	d107      	bne.n	406ad8 <memchr+0x98>
  406ac8:	3001      	adds	r0, #1
  406aca:	f415 7f80 	tst.w	r5, #256	; 0x100
  406ace:	bf02      	ittt	eq
  406ad0:	3001      	addeq	r0, #1
  406ad2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406ad6:	3001      	addeq	r0, #1
  406ad8:	bcf0      	pop	{r4, r5, r6, r7}
  406ada:	3801      	subs	r0, #1
  406adc:	4770      	bx	lr
  406ade:	bf00      	nop

00406ae0 <memcpy>:
  406ae0:	4684      	mov	ip, r0
  406ae2:	ea41 0300 	orr.w	r3, r1, r0
  406ae6:	f013 0303 	ands.w	r3, r3, #3
  406aea:	d16d      	bne.n	406bc8 <memcpy+0xe8>
  406aec:	3a40      	subs	r2, #64	; 0x40
  406aee:	d341      	bcc.n	406b74 <memcpy+0x94>
  406af0:	f851 3b04 	ldr.w	r3, [r1], #4
  406af4:	f840 3b04 	str.w	r3, [r0], #4
  406af8:	f851 3b04 	ldr.w	r3, [r1], #4
  406afc:	f840 3b04 	str.w	r3, [r0], #4
  406b00:	f851 3b04 	ldr.w	r3, [r1], #4
  406b04:	f840 3b04 	str.w	r3, [r0], #4
  406b08:	f851 3b04 	ldr.w	r3, [r1], #4
  406b0c:	f840 3b04 	str.w	r3, [r0], #4
  406b10:	f851 3b04 	ldr.w	r3, [r1], #4
  406b14:	f840 3b04 	str.w	r3, [r0], #4
  406b18:	f851 3b04 	ldr.w	r3, [r1], #4
  406b1c:	f840 3b04 	str.w	r3, [r0], #4
  406b20:	f851 3b04 	ldr.w	r3, [r1], #4
  406b24:	f840 3b04 	str.w	r3, [r0], #4
  406b28:	f851 3b04 	ldr.w	r3, [r1], #4
  406b2c:	f840 3b04 	str.w	r3, [r0], #4
  406b30:	f851 3b04 	ldr.w	r3, [r1], #4
  406b34:	f840 3b04 	str.w	r3, [r0], #4
  406b38:	f851 3b04 	ldr.w	r3, [r1], #4
  406b3c:	f840 3b04 	str.w	r3, [r0], #4
  406b40:	f851 3b04 	ldr.w	r3, [r1], #4
  406b44:	f840 3b04 	str.w	r3, [r0], #4
  406b48:	f851 3b04 	ldr.w	r3, [r1], #4
  406b4c:	f840 3b04 	str.w	r3, [r0], #4
  406b50:	f851 3b04 	ldr.w	r3, [r1], #4
  406b54:	f840 3b04 	str.w	r3, [r0], #4
  406b58:	f851 3b04 	ldr.w	r3, [r1], #4
  406b5c:	f840 3b04 	str.w	r3, [r0], #4
  406b60:	f851 3b04 	ldr.w	r3, [r1], #4
  406b64:	f840 3b04 	str.w	r3, [r0], #4
  406b68:	f851 3b04 	ldr.w	r3, [r1], #4
  406b6c:	f840 3b04 	str.w	r3, [r0], #4
  406b70:	3a40      	subs	r2, #64	; 0x40
  406b72:	d2bd      	bcs.n	406af0 <memcpy+0x10>
  406b74:	3230      	adds	r2, #48	; 0x30
  406b76:	d311      	bcc.n	406b9c <memcpy+0xbc>
  406b78:	f851 3b04 	ldr.w	r3, [r1], #4
  406b7c:	f840 3b04 	str.w	r3, [r0], #4
  406b80:	f851 3b04 	ldr.w	r3, [r1], #4
  406b84:	f840 3b04 	str.w	r3, [r0], #4
  406b88:	f851 3b04 	ldr.w	r3, [r1], #4
  406b8c:	f840 3b04 	str.w	r3, [r0], #4
  406b90:	f851 3b04 	ldr.w	r3, [r1], #4
  406b94:	f840 3b04 	str.w	r3, [r0], #4
  406b98:	3a10      	subs	r2, #16
  406b9a:	d2ed      	bcs.n	406b78 <memcpy+0x98>
  406b9c:	320c      	adds	r2, #12
  406b9e:	d305      	bcc.n	406bac <memcpy+0xcc>
  406ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ba4:	f840 3b04 	str.w	r3, [r0], #4
  406ba8:	3a04      	subs	r2, #4
  406baa:	d2f9      	bcs.n	406ba0 <memcpy+0xc0>
  406bac:	3204      	adds	r2, #4
  406bae:	d008      	beq.n	406bc2 <memcpy+0xe2>
  406bb0:	07d2      	lsls	r2, r2, #31
  406bb2:	bf1c      	itt	ne
  406bb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406bb8:	f800 3b01 	strbne.w	r3, [r0], #1
  406bbc:	d301      	bcc.n	406bc2 <memcpy+0xe2>
  406bbe:	880b      	ldrh	r3, [r1, #0]
  406bc0:	8003      	strh	r3, [r0, #0]
  406bc2:	4660      	mov	r0, ip
  406bc4:	4770      	bx	lr
  406bc6:	bf00      	nop
  406bc8:	2a08      	cmp	r2, #8
  406bca:	d313      	bcc.n	406bf4 <memcpy+0x114>
  406bcc:	078b      	lsls	r3, r1, #30
  406bce:	d08d      	beq.n	406aec <memcpy+0xc>
  406bd0:	f010 0303 	ands.w	r3, r0, #3
  406bd4:	d08a      	beq.n	406aec <memcpy+0xc>
  406bd6:	f1c3 0304 	rsb	r3, r3, #4
  406bda:	1ad2      	subs	r2, r2, r3
  406bdc:	07db      	lsls	r3, r3, #31
  406bde:	bf1c      	itt	ne
  406be0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406be4:	f800 3b01 	strbne.w	r3, [r0], #1
  406be8:	d380      	bcc.n	406aec <memcpy+0xc>
  406bea:	f831 3b02 	ldrh.w	r3, [r1], #2
  406bee:	f820 3b02 	strh.w	r3, [r0], #2
  406bf2:	e77b      	b.n	406aec <memcpy+0xc>
  406bf4:	3a04      	subs	r2, #4
  406bf6:	d3d9      	bcc.n	406bac <memcpy+0xcc>
  406bf8:	3a01      	subs	r2, #1
  406bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
  406bfe:	f800 3b01 	strb.w	r3, [r0], #1
  406c02:	d2f9      	bcs.n	406bf8 <memcpy+0x118>
  406c04:	780b      	ldrb	r3, [r1, #0]
  406c06:	7003      	strb	r3, [r0, #0]
  406c08:	784b      	ldrb	r3, [r1, #1]
  406c0a:	7043      	strb	r3, [r0, #1]
  406c0c:	788b      	ldrb	r3, [r1, #2]
  406c0e:	7083      	strb	r3, [r0, #2]
  406c10:	4660      	mov	r0, ip
  406c12:	4770      	bx	lr

00406c14 <__malloc_lock>:
  406c14:	4801      	ldr	r0, [pc, #4]	; (406c1c <__malloc_lock+0x8>)
  406c16:	f7ff bc5d 	b.w	4064d4 <__retarget_lock_acquire_recursive>
  406c1a:	bf00      	nop
  406c1c:	20400cd0 	.word	0x20400cd0

00406c20 <__malloc_unlock>:
  406c20:	4801      	ldr	r0, [pc, #4]	; (406c28 <__malloc_unlock+0x8>)
  406c22:	f7ff bc59 	b.w	4064d8 <__retarget_lock_release_recursive>
  406c26:	bf00      	nop
  406c28:	20400cd0 	.word	0x20400cd0

00406c2c <_Balloc>:
  406c2c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406c2e:	b570      	push	{r4, r5, r6, lr}
  406c30:	4605      	mov	r5, r0
  406c32:	460c      	mov	r4, r1
  406c34:	b14b      	cbz	r3, 406c4a <_Balloc+0x1e>
  406c36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406c3a:	b180      	cbz	r0, 406c5e <_Balloc+0x32>
  406c3c:	6802      	ldr	r2, [r0, #0]
  406c3e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406c42:	2300      	movs	r3, #0
  406c44:	6103      	str	r3, [r0, #16]
  406c46:	60c3      	str	r3, [r0, #12]
  406c48:	bd70      	pop	{r4, r5, r6, pc}
  406c4a:	2221      	movs	r2, #33	; 0x21
  406c4c:	2104      	movs	r1, #4
  406c4e:	f000 fc65 	bl	40751c <_calloc_r>
  406c52:	64e8      	str	r0, [r5, #76]	; 0x4c
  406c54:	4603      	mov	r3, r0
  406c56:	2800      	cmp	r0, #0
  406c58:	d1ed      	bne.n	406c36 <_Balloc+0xa>
  406c5a:	2000      	movs	r0, #0
  406c5c:	bd70      	pop	{r4, r5, r6, pc}
  406c5e:	2101      	movs	r1, #1
  406c60:	fa01 f604 	lsl.w	r6, r1, r4
  406c64:	1d72      	adds	r2, r6, #5
  406c66:	4628      	mov	r0, r5
  406c68:	0092      	lsls	r2, r2, #2
  406c6a:	f000 fc57 	bl	40751c <_calloc_r>
  406c6e:	2800      	cmp	r0, #0
  406c70:	d0f3      	beq.n	406c5a <_Balloc+0x2e>
  406c72:	6044      	str	r4, [r0, #4]
  406c74:	6086      	str	r6, [r0, #8]
  406c76:	e7e4      	b.n	406c42 <_Balloc+0x16>

00406c78 <_Bfree>:
  406c78:	b131      	cbz	r1, 406c88 <_Bfree+0x10>
  406c7a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406c7c:	684a      	ldr	r2, [r1, #4]
  406c7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406c82:	6008      	str	r0, [r1, #0]
  406c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406c88:	4770      	bx	lr
  406c8a:	bf00      	nop

00406c8c <__multadd>:
  406c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c8e:	690c      	ldr	r4, [r1, #16]
  406c90:	b083      	sub	sp, #12
  406c92:	460d      	mov	r5, r1
  406c94:	4606      	mov	r6, r0
  406c96:	f101 0e14 	add.w	lr, r1, #20
  406c9a:	2700      	movs	r7, #0
  406c9c:	f8de 0000 	ldr.w	r0, [lr]
  406ca0:	b281      	uxth	r1, r0
  406ca2:	fb02 3301 	mla	r3, r2, r1, r3
  406ca6:	0c01      	lsrs	r1, r0, #16
  406ca8:	0c18      	lsrs	r0, r3, #16
  406caa:	fb02 0101 	mla	r1, r2, r1, r0
  406cae:	b29b      	uxth	r3, r3
  406cb0:	3701      	adds	r7, #1
  406cb2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406cb6:	42bc      	cmp	r4, r7
  406cb8:	f84e 3b04 	str.w	r3, [lr], #4
  406cbc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406cc0:	dcec      	bgt.n	406c9c <__multadd+0x10>
  406cc2:	b13b      	cbz	r3, 406cd4 <__multadd+0x48>
  406cc4:	68aa      	ldr	r2, [r5, #8]
  406cc6:	4294      	cmp	r4, r2
  406cc8:	da07      	bge.n	406cda <__multadd+0x4e>
  406cca:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406cce:	3401      	adds	r4, #1
  406cd0:	6153      	str	r3, [r2, #20]
  406cd2:	612c      	str	r4, [r5, #16]
  406cd4:	4628      	mov	r0, r5
  406cd6:	b003      	add	sp, #12
  406cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406cda:	6869      	ldr	r1, [r5, #4]
  406cdc:	9301      	str	r3, [sp, #4]
  406cde:	3101      	adds	r1, #1
  406ce0:	4630      	mov	r0, r6
  406ce2:	f7ff ffa3 	bl	406c2c <_Balloc>
  406ce6:	692a      	ldr	r2, [r5, #16]
  406ce8:	3202      	adds	r2, #2
  406cea:	f105 010c 	add.w	r1, r5, #12
  406cee:	4607      	mov	r7, r0
  406cf0:	0092      	lsls	r2, r2, #2
  406cf2:	300c      	adds	r0, #12
  406cf4:	f7ff fef4 	bl	406ae0 <memcpy>
  406cf8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406cfa:	6869      	ldr	r1, [r5, #4]
  406cfc:	9b01      	ldr	r3, [sp, #4]
  406cfe:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406d02:	6028      	str	r0, [r5, #0]
  406d04:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406d08:	463d      	mov	r5, r7
  406d0a:	e7de      	b.n	406cca <__multadd+0x3e>

00406d0c <__hi0bits>:
  406d0c:	0c02      	lsrs	r2, r0, #16
  406d0e:	0412      	lsls	r2, r2, #16
  406d10:	4603      	mov	r3, r0
  406d12:	b9b2      	cbnz	r2, 406d42 <__hi0bits+0x36>
  406d14:	0403      	lsls	r3, r0, #16
  406d16:	2010      	movs	r0, #16
  406d18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406d1c:	bf04      	itt	eq
  406d1e:	021b      	lsleq	r3, r3, #8
  406d20:	3008      	addeq	r0, #8
  406d22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406d26:	bf04      	itt	eq
  406d28:	011b      	lsleq	r3, r3, #4
  406d2a:	3004      	addeq	r0, #4
  406d2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406d30:	bf04      	itt	eq
  406d32:	009b      	lsleq	r3, r3, #2
  406d34:	3002      	addeq	r0, #2
  406d36:	2b00      	cmp	r3, #0
  406d38:	db02      	blt.n	406d40 <__hi0bits+0x34>
  406d3a:	005b      	lsls	r3, r3, #1
  406d3c:	d403      	bmi.n	406d46 <__hi0bits+0x3a>
  406d3e:	2020      	movs	r0, #32
  406d40:	4770      	bx	lr
  406d42:	2000      	movs	r0, #0
  406d44:	e7e8      	b.n	406d18 <__hi0bits+0xc>
  406d46:	3001      	adds	r0, #1
  406d48:	4770      	bx	lr
  406d4a:	bf00      	nop

00406d4c <__lo0bits>:
  406d4c:	6803      	ldr	r3, [r0, #0]
  406d4e:	f013 0207 	ands.w	r2, r3, #7
  406d52:	4601      	mov	r1, r0
  406d54:	d007      	beq.n	406d66 <__lo0bits+0x1a>
  406d56:	07da      	lsls	r2, r3, #31
  406d58:	d421      	bmi.n	406d9e <__lo0bits+0x52>
  406d5a:	0798      	lsls	r0, r3, #30
  406d5c:	d421      	bmi.n	406da2 <__lo0bits+0x56>
  406d5e:	089b      	lsrs	r3, r3, #2
  406d60:	600b      	str	r3, [r1, #0]
  406d62:	2002      	movs	r0, #2
  406d64:	4770      	bx	lr
  406d66:	b298      	uxth	r0, r3
  406d68:	b198      	cbz	r0, 406d92 <__lo0bits+0x46>
  406d6a:	4610      	mov	r0, r2
  406d6c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406d70:	bf04      	itt	eq
  406d72:	0a1b      	lsreq	r3, r3, #8
  406d74:	3008      	addeq	r0, #8
  406d76:	071a      	lsls	r2, r3, #28
  406d78:	bf04      	itt	eq
  406d7a:	091b      	lsreq	r3, r3, #4
  406d7c:	3004      	addeq	r0, #4
  406d7e:	079a      	lsls	r2, r3, #30
  406d80:	bf04      	itt	eq
  406d82:	089b      	lsreq	r3, r3, #2
  406d84:	3002      	addeq	r0, #2
  406d86:	07da      	lsls	r2, r3, #31
  406d88:	d407      	bmi.n	406d9a <__lo0bits+0x4e>
  406d8a:	085b      	lsrs	r3, r3, #1
  406d8c:	d104      	bne.n	406d98 <__lo0bits+0x4c>
  406d8e:	2020      	movs	r0, #32
  406d90:	4770      	bx	lr
  406d92:	0c1b      	lsrs	r3, r3, #16
  406d94:	2010      	movs	r0, #16
  406d96:	e7e9      	b.n	406d6c <__lo0bits+0x20>
  406d98:	3001      	adds	r0, #1
  406d9a:	600b      	str	r3, [r1, #0]
  406d9c:	4770      	bx	lr
  406d9e:	2000      	movs	r0, #0
  406da0:	4770      	bx	lr
  406da2:	085b      	lsrs	r3, r3, #1
  406da4:	600b      	str	r3, [r1, #0]
  406da6:	2001      	movs	r0, #1
  406da8:	4770      	bx	lr
  406daa:	bf00      	nop

00406dac <__i2b>:
  406dac:	b510      	push	{r4, lr}
  406dae:	460c      	mov	r4, r1
  406db0:	2101      	movs	r1, #1
  406db2:	f7ff ff3b 	bl	406c2c <_Balloc>
  406db6:	2201      	movs	r2, #1
  406db8:	6144      	str	r4, [r0, #20]
  406dba:	6102      	str	r2, [r0, #16]
  406dbc:	bd10      	pop	{r4, pc}
  406dbe:	bf00      	nop

00406dc0 <__multiply>:
  406dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406dc4:	690c      	ldr	r4, [r1, #16]
  406dc6:	6915      	ldr	r5, [r2, #16]
  406dc8:	42ac      	cmp	r4, r5
  406dca:	b083      	sub	sp, #12
  406dcc:	468b      	mov	fp, r1
  406dce:	4616      	mov	r6, r2
  406dd0:	da04      	bge.n	406ddc <__multiply+0x1c>
  406dd2:	4622      	mov	r2, r4
  406dd4:	46b3      	mov	fp, r6
  406dd6:	462c      	mov	r4, r5
  406dd8:	460e      	mov	r6, r1
  406dda:	4615      	mov	r5, r2
  406ddc:	f8db 3008 	ldr.w	r3, [fp, #8]
  406de0:	f8db 1004 	ldr.w	r1, [fp, #4]
  406de4:	eb04 0805 	add.w	r8, r4, r5
  406de8:	4598      	cmp	r8, r3
  406dea:	bfc8      	it	gt
  406dec:	3101      	addgt	r1, #1
  406dee:	f7ff ff1d 	bl	406c2c <_Balloc>
  406df2:	f100 0914 	add.w	r9, r0, #20
  406df6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406dfa:	45d1      	cmp	r9, sl
  406dfc:	9000      	str	r0, [sp, #0]
  406dfe:	d205      	bcs.n	406e0c <__multiply+0x4c>
  406e00:	464b      	mov	r3, r9
  406e02:	2100      	movs	r1, #0
  406e04:	f843 1b04 	str.w	r1, [r3], #4
  406e08:	459a      	cmp	sl, r3
  406e0a:	d8fb      	bhi.n	406e04 <__multiply+0x44>
  406e0c:	f106 0c14 	add.w	ip, r6, #20
  406e10:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406e14:	f10b 0b14 	add.w	fp, fp, #20
  406e18:	459c      	cmp	ip, r3
  406e1a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406e1e:	d24c      	bcs.n	406eba <__multiply+0xfa>
  406e20:	f8cd a004 	str.w	sl, [sp, #4]
  406e24:	469a      	mov	sl, r3
  406e26:	f8dc 5000 	ldr.w	r5, [ip]
  406e2a:	b2af      	uxth	r7, r5
  406e2c:	b1ef      	cbz	r7, 406e6a <__multiply+0xaa>
  406e2e:	2100      	movs	r1, #0
  406e30:	464d      	mov	r5, r9
  406e32:	465e      	mov	r6, fp
  406e34:	460c      	mov	r4, r1
  406e36:	f856 2b04 	ldr.w	r2, [r6], #4
  406e3a:	6828      	ldr	r0, [r5, #0]
  406e3c:	b293      	uxth	r3, r2
  406e3e:	b281      	uxth	r1, r0
  406e40:	fb07 1303 	mla	r3, r7, r3, r1
  406e44:	0c12      	lsrs	r2, r2, #16
  406e46:	0c01      	lsrs	r1, r0, #16
  406e48:	4423      	add	r3, r4
  406e4a:	fb07 1102 	mla	r1, r7, r2, r1
  406e4e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406e52:	b29b      	uxth	r3, r3
  406e54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406e58:	45b6      	cmp	lr, r6
  406e5a:	f845 3b04 	str.w	r3, [r5], #4
  406e5e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406e62:	d8e8      	bhi.n	406e36 <__multiply+0x76>
  406e64:	602c      	str	r4, [r5, #0]
  406e66:	f8dc 5000 	ldr.w	r5, [ip]
  406e6a:	0c2d      	lsrs	r5, r5, #16
  406e6c:	d01d      	beq.n	406eaa <__multiply+0xea>
  406e6e:	f8d9 3000 	ldr.w	r3, [r9]
  406e72:	4648      	mov	r0, r9
  406e74:	461c      	mov	r4, r3
  406e76:	4659      	mov	r1, fp
  406e78:	2200      	movs	r2, #0
  406e7a:	880e      	ldrh	r6, [r1, #0]
  406e7c:	0c24      	lsrs	r4, r4, #16
  406e7e:	fb05 4406 	mla	r4, r5, r6, r4
  406e82:	4422      	add	r2, r4
  406e84:	b29b      	uxth	r3, r3
  406e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406e8a:	f840 3b04 	str.w	r3, [r0], #4
  406e8e:	f851 3b04 	ldr.w	r3, [r1], #4
  406e92:	6804      	ldr	r4, [r0, #0]
  406e94:	0c1b      	lsrs	r3, r3, #16
  406e96:	b2a6      	uxth	r6, r4
  406e98:	fb05 6303 	mla	r3, r5, r3, r6
  406e9c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406ea0:	458e      	cmp	lr, r1
  406ea2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406ea6:	d8e8      	bhi.n	406e7a <__multiply+0xba>
  406ea8:	6003      	str	r3, [r0, #0]
  406eaa:	f10c 0c04 	add.w	ip, ip, #4
  406eae:	45e2      	cmp	sl, ip
  406eb0:	f109 0904 	add.w	r9, r9, #4
  406eb4:	d8b7      	bhi.n	406e26 <__multiply+0x66>
  406eb6:	f8dd a004 	ldr.w	sl, [sp, #4]
  406eba:	f1b8 0f00 	cmp.w	r8, #0
  406ebe:	dd0b      	ble.n	406ed8 <__multiply+0x118>
  406ec0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406ec4:	f1aa 0a04 	sub.w	sl, sl, #4
  406ec8:	b11b      	cbz	r3, 406ed2 <__multiply+0x112>
  406eca:	e005      	b.n	406ed8 <__multiply+0x118>
  406ecc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406ed0:	b913      	cbnz	r3, 406ed8 <__multiply+0x118>
  406ed2:	f1b8 0801 	subs.w	r8, r8, #1
  406ed6:	d1f9      	bne.n	406ecc <__multiply+0x10c>
  406ed8:	9800      	ldr	r0, [sp, #0]
  406eda:	f8c0 8010 	str.w	r8, [r0, #16]
  406ede:	b003      	add	sp, #12
  406ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406ee4 <__pow5mult>:
  406ee4:	f012 0303 	ands.w	r3, r2, #3
  406ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406eec:	4614      	mov	r4, r2
  406eee:	4607      	mov	r7, r0
  406ef0:	d12e      	bne.n	406f50 <__pow5mult+0x6c>
  406ef2:	460d      	mov	r5, r1
  406ef4:	10a4      	asrs	r4, r4, #2
  406ef6:	d01c      	beq.n	406f32 <__pow5mult+0x4e>
  406ef8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406efa:	b396      	cbz	r6, 406f62 <__pow5mult+0x7e>
  406efc:	07e3      	lsls	r3, r4, #31
  406efe:	f04f 0800 	mov.w	r8, #0
  406f02:	d406      	bmi.n	406f12 <__pow5mult+0x2e>
  406f04:	1064      	asrs	r4, r4, #1
  406f06:	d014      	beq.n	406f32 <__pow5mult+0x4e>
  406f08:	6830      	ldr	r0, [r6, #0]
  406f0a:	b1a8      	cbz	r0, 406f38 <__pow5mult+0x54>
  406f0c:	4606      	mov	r6, r0
  406f0e:	07e3      	lsls	r3, r4, #31
  406f10:	d5f8      	bpl.n	406f04 <__pow5mult+0x20>
  406f12:	4632      	mov	r2, r6
  406f14:	4629      	mov	r1, r5
  406f16:	4638      	mov	r0, r7
  406f18:	f7ff ff52 	bl	406dc0 <__multiply>
  406f1c:	b1b5      	cbz	r5, 406f4c <__pow5mult+0x68>
  406f1e:	686a      	ldr	r2, [r5, #4]
  406f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406f22:	1064      	asrs	r4, r4, #1
  406f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406f28:	6029      	str	r1, [r5, #0]
  406f2a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406f2e:	4605      	mov	r5, r0
  406f30:	d1ea      	bne.n	406f08 <__pow5mult+0x24>
  406f32:	4628      	mov	r0, r5
  406f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f38:	4632      	mov	r2, r6
  406f3a:	4631      	mov	r1, r6
  406f3c:	4638      	mov	r0, r7
  406f3e:	f7ff ff3f 	bl	406dc0 <__multiply>
  406f42:	6030      	str	r0, [r6, #0]
  406f44:	f8c0 8000 	str.w	r8, [r0]
  406f48:	4606      	mov	r6, r0
  406f4a:	e7e0      	b.n	406f0e <__pow5mult+0x2a>
  406f4c:	4605      	mov	r5, r0
  406f4e:	e7d9      	b.n	406f04 <__pow5mult+0x20>
  406f50:	1e5a      	subs	r2, r3, #1
  406f52:	4d0b      	ldr	r5, [pc, #44]	; (406f80 <__pow5mult+0x9c>)
  406f54:	2300      	movs	r3, #0
  406f56:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406f5a:	f7ff fe97 	bl	406c8c <__multadd>
  406f5e:	4605      	mov	r5, r0
  406f60:	e7c8      	b.n	406ef4 <__pow5mult+0x10>
  406f62:	2101      	movs	r1, #1
  406f64:	4638      	mov	r0, r7
  406f66:	f7ff fe61 	bl	406c2c <_Balloc>
  406f6a:	f240 2171 	movw	r1, #625	; 0x271
  406f6e:	2201      	movs	r2, #1
  406f70:	2300      	movs	r3, #0
  406f72:	6141      	str	r1, [r0, #20]
  406f74:	6102      	str	r2, [r0, #16]
  406f76:	4606      	mov	r6, r0
  406f78:	64b8      	str	r0, [r7, #72]	; 0x48
  406f7a:	6003      	str	r3, [r0, #0]
  406f7c:	e7be      	b.n	406efc <__pow5mult+0x18>
  406f7e:	bf00      	nop
  406f80:	004089a8 	.word	0x004089a8

00406f84 <__lshift>:
  406f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406f88:	4691      	mov	r9, r2
  406f8a:	690a      	ldr	r2, [r1, #16]
  406f8c:	688b      	ldr	r3, [r1, #8]
  406f8e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406f92:	eb04 0802 	add.w	r8, r4, r2
  406f96:	f108 0501 	add.w	r5, r8, #1
  406f9a:	429d      	cmp	r5, r3
  406f9c:	460e      	mov	r6, r1
  406f9e:	4607      	mov	r7, r0
  406fa0:	6849      	ldr	r1, [r1, #4]
  406fa2:	dd04      	ble.n	406fae <__lshift+0x2a>
  406fa4:	005b      	lsls	r3, r3, #1
  406fa6:	429d      	cmp	r5, r3
  406fa8:	f101 0101 	add.w	r1, r1, #1
  406fac:	dcfa      	bgt.n	406fa4 <__lshift+0x20>
  406fae:	4638      	mov	r0, r7
  406fb0:	f7ff fe3c 	bl	406c2c <_Balloc>
  406fb4:	2c00      	cmp	r4, #0
  406fb6:	f100 0314 	add.w	r3, r0, #20
  406fba:	dd06      	ble.n	406fca <__lshift+0x46>
  406fbc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406fc0:	2100      	movs	r1, #0
  406fc2:	f843 1b04 	str.w	r1, [r3], #4
  406fc6:	429a      	cmp	r2, r3
  406fc8:	d1fb      	bne.n	406fc2 <__lshift+0x3e>
  406fca:	6934      	ldr	r4, [r6, #16]
  406fcc:	f106 0114 	add.w	r1, r6, #20
  406fd0:	f019 091f 	ands.w	r9, r9, #31
  406fd4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406fd8:	d01d      	beq.n	407016 <__lshift+0x92>
  406fda:	f1c9 0c20 	rsb	ip, r9, #32
  406fde:	2200      	movs	r2, #0
  406fe0:	680c      	ldr	r4, [r1, #0]
  406fe2:	fa04 f409 	lsl.w	r4, r4, r9
  406fe6:	4314      	orrs	r4, r2
  406fe8:	f843 4b04 	str.w	r4, [r3], #4
  406fec:	f851 2b04 	ldr.w	r2, [r1], #4
  406ff0:	458e      	cmp	lr, r1
  406ff2:	fa22 f20c 	lsr.w	r2, r2, ip
  406ff6:	d8f3      	bhi.n	406fe0 <__lshift+0x5c>
  406ff8:	601a      	str	r2, [r3, #0]
  406ffa:	b10a      	cbz	r2, 407000 <__lshift+0x7c>
  406ffc:	f108 0502 	add.w	r5, r8, #2
  407000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407002:	6872      	ldr	r2, [r6, #4]
  407004:	3d01      	subs	r5, #1
  407006:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40700a:	6105      	str	r5, [r0, #16]
  40700c:	6031      	str	r1, [r6, #0]
  40700e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407016:	3b04      	subs	r3, #4
  407018:	f851 2b04 	ldr.w	r2, [r1], #4
  40701c:	f843 2f04 	str.w	r2, [r3, #4]!
  407020:	458e      	cmp	lr, r1
  407022:	d8f9      	bhi.n	407018 <__lshift+0x94>
  407024:	e7ec      	b.n	407000 <__lshift+0x7c>
  407026:	bf00      	nop

00407028 <__mcmp>:
  407028:	b430      	push	{r4, r5}
  40702a:	690b      	ldr	r3, [r1, #16]
  40702c:	4605      	mov	r5, r0
  40702e:	6900      	ldr	r0, [r0, #16]
  407030:	1ac0      	subs	r0, r0, r3
  407032:	d10f      	bne.n	407054 <__mcmp+0x2c>
  407034:	009b      	lsls	r3, r3, #2
  407036:	3514      	adds	r5, #20
  407038:	3114      	adds	r1, #20
  40703a:	4419      	add	r1, r3
  40703c:	442b      	add	r3, r5
  40703e:	e001      	b.n	407044 <__mcmp+0x1c>
  407040:	429d      	cmp	r5, r3
  407042:	d207      	bcs.n	407054 <__mcmp+0x2c>
  407044:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407048:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40704c:	4294      	cmp	r4, r2
  40704e:	d0f7      	beq.n	407040 <__mcmp+0x18>
  407050:	d302      	bcc.n	407058 <__mcmp+0x30>
  407052:	2001      	movs	r0, #1
  407054:	bc30      	pop	{r4, r5}
  407056:	4770      	bx	lr
  407058:	f04f 30ff 	mov.w	r0, #4294967295
  40705c:	e7fa      	b.n	407054 <__mcmp+0x2c>
  40705e:	bf00      	nop

00407060 <__mdiff>:
  407060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407064:	690f      	ldr	r7, [r1, #16]
  407066:	460e      	mov	r6, r1
  407068:	6911      	ldr	r1, [r2, #16]
  40706a:	1a7f      	subs	r7, r7, r1
  40706c:	2f00      	cmp	r7, #0
  40706e:	4690      	mov	r8, r2
  407070:	d117      	bne.n	4070a2 <__mdiff+0x42>
  407072:	0089      	lsls	r1, r1, #2
  407074:	f106 0514 	add.w	r5, r6, #20
  407078:	f102 0e14 	add.w	lr, r2, #20
  40707c:	186b      	adds	r3, r5, r1
  40707e:	4471      	add	r1, lr
  407080:	e001      	b.n	407086 <__mdiff+0x26>
  407082:	429d      	cmp	r5, r3
  407084:	d25c      	bcs.n	407140 <__mdiff+0xe0>
  407086:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40708a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40708e:	42a2      	cmp	r2, r4
  407090:	d0f7      	beq.n	407082 <__mdiff+0x22>
  407092:	d25e      	bcs.n	407152 <__mdiff+0xf2>
  407094:	4633      	mov	r3, r6
  407096:	462c      	mov	r4, r5
  407098:	4646      	mov	r6, r8
  40709a:	4675      	mov	r5, lr
  40709c:	4698      	mov	r8, r3
  40709e:	2701      	movs	r7, #1
  4070a0:	e005      	b.n	4070ae <__mdiff+0x4e>
  4070a2:	db58      	blt.n	407156 <__mdiff+0xf6>
  4070a4:	f106 0514 	add.w	r5, r6, #20
  4070a8:	f108 0414 	add.w	r4, r8, #20
  4070ac:	2700      	movs	r7, #0
  4070ae:	6871      	ldr	r1, [r6, #4]
  4070b0:	f7ff fdbc 	bl	406c2c <_Balloc>
  4070b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4070b8:	6936      	ldr	r6, [r6, #16]
  4070ba:	60c7      	str	r7, [r0, #12]
  4070bc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4070c0:	46a6      	mov	lr, r4
  4070c2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4070c6:	f100 0414 	add.w	r4, r0, #20
  4070ca:	2300      	movs	r3, #0
  4070cc:	f85e 1b04 	ldr.w	r1, [lr], #4
  4070d0:	f855 8b04 	ldr.w	r8, [r5], #4
  4070d4:	b28a      	uxth	r2, r1
  4070d6:	fa13 f388 	uxtah	r3, r3, r8
  4070da:	0c09      	lsrs	r1, r1, #16
  4070dc:	1a9a      	subs	r2, r3, r2
  4070de:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4070e2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4070e6:	b292      	uxth	r2, r2
  4070e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4070ec:	45f4      	cmp	ip, lr
  4070ee:	f844 2b04 	str.w	r2, [r4], #4
  4070f2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4070f6:	d8e9      	bhi.n	4070cc <__mdiff+0x6c>
  4070f8:	42af      	cmp	r7, r5
  4070fa:	d917      	bls.n	40712c <__mdiff+0xcc>
  4070fc:	46a4      	mov	ip, r4
  4070fe:	46ae      	mov	lr, r5
  407100:	f85e 2b04 	ldr.w	r2, [lr], #4
  407104:	fa13 f382 	uxtah	r3, r3, r2
  407108:	1419      	asrs	r1, r3, #16
  40710a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40710e:	b29b      	uxth	r3, r3
  407110:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407114:	4577      	cmp	r7, lr
  407116:	f84c 2b04 	str.w	r2, [ip], #4
  40711a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40711e:	d8ef      	bhi.n	407100 <__mdiff+0xa0>
  407120:	43ed      	mvns	r5, r5
  407122:	442f      	add	r7, r5
  407124:	f027 0703 	bic.w	r7, r7, #3
  407128:	3704      	adds	r7, #4
  40712a:	443c      	add	r4, r7
  40712c:	3c04      	subs	r4, #4
  40712e:	b922      	cbnz	r2, 40713a <__mdiff+0xda>
  407130:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407134:	3e01      	subs	r6, #1
  407136:	2b00      	cmp	r3, #0
  407138:	d0fa      	beq.n	407130 <__mdiff+0xd0>
  40713a:	6106      	str	r6, [r0, #16]
  40713c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407140:	2100      	movs	r1, #0
  407142:	f7ff fd73 	bl	406c2c <_Balloc>
  407146:	2201      	movs	r2, #1
  407148:	2300      	movs	r3, #0
  40714a:	6102      	str	r2, [r0, #16]
  40714c:	6143      	str	r3, [r0, #20]
  40714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407152:	4674      	mov	r4, lr
  407154:	e7ab      	b.n	4070ae <__mdiff+0x4e>
  407156:	4633      	mov	r3, r6
  407158:	f106 0414 	add.w	r4, r6, #20
  40715c:	f102 0514 	add.w	r5, r2, #20
  407160:	4616      	mov	r6, r2
  407162:	2701      	movs	r7, #1
  407164:	4698      	mov	r8, r3
  407166:	e7a2      	b.n	4070ae <__mdiff+0x4e>

00407168 <__d2b>:
  407168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40716c:	b082      	sub	sp, #8
  40716e:	2101      	movs	r1, #1
  407170:	461c      	mov	r4, r3
  407172:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407176:	4615      	mov	r5, r2
  407178:	9e08      	ldr	r6, [sp, #32]
  40717a:	f7ff fd57 	bl	406c2c <_Balloc>
  40717e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407182:	4680      	mov	r8, r0
  407184:	b10f      	cbz	r7, 40718a <__d2b+0x22>
  407186:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40718a:	9401      	str	r4, [sp, #4]
  40718c:	b31d      	cbz	r5, 4071d6 <__d2b+0x6e>
  40718e:	a802      	add	r0, sp, #8
  407190:	f840 5d08 	str.w	r5, [r0, #-8]!
  407194:	f7ff fdda 	bl	406d4c <__lo0bits>
  407198:	2800      	cmp	r0, #0
  40719a:	d134      	bne.n	407206 <__d2b+0x9e>
  40719c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4071a0:	f8c8 2014 	str.w	r2, [r8, #20]
  4071a4:	2b00      	cmp	r3, #0
  4071a6:	bf0c      	ite	eq
  4071a8:	2101      	moveq	r1, #1
  4071aa:	2102      	movne	r1, #2
  4071ac:	f8c8 3018 	str.w	r3, [r8, #24]
  4071b0:	f8c8 1010 	str.w	r1, [r8, #16]
  4071b4:	b9df      	cbnz	r7, 4071ee <__d2b+0x86>
  4071b6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4071ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4071be:	6030      	str	r0, [r6, #0]
  4071c0:	6918      	ldr	r0, [r3, #16]
  4071c2:	f7ff fda3 	bl	406d0c <__hi0bits>
  4071c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4071cc:	6018      	str	r0, [r3, #0]
  4071ce:	4640      	mov	r0, r8
  4071d0:	b002      	add	sp, #8
  4071d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4071d6:	a801      	add	r0, sp, #4
  4071d8:	f7ff fdb8 	bl	406d4c <__lo0bits>
  4071dc:	9b01      	ldr	r3, [sp, #4]
  4071de:	f8c8 3014 	str.w	r3, [r8, #20]
  4071e2:	2101      	movs	r1, #1
  4071e4:	3020      	adds	r0, #32
  4071e6:	f8c8 1010 	str.w	r1, [r8, #16]
  4071ea:	2f00      	cmp	r7, #0
  4071ec:	d0e3      	beq.n	4071b6 <__d2b+0x4e>
  4071ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071f0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4071f4:	4407      	add	r7, r0
  4071f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4071fa:	6037      	str	r7, [r6, #0]
  4071fc:	6018      	str	r0, [r3, #0]
  4071fe:	4640      	mov	r0, r8
  407200:	b002      	add	sp, #8
  407202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407206:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40720a:	f1c0 0220 	rsb	r2, r0, #32
  40720e:	fa03 f202 	lsl.w	r2, r3, r2
  407212:	430a      	orrs	r2, r1
  407214:	40c3      	lsrs	r3, r0
  407216:	9301      	str	r3, [sp, #4]
  407218:	f8c8 2014 	str.w	r2, [r8, #20]
  40721c:	e7c2      	b.n	4071a4 <__d2b+0x3c>
  40721e:	bf00      	nop

00407220 <_sbrk_r>:
  407220:	b538      	push	{r3, r4, r5, lr}
  407222:	4c07      	ldr	r4, [pc, #28]	; (407240 <_sbrk_r+0x20>)
  407224:	2300      	movs	r3, #0
  407226:	4605      	mov	r5, r0
  407228:	4608      	mov	r0, r1
  40722a:	6023      	str	r3, [r4, #0]
  40722c:	f7fb fdd2 	bl	402dd4 <_sbrk>
  407230:	1c43      	adds	r3, r0, #1
  407232:	d000      	beq.n	407236 <_sbrk_r+0x16>
  407234:	bd38      	pop	{r3, r4, r5, pc}
  407236:	6823      	ldr	r3, [r4, #0]
  407238:	2b00      	cmp	r3, #0
  40723a:	d0fb      	beq.n	407234 <_sbrk_r+0x14>
  40723c:	602b      	str	r3, [r5, #0]
  40723e:	bd38      	pop	{r3, r4, r5, pc}
  407240:	20400ce4 	.word	0x20400ce4
	...

00407280 <strlen>:
  407280:	f890 f000 	pld	[r0]
  407284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407288:	f020 0107 	bic.w	r1, r0, #7
  40728c:	f06f 0c00 	mvn.w	ip, #0
  407290:	f010 0407 	ands.w	r4, r0, #7
  407294:	f891 f020 	pld	[r1, #32]
  407298:	f040 8049 	bne.w	40732e <strlen+0xae>
  40729c:	f04f 0400 	mov.w	r4, #0
  4072a0:	f06f 0007 	mvn.w	r0, #7
  4072a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4072a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4072ac:	f100 0008 	add.w	r0, r0, #8
  4072b0:	fa82 f24c 	uadd8	r2, r2, ip
  4072b4:	faa4 f28c 	sel	r2, r4, ip
  4072b8:	fa83 f34c 	uadd8	r3, r3, ip
  4072bc:	faa2 f38c 	sel	r3, r2, ip
  4072c0:	bb4b      	cbnz	r3, 407316 <strlen+0x96>
  4072c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4072c6:	fa82 f24c 	uadd8	r2, r2, ip
  4072ca:	f100 0008 	add.w	r0, r0, #8
  4072ce:	faa4 f28c 	sel	r2, r4, ip
  4072d2:	fa83 f34c 	uadd8	r3, r3, ip
  4072d6:	faa2 f38c 	sel	r3, r2, ip
  4072da:	b9e3      	cbnz	r3, 407316 <strlen+0x96>
  4072dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4072e0:	fa82 f24c 	uadd8	r2, r2, ip
  4072e4:	f100 0008 	add.w	r0, r0, #8
  4072e8:	faa4 f28c 	sel	r2, r4, ip
  4072ec:	fa83 f34c 	uadd8	r3, r3, ip
  4072f0:	faa2 f38c 	sel	r3, r2, ip
  4072f4:	b97b      	cbnz	r3, 407316 <strlen+0x96>
  4072f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4072fa:	f101 0120 	add.w	r1, r1, #32
  4072fe:	fa82 f24c 	uadd8	r2, r2, ip
  407302:	f100 0008 	add.w	r0, r0, #8
  407306:	faa4 f28c 	sel	r2, r4, ip
  40730a:	fa83 f34c 	uadd8	r3, r3, ip
  40730e:	faa2 f38c 	sel	r3, r2, ip
  407312:	2b00      	cmp	r3, #0
  407314:	d0c6      	beq.n	4072a4 <strlen+0x24>
  407316:	2a00      	cmp	r2, #0
  407318:	bf04      	itt	eq
  40731a:	3004      	addeq	r0, #4
  40731c:	461a      	moveq	r2, r3
  40731e:	ba12      	rev	r2, r2
  407320:	fab2 f282 	clz	r2, r2
  407324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40732c:	4770      	bx	lr
  40732e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407332:	f004 0503 	and.w	r5, r4, #3
  407336:	f1c4 0000 	rsb	r0, r4, #0
  40733a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40733e:	f014 0f04 	tst.w	r4, #4
  407342:	f891 f040 	pld	[r1, #64]	; 0x40
  407346:	fa0c f505 	lsl.w	r5, ip, r5
  40734a:	ea62 0205 	orn	r2, r2, r5
  40734e:	bf1c      	itt	ne
  407350:	ea63 0305 	ornne	r3, r3, r5
  407354:	4662      	movne	r2, ip
  407356:	f04f 0400 	mov.w	r4, #0
  40735a:	e7a9      	b.n	4072b0 <strlen+0x30>

0040735c <__ssprint_r>:
  40735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407360:	6893      	ldr	r3, [r2, #8]
  407362:	b083      	sub	sp, #12
  407364:	4690      	mov	r8, r2
  407366:	2b00      	cmp	r3, #0
  407368:	d070      	beq.n	40744c <__ssprint_r+0xf0>
  40736a:	4682      	mov	sl, r0
  40736c:	460c      	mov	r4, r1
  40736e:	6817      	ldr	r7, [r2, #0]
  407370:	688d      	ldr	r5, [r1, #8]
  407372:	6808      	ldr	r0, [r1, #0]
  407374:	e042      	b.n	4073fc <__ssprint_r+0xa0>
  407376:	89a3      	ldrh	r3, [r4, #12]
  407378:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40737c:	d02e      	beq.n	4073dc <__ssprint_r+0x80>
  40737e:	6965      	ldr	r5, [r4, #20]
  407380:	6921      	ldr	r1, [r4, #16]
  407382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407386:	eba0 0b01 	sub.w	fp, r0, r1
  40738a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40738e:	f10b 0001 	add.w	r0, fp, #1
  407392:	106d      	asrs	r5, r5, #1
  407394:	4430      	add	r0, r6
  407396:	42a8      	cmp	r0, r5
  407398:	462a      	mov	r2, r5
  40739a:	bf84      	itt	hi
  40739c:	4605      	movhi	r5, r0
  40739e:	462a      	movhi	r2, r5
  4073a0:	055b      	lsls	r3, r3, #21
  4073a2:	d538      	bpl.n	407416 <__ssprint_r+0xba>
  4073a4:	4611      	mov	r1, r2
  4073a6:	4650      	mov	r0, sl
  4073a8:	f7ff f898 	bl	4064dc <_malloc_r>
  4073ac:	2800      	cmp	r0, #0
  4073ae:	d03c      	beq.n	40742a <__ssprint_r+0xce>
  4073b0:	465a      	mov	r2, fp
  4073b2:	6921      	ldr	r1, [r4, #16]
  4073b4:	9001      	str	r0, [sp, #4]
  4073b6:	f7ff fb93 	bl	406ae0 <memcpy>
  4073ba:	89a2      	ldrh	r2, [r4, #12]
  4073bc:	9b01      	ldr	r3, [sp, #4]
  4073be:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4073c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4073c6:	81a2      	strh	r2, [r4, #12]
  4073c8:	eba5 020b 	sub.w	r2, r5, fp
  4073cc:	eb03 000b 	add.w	r0, r3, fp
  4073d0:	6165      	str	r5, [r4, #20]
  4073d2:	6123      	str	r3, [r4, #16]
  4073d4:	6020      	str	r0, [r4, #0]
  4073d6:	60a2      	str	r2, [r4, #8]
  4073d8:	4635      	mov	r5, r6
  4073da:	46b3      	mov	fp, r6
  4073dc:	465a      	mov	r2, fp
  4073de:	4649      	mov	r1, r9
  4073e0:	f000 fa18 	bl	407814 <memmove>
  4073e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4073e8:	68a2      	ldr	r2, [r4, #8]
  4073ea:	6820      	ldr	r0, [r4, #0]
  4073ec:	1b55      	subs	r5, r2, r5
  4073ee:	4458      	add	r0, fp
  4073f0:	1b9e      	subs	r6, r3, r6
  4073f2:	60a5      	str	r5, [r4, #8]
  4073f4:	6020      	str	r0, [r4, #0]
  4073f6:	f8c8 6008 	str.w	r6, [r8, #8]
  4073fa:	b33e      	cbz	r6, 40744c <__ssprint_r+0xf0>
  4073fc:	687e      	ldr	r6, [r7, #4]
  4073fe:	463b      	mov	r3, r7
  407400:	3708      	adds	r7, #8
  407402:	2e00      	cmp	r6, #0
  407404:	d0fa      	beq.n	4073fc <__ssprint_r+0xa0>
  407406:	42ae      	cmp	r6, r5
  407408:	f8d3 9000 	ldr.w	r9, [r3]
  40740c:	46ab      	mov	fp, r5
  40740e:	d2b2      	bcs.n	407376 <__ssprint_r+0x1a>
  407410:	4635      	mov	r5, r6
  407412:	46b3      	mov	fp, r6
  407414:	e7e2      	b.n	4073dc <__ssprint_r+0x80>
  407416:	4650      	mov	r0, sl
  407418:	f000 fa60 	bl	4078dc <_realloc_r>
  40741c:	4603      	mov	r3, r0
  40741e:	2800      	cmp	r0, #0
  407420:	d1d2      	bne.n	4073c8 <__ssprint_r+0x6c>
  407422:	6921      	ldr	r1, [r4, #16]
  407424:	4650      	mov	r0, sl
  407426:	f000 f8f9 	bl	40761c <_free_r>
  40742a:	230c      	movs	r3, #12
  40742c:	f8ca 3000 	str.w	r3, [sl]
  407430:	89a3      	ldrh	r3, [r4, #12]
  407432:	2200      	movs	r2, #0
  407434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407438:	f04f 30ff 	mov.w	r0, #4294967295
  40743c:	81a3      	strh	r3, [r4, #12]
  40743e:	f8c8 2008 	str.w	r2, [r8, #8]
  407442:	f8c8 2004 	str.w	r2, [r8, #4]
  407446:	b003      	add	sp, #12
  407448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40744c:	2000      	movs	r0, #0
  40744e:	f8c8 0004 	str.w	r0, [r8, #4]
  407452:	b003      	add	sp, #12
  407454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407458 <__register_exitproc>:
  407458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40745c:	4d2c      	ldr	r5, [pc, #176]	; (407510 <__register_exitproc+0xb8>)
  40745e:	4606      	mov	r6, r0
  407460:	6828      	ldr	r0, [r5, #0]
  407462:	4698      	mov	r8, r3
  407464:	460f      	mov	r7, r1
  407466:	4691      	mov	r9, r2
  407468:	f7ff f834 	bl	4064d4 <__retarget_lock_acquire_recursive>
  40746c:	4b29      	ldr	r3, [pc, #164]	; (407514 <__register_exitproc+0xbc>)
  40746e:	681c      	ldr	r4, [r3, #0]
  407470:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407474:	2b00      	cmp	r3, #0
  407476:	d03e      	beq.n	4074f6 <__register_exitproc+0x9e>
  407478:	685a      	ldr	r2, [r3, #4]
  40747a:	2a1f      	cmp	r2, #31
  40747c:	dc1c      	bgt.n	4074b8 <__register_exitproc+0x60>
  40747e:	f102 0e01 	add.w	lr, r2, #1
  407482:	b176      	cbz	r6, 4074a2 <__register_exitproc+0x4a>
  407484:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407488:	2401      	movs	r4, #1
  40748a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40748e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407492:	4094      	lsls	r4, r2
  407494:	4320      	orrs	r0, r4
  407496:	2e02      	cmp	r6, #2
  407498:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40749c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4074a0:	d023      	beq.n	4074ea <__register_exitproc+0x92>
  4074a2:	3202      	adds	r2, #2
  4074a4:	f8c3 e004 	str.w	lr, [r3, #4]
  4074a8:	6828      	ldr	r0, [r5, #0]
  4074aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4074ae:	f7ff f813 	bl	4064d8 <__retarget_lock_release_recursive>
  4074b2:	2000      	movs	r0, #0
  4074b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4074b8:	4b17      	ldr	r3, [pc, #92]	; (407518 <__register_exitproc+0xc0>)
  4074ba:	b30b      	cbz	r3, 407500 <__register_exitproc+0xa8>
  4074bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4074c0:	f3af 8000 	nop.w
  4074c4:	4603      	mov	r3, r0
  4074c6:	b1d8      	cbz	r0, 407500 <__register_exitproc+0xa8>
  4074c8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4074cc:	6002      	str	r2, [r0, #0]
  4074ce:	2100      	movs	r1, #0
  4074d0:	6041      	str	r1, [r0, #4]
  4074d2:	460a      	mov	r2, r1
  4074d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4074d8:	f04f 0e01 	mov.w	lr, #1
  4074dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4074e0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4074e4:	2e00      	cmp	r6, #0
  4074e6:	d0dc      	beq.n	4074a2 <__register_exitproc+0x4a>
  4074e8:	e7cc      	b.n	407484 <__register_exitproc+0x2c>
  4074ea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4074ee:	430c      	orrs	r4, r1
  4074f0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4074f4:	e7d5      	b.n	4074a2 <__register_exitproc+0x4a>
  4074f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4074fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4074fe:	e7bb      	b.n	407478 <__register_exitproc+0x20>
  407500:	6828      	ldr	r0, [r5, #0]
  407502:	f7fe ffe9 	bl	4064d8 <__retarget_lock_release_recursive>
  407506:	f04f 30ff 	mov.w	r0, #4294967295
  40750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40750e:	bf00      	nop
  407510:	20400460 	.word	0x20400460
  407514:	0040883c 	.word	0x0040883c
  407518:	00000000 	.word	0x00000000

0040751c <_calloc_r>:
  40751c:	b510      	push	{r4, lr}
  40751e:	fb02 f101 	mul.w	r1, r2, r1
  407522:	f7fe ffdb 	bl	4064dc <_malloc_r>
  407526:	4604      	mov	r4, r0
  407528:	b1d8      	cbz	r0, 407562 <_calloc_r+0x46>
  40752a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40752e:	f022 0203 	bic.w	r2, r2, #3
  407532:	3a04      	subs	r2, #4
  407534:	2a24      	cmp	r2, #36	; 0x24
  407536:	d818      	bhi.n	40756a <_calloc_r+0x4e>
  407538:	2a13      	cmp	r2, #19
  40753a:	d914      	bls.n	407566 <_calloc_r+0x4a>
  40753c:	2300      	movs	r3, #0
  40753e:	2a1b      	cmp	r2, #27
  407540:	6003      	str	r3, [r0, #0]
  407542:	6043      	str	r3, [r0, #4]
  407544:	d916      	bls.n	407574 <_calloc_r+0x58>
  407546:	2a24      	cmp	r2, #36	; 0x24
  407548:	6083      	str	r3, [r0, #8]
  40754a:	60c3      	str	r3, [r0, #12]
  40754c:	bf11      	iteee	ne
  40754e:	f100 0210 	addne.w	r2, r0, #16
  407552:	6103      	streq	r3, [r0, #16]
  407554:	6143      	streq	r3, [r0, #20]
  407556:	f100 0218 	addeq.w	r2, r0, #24
  40755a:	2300      	movs	r3, #0
  40755c:	6013      	str	r3, [r2, #0]
  40755e:	6053      	str	r3, [r2, #4]
  407560:	6093      	str	r3, [r2, #8]
  407562:	4620      	mov	r0, r4
  407564:	bd10      	pop	{r4, pc}
  407566:	4602      	mov	r2, r0
  407568:	e7f7      	b.n	40755a <_calloc_r+0x3e>
  40756a:	2100      	movs	r1, #0
  40756c:	f7fc fd18 	bl	403fa0 <memset>
  407570:	4620      	mov	r0, r4
  407572:	bd10      	pop	{r4, pc}
  407574:	f100 0208 	add.w	r2, r0, #8
  407578:	e7ef      	b.n	40755a <_calloc_r+0x3e>
  40757a:	bf00      	nop

0040757c <_malloc_trim_r>:
  40757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40757e:	4f24      	ldr	r7, [pc, #144]	; (407610 <_malloc_trim_r+0x94>)
  407580:	460c      	mov	r4, r1
  407582:	4606      	mov	r6, r0
  407584:	f7ff fb46 	bl	406c14 <__malloc_lock>
  407588:	68bb      	ldr	r3, [r7, #8]
  40758a:	685d      	ldr	r5, [r3, #4]
  40758c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407590:	310f      	adds	r1, #15
  407592:	f025 0503 	bic.w	r5, r5, #3
  407596:	4429      	add	r1, r5
  407598:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40759c:	f021 010f 	bic.w	r1, r1, #15
  4075a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4075a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4075a8:	db07      	blt.n	4075ba <_malloc_trim_r+0x3e>
  4075aa:	2100      	movs	r1, #0
  4075ac:	4630      	mov	r0, r6
  4075ae:	f7ff fe37 	bl	407220 <_sbrk_r>
  4075b2:	68bb      	ldr	r3, [r7, #8]
  4075b4:	442b      	add	r3, r5
  4075b6:	4298      	cmp	r0, r3
  4075b8:	d004      	beq.n	4075c4 <_malloc_trim_r+0x48>
  4075ba:	4630      	mov	r0, r6
  4075bc:	f7ff fb30 	bl	406c20 <__malloc_unlock>
  4075c0:	2000      	movs	r0, #0
  4075c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4075c4:	4261      	negs	r1, r4
  4075c6:	4630      	mov	r0, r6
  4075c8:	f7ff fe2a 	bl	407220 <_sbrk_r>
  4075cc:	3001      	adds	r0, #1
  4075ce:	d00d      	beq.n	4075ec <_malloc_trim_r+0x70>
  4075d0:	4b10      	ldr	r3, [pc, #64]	; (407614 <_malloc_trim_r+0x98>)
  4075d2:	68ba      	ldr	r2, [r7, #8]
  4075d4:	6819      	ldr	r1, [r3, #0]
  4075d6:	1b2d      	subs	r5, r5, r4
  4075d8:	f045 0501 	orr.w	r5, r5, #1
  4075dc:	4630      	mov	r0, r6
  4075de:	1b09      	subs	r1, r1, r4
  4075e0:	6055      	str	r5, [r2, #4]
  4075e2:	6019      	str	r1, [r3, #0]
  4075e4:	f7ff fb1c 	bl	406c20 <__malloc_unlock>
  4075e8:	2001      	movs	r0, #1
  4075ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4075ec:	2100      	movs	r1, #0
  4075ee:	4630      	mov	r0, r6
  4075f0:	f7ff fe16 	bl	407220 <_sbrk_r>
  4075f4:	68ba      	ldr	r2, [r7, #8]
  4075f6:	1a83      	subs	r3, r0, r2
  4075f8:	2b0f      	cmp	r3, #15
  4075fa:	ddde      	ble.n	4075ba <_malloc_trim_r+0x3e>
  4075fc:	4c06      	ldr	r4, [pc, #24]	; (407618 <_malloc_trim_r+0x9c>)
  4075fe:	4905      	ldr	r1, [pc, #20]	; (407614 <_malloc_trim_r+0x98>)
  407600:	6824      	ldr	r4, [r4, #0]
  407602:	f043 0301 	orr.w	r3, r3, #1
  407606:	1b00      	subs	r0, r0, r4
  407608:	6053      	str	r3, [r2, #4]
  40760a:	6008      	str	r0, [r1, #0]
  40760c:	e7d5      	b.n	4075ba <_malloc_trim_r+0x3e>
  40760e:	bf00      	nop
  407610:	20400464 	.word	0x20400464
  407614:	20400c8c 	.word	0x20400c8c
  407618:	2040086c 	.word	0x2040086c

0040761c <_free_r>:
  40761c:	2900      	cmp	r1, #0
  40761e:	d044      	beq.n	4076aa <_free_r+0x8e>
  407620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407624:	460d      	mov	r5, r1
  407626:	4680      	mov	r8, r0
  407628:	f7ff faf4 	bl	406c14 <__malloc_lock>
  40762c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407630:	4969      	ldr	r1, [pc, #420]	; (4077d8 <_free_r+0x1bc>)
  407632:	f027 0301 	bic.w	r3, r7, #1
  407636:	f1a5 0408 	sub.w	r4, r5, #8
  40763a:	18e2      	adds	r2, r4, r3
  40763c:	688e      	ldr	r6, [r1, #8]
  40763e:	6850      	ldr	r0, [r2, #4]
  407640:	42b2      	cmp	r2, r6
  407642:	f020 0003 	bic.w	r0, r0, #3
  407646:	d05e      	beq.n	407706 <_free_r+0xea>
  407648:	07fe      	lsls	r6, r7, #31
  40764a:	6050      	str	r0, [r2, #4]
  40764c:	d40b      	bmi.n	407666 <_free_r+0x4a>
  40764e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407652:	1be4      	subs	r4, r4, r7
  407654:	f101 0e08 	add.w	lr, r1, #8
  407658:	68a5      	ldr	r5, [r4, #8]
  40765a:	4575      	cmp	r5, lr
  40765c:	443b      	add	r3, r7
  40765e:	d06d      	beq.n	40773c <_free_r+0x120>
  407660:	68e7      	ldr	r7, [r4, #12]
  407662:	60ef      	str	r7, [r5, #12]
  407664:	60bd      	str	r5, [r7, #8]
  407666:	1815      	adds	r5, r2, r0
  407668:	686d      	ldr	r5, [r5, #4]
  40766a:	07ed      	lsls	r5, r5, #31
  40766c:	d53e      	bpl.n	4076ec <_free_r+0xd0>
  40766e:	f043 0201 	orr.w	r2, r3, #1
  407672:	6062      	str	r2, [r4, #4]
  407674:	50e3      	str	r3, [r4, r3]
  407676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40767a:	d217      	bcs.n	4076ac <_free_r+0x90>
  40767c:	08db      	lsrs	r3, r3, #3
  40767e:	1c58      	adds	r0, r3, #1
  407680:	109a      	asrs	r2, r3, #2
  407682:	684d      	ldr	r5, [r1, #4]
  407684:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407688:	60a7      	str	r7, [r4, #8]
  40768a:	2301      	movs	r3, #1
  40768c:	4093      	lsls	r3, r2
  40768e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407692:	432b      	orrs	r3, r5
  407694:	3a08      	subs	r2, #8
  407696:	60e2      	str	r2, [r4, #12]
  407698:	604b      	str	r3, [r1, #4]
  40769a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40769e:	60fc      	str	r4, [r7, #12]
  4076a0:	4640      	mov	r0, r8
  4076a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4076a6:	f7ff babb 	b.w	406c20 <__malloc_unlock>
  4076aa:	4770      	bx	lr
  4076ac:	0a5a      	lsrs	r2, r3, #9
  4076ae:	2a04      	cmp	r2, #4
  4076b0:	d852      	bhi.n	407758 <_free_r+0x13c>
  4076b2:	099a      	lsrs	r2, r3, #6
  4076b4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4076b8:	00ff      	lsls	r7, r7, #3
  4076ba:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4076be:	19c8      	adds	r0, r1, r7
  4076c0:	59ca      	ldr	r2, [r1, r7]
  4076c2:	3808      	subs	r0, #8
  4076c4:	4290      	cmp	r0, r2
  4076c6:	d04f      	beq.n	407768 <_free_r+0x14c>
  4076c8:	6851      	ldr	r1, [r2, #4]
  4076ca:	f021 0103 	bic.w	r1, r1, #3
  4076ce:	428b      	cmp	r3, r1
  4076d0:	d232      	bcs.n	407738 <_free_r+0x11c>
  4076d2:	6892      	ldr	r2, [r2, #8]
  4076d4:	4290      	cmp	r0, r2
  4076d6:	d1f7      	bne.n	4076c8 <_free_r+0xac>
  4076d8:	68c3      	ldr	r3, [r0, #12]
  4076da:	60a0      	str	r0, [r4, #8]
  4076dc:	60e3      	str	r3, [r4, #12]
  4076de:	609c      	str	r4, [r3, #8]
  4076e0:	60c4      	str	r4, [r0, #12]
  4076e2:	4640      	mov	r0, r8
  4076e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4076e8:	f7ff ba9a 	b.w	406c20 <__malloc_unlock>
  4076ec:	6895      	ldr	r5, [r2, #8]
  4076ee:	4f3b      	ldr	r7, [pc, #236]	; (4077dc <_free_r+0x1c0>)
  4076f0:	42bd      	cmp	r5, r7
  4076f2:	4403      	add	r3, r0
  4076f4:	d040      	beq.n	407778 <_free_r+0x15c>
  4076f6:	68d0      	ldr	r0, [r2, #12]
  4076f8:	60e8      	str	r0, [r5, #12]
  4076fa:	f043 0201 	orr.w	r2, r3, #1
  4076fe:	6085      	str	r5, [r0, #8]
  407700:	6062      	str	r2, [r4, #4]
  407702:	50e3      	str	r3, [r4, r3]
  407704:	e7b7      	b.n	407676 <_free_r+0x5a>
  407706:	07ff      	lsls	r7, r7, #31
  407708:	4403      	add	r3, r0
  40770a:	d407      	bmi.n	40771c <_free_r+0x100>
  40770c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407710:	1aa4      	subs	r4, r4, r2
  407712:	4413      	add	r3, r2
  407714:	68a0      	ldr	r0, [r4, #8]
  407716:	68e2      	ldr	r2, [r4, #12]
  407718:	60c2      	str	r2, [r0, #12]
  40771a:	6090      	str	r0, [r2, #8]
  40771c:	4a30      	ldr	r2, [pc, #192]	; (4077e0 <_free_r+0x1c4>)
  40771e:	6812      	ldr	r2, [r2, #0]
  407720:	f043 0001 	orr.w	r0, r3, #1
  407724:	4293      	cmp	r3, r2
  407726:	6060      	str	r0, [r4, #4]
  407728:	608c      	str	r4, [r1, #8]
  40772a:	d3b9      	bcc.n	4076a0 <_free_r+0x84>
  40772c:	4b2d      	ldr	r3, [pc, #180]	; (4077e4 <_free_r+0x1c8>)
  40772e:	4640      	mov	r0, r8
  407730:	6819      	ldr	r1, [r3, #0]
  407732:	f7ff ff23 	bl	40757c <_malloc_trim_r>
  407736:	e7b3      	b.n	4076a0 <_free_r+0x84>
  407738:	4610      	mov	r0, r2
  40773a:	e7cd      	b.n	4076d8 <_free_r+0xbc>
  40773c:	1811      	adds	r1, r2, r0
  40773e:	6849      	ldr	r1, [r1, #4]
  407740:	07c9      	lsls	r1, r1, #31
  407742:	d444      	bmi.n	4077ce <_free_r+0x1b2>
  407744:	6891      	ldr	r1, [r2, #8]
  407746:	68d2      	ldr	r2, [r2, #12]
  407748:	60ca      	str	r2, [r1, #12]
  40774a:	4403      	add	r3, r0
  40774c:	f043 0001 	orr.w	r0, r3, #1
  407750:	6091      	str	r1, [r2, #8]
  407752:	6060      	str	r0, [r4, #4]
  407754:	50e3      	str	r3, [r4, r3]
  407756:	e7a3      	b.n	4076a0 <_free_r+0x84>
  407758:	2a14      	cmp	r2, #20
  40775a:	d816      	bhi.n	40778a <_free_r+0x16e>
  40775c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407760:	00ff      	lsls	r7, r7, #3
  407762:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407766:	e7aa      	b.n	4076be <_free_r+0xa2>
  407768:	10aa      	asrs	r2, r5, #2
  40776a:	2301      	movs	r3, #1
  40776c:	684d      	ldr	r5, [r1, #4]
  40776e:	4093      	lsls	r3, r2
  407770:	432b      	orrs	r3, r5
  407772:	604b      	str	r3, [r1, #4]
  407774:	4603      	mov	r3, r0
  407776:	e7b0      	b.n	4076da <_free_r+0xbe>
  407778:	f043 0201 	orr.w	r2, r3, #1
  40777c:	614c      	str	r4, [r1, #20]
  40777e:	610c      	str	r4, [r1, #16]
  407780:	60e5      	str	r5, [r4, #12]
  407782:	60a5      	str	r5, [r4, #8]
  407784:	6062      	str	r2, [r4, #4]
  407786:	50e3      	str	r3, [r4, r3]
  407788:	e78a      	b.n	4076a0 <_free_r+0x84>
  40778a:	2a54      	cmp	r2, #84	; 0x54
  40778c:	d806      	bhi.n	40779c <_free_r+0x180>
  40778e:	0b1a      	lsrs	r2, r3, #12
  407790:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407794:	00ff      	lsls	r7, r7, #3
  407796:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40779a:	e790      	b.n	4076be <_free_r+0xa2>
  40779c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4077a0:	d806      	bhi.n	4077b0 <_free_r+0x194>
  4077a2:	0bda      	lsrs	r2, r3, #15
  4077a4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4077a8:	00ff      	lsls	r7, r7, #3
  4077aa:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4077ae:	e786      	b.n	4076be <_free_r+0xa2>
  4077b0:	f240 5054 	movw	r0, #1364	; 0x554
  4077b4:	4282      	cmp	r2, r0
  4077b6:	d806      	bhi.n	4077c6 <_free_r+0x1aa>
  4077b8:	0c9a      	lsrs	r2, r3, #18
  4077ba:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4077be:	00ff      	lsls	r7, r7, #3
  4077c0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4077c4:	e77b      	b.n	4076be <_free_r+0xa2>
  4077c6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4077ca:	257e      	movs	r5, #126	; 0x7e
  4077cc:	e777      	b.n	4076be <_free_r+0xa2>
  4077ce:	f043 0101 	orr.w	r1, r3, #1
  4077d2:	6061      	str	r1, [r4, #4]
  4077d4:	6013      	str	r3, [r2, #0]
  4077d6:	e763      	b.n	4076a0 <_free_r+0x84>
  4077d8:	20400464 	.word	0x20400464
  4077dc:	2040046c 	.word	0x2040046c
  4077e0:	20400870 	.word	0x20400870
  4077e4:	20400cbc 	.word	0x20400cbc

004077e8 <__ascii_mbtowc>:
  4077e8:	b082      	sub	sp, #8
  4077ea:	b149      	cbz	r1, 407800 <__ascii_mbtowc+0x18>
  4077ec:	b15a      	cbz	r2, 407806 <__ascii_mbtowc+0x1e>
  4077ee:	b16b      	cbz	r3, 40780c <__ascii_mbtowc+0x24>
  4077f0:	7813      	ldrb	r3, [r2, #0]
  4077f2:	600b      	str	r3, [r1, #0]
  4077f4:	7812      	ldrb	r2, [r2, #0]
  4077f6:	1c10      	adds	r0, r2, #0
  4077f8:	bf18      	it	ne
  4077fa:	2001      	movne	r0, #1
  4077fc:	b002      	add	sp, #8
  4077fe:	4770      	bx	lr
  407800:	a901      	add	r1, sp, #4
  407802:	2a00      	cmp	r2, #0
  407804:	d1f3      	bne.n	4077ee <__ascii_mbtowc+0x6>
  407806:	4610      	mov	r0, r2
  407808:	b002      	add	sp, #8
  40780a:	4770      	bx	lr
  40780c:	f06f 0001 	mvn.w	r0, #1
  407810:	e7f4      	b.n	4077fc <__ascii_mbtowc+0x14>
  407812:	bf00      	nop

00407814 <memmove>:
  407814:	4288      	cmp	r0, r1
  407816:	b5f0      	push	{r4, r5, r6, r7, lr}
  407818:	d90d      	bls.n	407836 <memmove+0x22>
  40781a:	188b      	adds	r3, r1, r2
  40781c:	4298      	cmp	r0, r3
  40781e:	d20a      	bcs.n	407836 <memmove+0x22>
  407820:	1884      	adds	r4, r0, r2
  407822:	2a00      	cmp	r2, #0
  407824:	d051      	beq.n	4078ca <memmove+0xb6>
  407826:	4622      	mov	r2, r4
  407828:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40782c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407830:	4299      	cmp	r1, r3
  407832:	d1f9      	bne.n	407828 <memmove+0x14>
  407834:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407836:	2a0f      	cmp	r2, #15
  407838:	d948      	bls.n	4078cc <memmove+0xb8>
  40783a:	ea41 0300 	orr.w	r3, r1, r0
  40783e:	079b      	lsls	r3, r3, #30
  407840:	d146      	bne.n	4078d0 <memmove+0xbc>
  407842:	f100 0410 	add.w	r4, r0, #16
  407846:	f101 0310 	add.w	r3, r1, #16
  40784a:	4615      	mov	r5, r2
  40784c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407850:	f844 6c10 	str.w	r6, [r4, #-16]
  407854:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407858:	f844 6c0c 	str.w	r6, [r4, #-12]
  40785c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407860:	f844 6c08 	str.w	r6, [r4, #-8]
  407864:	3d10      	subs	r5, #16
  407866:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40786a:	f844 6c04 	str.w	r6, [r4, #-4]
  40786e:	2d0f      	cmp	r5, #15
  407870:	f103 0310 	add.w	r3, r3, #16
  407874:	f104 0410 	add.w	r4, r4, #16
  407878:	d8e8      	bhi.n	40784c <memmove+0x38>
  40787a:	f1a2 0310 	sub.w	r3, r2, #16
  40787e:	f023 030f 	bic.w	r3, r3, #15
  407882:	f002 0e0f 	and.w	lr, r2, #15
  407886:	3310      	adds	r3, #16
  407888:	f1be 0f03 	cmp.w	lr, #3
  40788c:	4419      	add	r1, r3
  40788e:	4403      	add	r3, r0
  407890:	d921      	bls.n	4078d6 <memmove+0xc2>
  407892:	1f1e      	subs	r6, r3, #4
  407894:	460d      	mov	r5, r1
  407896:	4674      	mov	r4, lr
  407898:	3c04      	subs	r4, #4
  40789a:	f855 7b04 	ldr.w	r7, [r5], #4
  40789e:	f846 7f04 	str.w	r7, [r6, #4]!
  4078a2:	2c03      	cmp	r4, #3
  4078a4:	d8f8      	bhi.n	407898 <memmove+0x84>
  4078a6:	f1ae 0404 	sub.w	r4, lr, #4
  4078aa:	f024 0403 	bic.w	r4, r4, #3
  4078ae:	3404      	adds	r4, #4
  4078b0:	4421      	add	r1, r4
  4078b2:	4423      	add	r3, r4
  4078b4:	f002 0203 	and.w	r2, r2, #3
  4078b8:	b162      	cbz	r2, 4078d4 <memmove+0xc0>
  4078ba:	3b01      	subs	r3, #1
  4078bc:	440a      	add	r2, r1
  4078be:	f811 4b01 	ldrb.w	r4, [r1], #1
  4078c2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4078c6:	428a      	cmp	r2, r1
  4078c8:	d1f9      	bne.n	4078be <memmove+0xaa>
  4078ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4078cc:	4603      	mov	r3, r0
  4078ce:	e7f3      	b.n	4078b8 <memmove+0xa4>
  4078d0:	4603      	mov	r3, r0
  4078d2:	e7f2      	b.n	4078ba <memmove+0xa6>
  4078d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4078d6:	4672      	mov	r2, lr
  4078d8:	e7ee      	b.n	4078b8 <memmove+0xa4>
  4078da:	bf00      	nop

004078dc <_realloc_r>:
  4078dc:	2900      	cmp	r1, #0
  4078de:	f000 8095 	beq.w	407a0c <_realloc_r+0x130>
  4078e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4078e6:	460d      	mov	r5, r1
  4078e8:	4616      	mov	r6, r2
  4078ea:	b083      	sub	sp, #12
  4078ec:	4680      	mov	r8, r0
  4078ee:	f106 070b 	add.w	r7, r6, #11
  4078f2:	f7ff f98f 	bl	406c14 <__malloc_lock>
  4078f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4078fa:	2f16      	cmp	r7, #22
  4078fc:	f02e 0403 	bic.w	r4, lr, #3
  407900:	f1a5 0908 	sub.w	r9, r5, #8
  407904:	d83c      	bhi.n	407980 <_realloc_r+0xa4>
  407906:	2210      	movs	r2, #16
  407908:	4617      	mov	r7, r2
  40790a:	42be      	cmp	r6, r7
  40790c:	d83d      	bhi.n	40798a <_realloc_r+0xae>
  40790e:	4294      	cmp	r4, r2
  407910:	da43      	bge.n	40799a <_realloc_r+0xbe>
  407912:	4bc4      	ldr	r3, [pc, #784]	; (407c24 <_realloc_r+0x348>)
  407914:	6899      	ldr	r1, [r3, #8]
  407916:	eb09 0004 	add.w	r0, r9, r4
  40791a:	4288      	cmp	r0, r1
  40791c:	f000 80b4 	beq.w	407a88 <_realloc_r+0x1ac>
  407920:	6843      	ldr	r3, [r0, #4]
  407922:	f023 0101 	bic.w	r1, r3, #1
  407926:	4401      	add	r1, r0
  407928:	6849      	ldr	r1, [r1, #4]
  40792a:	07c9      	lsls	r1, r1, #31
  40792c:	d54c      	bpl.n	4079c8 <_realloc_r+0xec>
  40792e:	f01e 0f01 	tst.w	lr, #1
  407932:	f000 809b 	beq.w	407a6c <_realloc_r+0x190>
  407936:	4631      	mov	r1, r6
  407938:	4640      	mov	r0, r8
  40793a:	f7fe fdcf 	bl	4064dc <_malloc_r>
  40793e:	4606      	mov	r6, r0
  407940:	2800      	cmp	r0, #0
  407942:	d03a      	beq.n	4079ba <_realloc_r+0xde>
  407944:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407948:	f023 0301 	bic.w	r3, r3, #1
  40794c:	444b      	add	r3, r9
  40794e:	f1a0 0208 	sub.w	r2, r0, #8
  407952:	429a      	cmp	r2, r3
  407954:	f000 8121 	beq.w	407b9a <_realloc_r+0x2be>
  407958:	1f22      	subs	r2, r4, #4
  40795a:	2a24      	cmp	r2, #36	; 0x24
  40795c:	f200 8107 	bhi.w	407b6e <_realloc_r+0x292>
  407960:	2a13      	cmp	r2, #19
  407962:	f200 80db 	bhi.w	407b1c <_realloc_r+0x240>
  407966:	4603      	mov	r3, r0
  407968:	462a      	mov	r2, r5
  40796a:	6811      	ldr	r1, [r2, #0]
  40796c:	6019      	str	r1, [r3, #0]
  40796e:	6851      	ldr	r1, [r2, #4]
  407970:	6059      	str	r1, [r3, #4]
  407972:	6892      	ldr	r2, [r2, #8]
  407974:	609a      	str	r2, [r3, #8]
  407976:	4629      	mov	r1, r5
  407978:	4640      	mov	r0, r8
  40797a:	f7ff fe4f 	bl	40761c <_free_r>
  40797e:	e01c      	b.n	4079ba <_realloc_r+0xde>
  407980:	f027 0707 	bic.w	r7, r7, #7
  407984:	2f00      	cmp	r7, #0
  407986:	463a      	mov	r2, r7
  407988:	dabf      	bge.n	40790a <_realloc_r+0x2e>
  40798a:	2600      	movs	r6, #0
  40798c:	230c      	movs	r3, #12
  40798e:	4630      	mov	r0, r6
  407990:	f8c8 3000 	str.w	r3, [r8]
  407994:	b003      	add	sp, #12
  407996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40799a:	462e      	mov	r6, r5
  40799c:	1be3      	subs	r3, r4, r7
  40799e:	2b0f      	cmp	r3, #15
  4079a0:	d81e      	bhi.n	4079e0 <_realloc_r+0x104>
  4079a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4079a6:	f003 0301 	and.w	r3, r3, #1
  4079aa:	4323      	orrs	r3, r4
  4079ac:	444c      	add	r4, r9
  4079ae:	f8c9 3004 	str.w	r3, [r9, #4]
  4079b2:	6863      	ldr	r3, [r4, #4]
  4079b4:	f043 0301 	orr.w	r3, r3, #1
  4079b8:	6063      	str	r3, [r4, #4]
  4079ba:	4640      	mov	r0, r8
  4079bc:	f7ff f930 	bl	406c20 <__malloc_unlock>
  4079c0:	4630      	mov	r0, r6
  4079c2:	b003      	add	sp, #12
  4079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079c8:	f023 0303 	bic.w	r3, r3, #3
  4079cc:	18e1      	adds	r1, r4, r3
  4079ce:	4291      	cmp	r1, r2
  4079d0:	db1f      	blt.n	407a12 <_realloc_r+0x136>
  4079d2:	68c3      	ldr	r3, [r0, #12]
  4079d4:	6882      	ldr	r2, [r0, #8]
  4079d6:	462e      	mov	r6, r5
  4079d8:	60d3      	str	r3, [r2, #12]
  4079da:	460c      	mov	r4, r1
  4079dc:	609a      	str	r2, [r3, #8]
  4079de:	e7dd      	b.n	40799c <_realloc_r+0xc0>
  4079e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4079e4:	eb09 0107 	add.w	r1, r9, r7
  4079e8:	f002 0201 	and.w	r2, r2, #1
  4079ec:	444c      	add	r4, r9
  4079ee:	f043 0301 	orr.w	r3, r3, #1
  4079f2:	4317      	orrs	r7, r2
  4079f4:	f8c9 7004 	str.w	r7, [r9, #4]
  4079f8:	604b      	str	r3, [r1, #4]
  4079fa:	6863      	ldr	r3, [r4, #4]
  4079fc:	f043 0301 	orr.w	r3, r3, #1
  407a00:	3108      	adds	r1, #8
  407a02:	6063      	str	r3, [r4, #4]
  407a04:	4640      	mov	r0, r8
  407a06:	f7ff fe09 	bl	40761c <_free_r>
  407a0a:	e7d6      	b.n	4079ba <_realloc_r+0xde>
  407a0c:	4611      	mov	r1, r2
  407a0e:	f7fe bd65 	b.w	4064dc <_malloc_r>
  407a12:	f01e 0f01 	tst.w	lr, #1
  407a16:	d18e      	bne.n	407936 <_realloc_r+0x5a>
  407a18:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407a1c:	eba9 0a01 	sub.w	sl, r9, r1
  407a20:	f8da 1004 	ldr.w	r1, [sl, #4]
  407a24:	f021 0103 	bic.w	r1, r1, #3
  407a28:	440b      	add	r3, r1
  407a2a:	4423      	add	r3, r4
  407a2c:	4293      	cmp	r3, r2
  407a2e:	db25      	blt.n	407a7c <_realloc_r+0x1a0>
  407a30:	68c2      	ldr	r2, [r0, #12]
  407a32:	6881      	ldr	r1, [r0, #8]
  407a34:	4656      	mov	r6, sl
  407a36:	60ca      	str	r2, [r1, #12]
  407a38:	6091      	str	r1, [r2, #8]
  407a3a:	f8da 100c 	ldr.w	r1, [sl, #12]
  407a3e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407a42:	1f22      	subs	r2, r4, #4
  407a44:	2a24      	cmp	r2, #36	; 0x24
  407a46:	60c1      	str	r1, [r0, #12]
  407a48:	6088      	str	r0, [r1, #8]
  407a4a:	f200 8094 	bhi.w	407b76 <_realloc_r+0x29a>
  407a4e:	2a13      	cmp	r2, #19
  407a50:	d96f      	bls.n	407b32 <_realloc_r+0x256>
  407a52:	6829      	ldr	r1, [r5, #0]
  407a54:	f8ca 1008 	str.w	r1, [sl, #8]
  407a58:	6869      	ldr	r1, [r5, #4]
  407a5a:	f8ca 100c 	str.w	r1, [sl, #12]
  407a5e:	2a1b      	cmp	r2, #27
  407a60:	f200 80a2 	bhi.w	407ba8 <_realloc_r+0x2cc>
  407a64:	3508      	adds	r5, #8
  407a66:	f10a 0210 	add.w	r2, sl, #16
  407a6a:	e063      	b.n	407b34 <_realloc_r+0x258>
  407a6c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407a70:	eba9 0a03 	sub.w	sl, r9, r3
  407a74:	f8da 1004 	ldr.w	r1, [sl, #4]
  407a78:	f021 0103 	bic.w	r1, r1, #3
  407a7c:	1863      	adds	r3, r4, r1
  407a7e:	4293      	cmp	r3, r2
  407a80:	f6ff af59 	blt.w	407936 <_realloc_r+0x5a>
  407a84:	4656      	mov	r6, sl
  407a86:	e7d8      	b.n	407a3a <_realloc_r+0x15e>
  407a88:	6841      	ldr	r1, [r0, #4]
  407a8a:	f021 0b03 	bic.w	fp, r1, #3
  407a8e:	44a3      	add	fp, r4
  407a90:	f107 0010 	add.w	r0, r7, #16
  407a94:	4583      	cmp	fp, r0
  407a96:	da56      	bge.n	407b46 <_realloc_r+0x26a>
  407a98:	f01e 0f01 	tst.w	lr, #1
  407a9c:	f47f af4b 	bne.w	407936 <_realloc_r+0x5a>
  407aa0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407aa4:	eba9 0a01 	sub.w	sl, r9, r1
  407aa8:	f8da 1004 	ldr.w	r1, [sl, #4]
  407aac:	f021 0103 	bic.w	r1, r1, #3
  407ab0:	448b      	add	fp, r1
  407ab2:	4558      	cmp	r0, fp
  407ab4:	dce2      	bgt.n	407a7c <_realloc_r+0x1a0>
  407ab6:	4656      	mov	r6, sl
  407ab8:	f8da 100c 	ldr.w	r1, [sl, #12]
  407abc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407ac0:	1f22      	subs	r2, r4, #4
  407ac2:	2a24      	cmp	r2, #36	; 0x24
  407ac4:	60c1      	str	r1, [r0, #12]
  407ac6:	6088      	str	r0, [r1, #8]
  407ac8:	f200 808f 	bhi.w	407bea <_realloc_r+0x30e>
  407acc:	2a13      	cmp	r2, #19
  407ace:	f240 808a 	bls.w	407be6 <_realloc_r+0x30a>
  407ad2:	6829      	ldr	r1, [r5, #0]
  407ad4:	f8ca 1008 	str.w	r1, [sl, #8]
  407ad8:	6869      	ldr	r1, [r5, #4]
  407ada:	f8ca 100c 	str.w	r1, [sl, #12]
  407ade:	2a1b      	cmp	r2, #27
  407ae0:	f200 808a 	bhi.w	407bf8 <_realloc_r+0x31c>
  407ae4:	3508      	adds	r5, #8
  407ae6:	f10a 0210 	add.w	r2, sl, #16
  407aea:	6829      	ldr	r1, [r5, #0]
  407aec:	6011      	str	r1, [r2, #0]
  407aee:	6869      	ldr	r1, [r5, #4]
  407af0:	6051      	str	r1, [r2, #4]
  407af2:	68a9      	ldr	r1, [r5, #8]
  407af4:	6091      	str	r1, [r2, #8]
  407af6:	eb0a 0107 	add.w	r1, sl, r7
  407afa:	ebab 0207 	sub.w	r2, fp, r7
  407afe:	f042 0201 	orr.w	r2, r2, #1
  407b02:	6099      	str	r1, [r3, #8]
  407b04:	604a      	str	r2, [r1, #4]
  407b06:	f8da 3004 	ldr.w	r3, [sl, #4]
  407b0a:	f003 0301 	and.w	r3, r3, #1
  407b0e:	431f      	orrs	r7, r3
  407b10:	4640      	mov	r0, r8
  407b12:	f8ca 7004 	str.w	r7, [sl, #4]
  407b16:	f7ff f883 	bl	406c20 <__malloc_unlock>
  407b1a:	e751      	b.n	4079c0 <_realloc_r+0xe4>
  407b1c:	682b      	ldr	r3, [r5, #0]
  407b1e:	6003      	str	r3, [r0, #0]
  407b20:	686b      	ldr	r3, [r5, #4]
  407b22:	6043      	str	r3, [r0, #4]
  407b24:	2a1b      	cmp	r2, #27
  407b26:	d82d      	bhi.n	407b84 <_realloc_r+0x2a8>
  407b28:	f100 0308 	add.w	r3, r0, #8
  407b2c:	f105 0208 	add.w	r2, r5, #8
  407b30:	e71b      	b.n	40796a <_realloc_r+0x8e>
  407b32:	4632      	mov	r2, r6
  407b34:	6829      	ldr	r1, [r5, #0]
  407b36:	6011      	str	r1, [r2, #0]
  407b38:	6869      	ldr	r1, [r5, #4]
  407b3a:	6051      	str	r1, [r2, #4]
  407b3c:	68a9      	ldr	r1, [r5, #8]
  407b3e:	6091      	str	r1, [r2, #8]
  407b40:	461c      	mov	r4, r3
  407b42:	46d1      	mov	r9, sl
  407b44:	e72a      	b.n	40799c <_realloc_r+0xc0>
  407b46:	eb09 0107 	add.w	r1, r9, r7
  407b4a:	ebab 0b07 	sub.w	fp, fp, r7
  407b4e:	f04b 0201 	orr.w	r2, fp, #1
  407b52:	6099      	str	r1, [r3, #8]
  407b54:	604a      	str	r2, [r1, #4]
  407b56:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407b5a:	f003 0301 	and.w	r3, r3, #1
  407b5e:	431f      	orrs	r7, r3
  407b60:	4640      	mov	r0, r8
  407b62:	f845 7c04 	str.w	r7, [r5, #-4]
  407b66:	f7ff f85b 	bl	406c20 <__malloc_unlock>
  407b6a:	462e      	mov	r6, r5
  407b6c:	e728      	b.n	4079c0 <_realloc_r+0xe4>
  407b6e:	4629      	mov	r1, r5
  407b70:	f7ff fe50 	bl	407814 <memmove>
  407b74:	e6ff      	b.n	407976 <_realloc_r+0x9a>
  407b76:	4629      	mov	r1, r5
  407b78:	4630      	mov	r0, r6
  407b7a:	461c      	mov	r4, r3
  407b7c:	46d1      	mov	r9, sl
  407b7e:	f7ff fe49 	bl	407814 <memmove>
  407b82:	e70b      	b.n	40799c <_realloc_r+0xc0>
  407b84:	68ab      	ldr	r3, [r5, #8]
  407b86:	6083      	str	r3, [r0, #8]
  407b88:	68eb      	ldr	r3, [r5, #12]
  407b8a:	60c3      	str	r3, [r0, #12]
  407b8c:	2a24      	cmp	r2, #36	; 0x24
  407b8e:	d017      	beq.n	407bc0 <_realloc_r+0x2e4>
  407b90:	f100 0310 	add.w	r3, r0, #16
  407b94:	f105 0210 	add.w	r2, r5, #16
  407b98:	e6e7      	b.n	40796a <_realloc_r+0x8e>
  407b9a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407b9e:	f023 0303 	bic.w	r3, r3, #3
  407ba2:	441c      	add	r4, r3
  407ba4:	462e      	mov	r6, r5
  407ba6:	e6f9      	b.n	40799c <_realloc_r+0xc0>
  407ba8:	68a9      	ldr	r1, [r5, #8]
  407baa:	f8ca 1010 	str.w	r1, [sl, #16]
  407bae:	68e9      	ldr	r1, [r5, #12]
  407bb0:	f8ca 1014 	str.w	r1, [sl, #20]
  407bb4:	2a24      	cmp	r2, #36	; 0x24
  407bb6:	d00c      	beq.n	407bd2 <_realloc_r+0x2f6>
  407bb8:	3510      	adds	r5, #16
  407bba:	f10a 0218 	add.w	r2, sl, #24
  407bbe:	e7b9      	b.n	407b34 <_realloc_r+0x258>
  407bc0:	692b      	ldr	r3, [r5, #16]
  407bc2:	6103      	str	r3, [r0, #16]
  407bc4:	696b      	ldr	r3, [r5, #20]
  407bc6:	6143      	str	r3, [r0, #20]
  407bc8:	f105 0218 	add.w	r2, r5, #24
  407bcc:	f100 0318 	add.w	r3, r0, #24
  407bd0:	e6cb      	b.n	40796a <_realloc_r+0x8e>
  407bd2:	692a      	ldr	r2, [r5, #16]
  407bd4:	f8ca 2018 	str.w	r2, [sl, #24]
  407bd8:	696a      	ldr	r2, [r5, #20]
  407bda:	f8ca 201c 	str.w	r2, [sl, #28]
  407bde:	3518      	adds	r5, #24
  407be0:	f10a 0220 	add.w	r2, sl, #32
  407be4:	e7a6      	b.n	407b34 <_realloc_r+0x258>
  407be6:	4632      	mov	r2, r6
  407be8:	e77f      	b.n	407aea <_realloc_r+0x20e>
  407bea:	4629      	mov	r1, r5
  407bec:	4630      	mov	r0, r6
  407bee:	9301      	str	r3, [sp, #4]
  407bf0:	f7ff fe10 	bl	407814 <memmove>
  407bf4:	9b01      	ldr	r3, [sp, #4]
  407bf6:	e77e      	b.n	407af6 <_realloc_r+0x21a>
  407bf8:	68a9      	ldr	r1, [r5, #8]
  407bfa:	f8ca 1010 	str.w	r1, [sl, #16]
  407bfe:	68e9      	ldr	r1, [r5, #12]
  407c00:	f8ca 1014 	str.w	r1, [sl, #20]
  407c04:	2a24      	cmp	r2, #36	; 0x24
  407c06:	d003      	beq.n	407c10 <_realloc_r+0x334>
  407c08:	3510      	adds	r5, #16
  407c0a:	f10a 0218 	add.w	r2, sl, #24
  407c0e:	e76c      	b.n	407aea <_realloc_r+0x20e>
  407c10:	692a      	ldr	r2, [r5, #16]
  407c12:	f8ca 2018 	str.w	r2, [sl, #24]
  407c16:	696a      	ldr	r2, [r5, #20]
  407c18:	f8ca 201c 	str.w	r2, [sl, #28]
  407c1c:	3518      	adds	r5, #24
  407c1e:	f10a 0220 	add.w	r2, sl, #32
  407c22:	e762      	b.n	407aea <_realloc_r+0x20e>
  407c24:	20400464 	.word	0x20400464

00407c28 <__ascii_wctomb>:
  407c28:	b121      	cbz	r1, 407c34 <__ascii_wctomb+0xc>
  407c2a:	2aff      	cmp	r2, #255	; 0xff
  407c2c:	d804      	bhi.n	407c38 <__ascii_wctomb+0x10>
  407c2e:	700a      	strb	r2, [r1, #0]
  407c30:	2001      	movs	r0, #1
  407c32:	4770      	bx	lr
  407c34:	4608      	mov	r0, r1
  407c36:	4770      	bx	lr
  407c38:	238a      	movs	r3, #138	; 0x8a
  407c3a:	6003      	str	r3, [r0, #0]
  407c3c:	f04f 30ff 	mov.w	r0, #4294967295
  407c40:	4770      	bx	lr
  407c42:	bf00      	nop

00407c44 <__gedf2>:
  407c44:	f04f 3cff 	mov.w	ip, #4294967295
  407c48:	e006      	b.n	407c58 <__cmpdf2+0x4>
  407c4a:	bf00      	nop

00407c4c <__ledf2>:
  407c4c:	f04f 0c01 	mov.w	ip, #1
  407c50:	e002      	b.n	407c58 <__cmpdf2+0x4>
  407c52:	bf00      	nop

00407c54 <__cmpdf2>:
  407c54:	f04f 0c01 	mov.w	ip, #1
  407c58:	f84d cd04 	str.w	ip, [sp, #-4]!
  407c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407c64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407c68:	bf18      	it	ne
  407c6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407c6e:	d01b      	beq.n	407ca8 <__cmpdf2+0x54>
  407c70:	b001      	add	sp, #4
  407c72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407c76:	bf0c      	ite	eq
  407c78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407c7c:	ea91 0f03 	teqne	r1, r3
  407c80:	bf02      	ittt	eq
  407c82:	ea90 0f02 	teqeq	r0, r2
  407c86:	2000      	moveq	r0, #0
  407c88:	4770      	bxeq	lr
  407c8a:	f110 0f00 	cmn.w	r0, #0
  407c8e:	ea91 0f03 	teq	r1, r3
  407c92:	bf58      	it	pl
  407c94:	4299      	cmppl	r1, r3
  407c96:	bf08      	it	eq
  407c98:	4290      	cmpeq	r0, r2
  407c9a:	bf2c      	ite	cs
  407c9c:	17d8      	asrcs	r0, r3, #31
  407c9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407ca2:	f040 0001 	orr.w	r0, r0, #1
  407ca6:	4770      	bx	lr
  407ca8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407cac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407cb0:	d102      	bne.n	407cb8 <__cmpdf2+0x64>
  407cb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407cb6:	d107      	bne.n	407cc8 <__cmpdf2+0x74>
  407cb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407cc0:	d1d6      	bne.n	407c70 <__cmpdf2+0x1c>
  407cc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407cc6:	d0d3      	beq.n	407c70 <__cmpdf2+0x1c>
  407cc8:	f85d 0b04 	ldr.w	r0, [sp], #4
  407ccc:	4770      	bx	lr
  407cce:	bf00      	nop

00407cd0 <__aeabi_cdrcmple>:
  407cd0:	4684      	mov	ip, r0
  407cd2:	4610      	mov	r0, r2
  407cd4:	4662      	mov	r2, ip
  407cd6:	468c      	mov	ip, r1
  407cd8:	4619      	mov	r1, r3
  407cda:	4663      	mov	r3, ip
  407cdc:	e000      	b.n	407ce0 <__aeabi_cdcmpeq>
  407cde:	bf00      	nop

00407ce0 <__aeabi_cdcmpeq>:
  407ce0:	b501      	push	{r0, lr}
  407ce2:	f7ff ffb7 	bl	407c54 <__cmpdf2>
  407ce6:	2800      	cmp	r0, #0
  407ce8:	bf48      	it	mi
  407cea:	f110 0f00 	cmnmi.w	r0, #0
  407cee:	bd01      	pop	{r0, pc}

00407cf0 <__aeabi_dcmpeq>:
  407cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cf4:	f7ff fff4 	bl	407ce0 <__aeabi_cdcmpeq>
  407cf8:	bf0c      	ite	eq
  407cfa:	2001      	moveq	r0, #1
  407cfc:	2000      	movne	r0, #0
  407cfe:	f85d fb08 	ldr.w	pc, [sp], #8
  407d02:	bf00      	nop

00407d04 <__aeabi_dcmplt>:
  407d04:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d08:	f7ff ffea 	bl	407ce0 <__aeabi_cdcmpeq>
  407d0c:	bf34      	ite	cc
  407d0e:	2001      	movcc	r0, #1
  407d10:	2000      	movcs	r0, #0
  407d12:	f85d fb08 	ldr.w	pc, [sp], #8
  407d16:	bf00      	nop

00407d18 <__aeabi_dcmple>:
  407d18:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d1c:	f7ff ffe0 	bl	407ce0 <__aeabi_cdcmpeq>
  407d20:	bf94      	ite	ls
  407d22:	2001      	movls	r0, #1
  407d24:	2000      	movhi	r0, #0
  407d26:	f85d fb08 	ldr.w	pc, [sp], #8
  407d2a:	bf00      	nop

00407d2c <__aeabi_dcmpge>:
  407d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d30:	f7ff ffce 	bl	407cd0 <__aeabi_cdrcmple>
  407d34:	bf94      	ite	ls
  407d36:	2001      	movls	r0, #1
  407d38:	2000      	movhi	r0, #0
  407d3a:	f85d fb08 	ldr.w	pc, [sp], #8
  407d3e:	bf00      	nop

00407d40 <__aeabi_dcmpgt>:
  407d40:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d44:	f7ff ffc4 	bl	407cd0 <__aeabi_cdrcmple>
  407d48:	bf34      	ite	cc
  407d4a:	2001      	movcc	r0, #1
  407d4c:	2000      	movcs	r0, #0
  407d4e:	f85d fb08 	ldr.w	pc, [sp], #8
  407d52:	bf00      	nop

00407d54 <__aeabi_dcmpun>:
  407d54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407d58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d5c:	d102      	bne.n	407d64 <__aeabi_dcmpun+0x10>
  407d5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407d62:	d10a      	bne.n	407d7a <__aeabi_dcmpun+0x26>
  407d64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d6c:	d102      	bne.n	407d74 <__aeabi_dcmpun+0x20>
  407d6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407d72:	d102      	bne.n	407d7a <__aeabi_dcmpun+0x26>
  407d74:	f04f 0000 	mov.w	r0, #0
  407d78:	4770      	bx	lr
  407d7a:	f04f 0001 	mov.w	r0, #1
  407d7e:	4770      	bx	lr

00407d80 <__aeabi_d2iz>:
  407d80:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407d84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407d88:	d215      	bcs.n	407db6 <__aeabi_d2iz+0x36>
  407d8a:	d511      	bpl.n	407db0 <__aeabi_d2iz+0x30>
  407d8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407d90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407d94:	d912      	bls.n	407dbc <__aeabi_d2iz+0x3c>
  407d96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407da2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407da6:	fa23 f002 	lsr.w	r0, r3, r2
  407daa:	bf18      	it	ne
  407dac:	4240      	negne	r0, r0
  407dae:	4770      	bx	lr
  407db0:	f04f 0000 	mov.w	r0, #0
  407db4:	4770      	bx	lr
  407db6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407dba:	d105      	bne.n	407dc8 <__aeabi_d2iz+0x48>
  407dbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407dc0:	bf08      	it	eq
  407dc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407dc6:	4770      	bx	lr
  407dc8:	f04f 0000 	mov.w	r0, #0
  407dcc:	4770      	bx	lr
  407dce:	bf00      	nop

00407dd0 <sysfont_glyphs>:
	...
  407df0:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  407e00:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  407e10:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  407e28:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  407e38:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  407e48:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  407e60:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  407e70:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  407e80:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  407e98:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  407eb4:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407ec4:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  407ed4:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  407ee4:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  407f0c:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  407f34:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  407f44:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  407f68:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  407f78:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  407f88:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  407f98:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  407fb0:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  407fc0:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  407fd0:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  407fe8:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  407ff8:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  408008:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  408020:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  408030:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  408040:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  408058:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  408068:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  408078:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  408090:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  4080a0:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  4080b0:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  4080cc:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  4080dc:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  4080ec:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  408108:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  408120:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  408138:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  408148:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  408158:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  408170:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  408180:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  408190:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  4081a8:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  4081b8:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  4081c8:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  4081e0:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  4081f0:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  408200:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  408218:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  408228:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  408238:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  408250:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  408260:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  408270:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  408288:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  408298:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  4082a8:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  4082c0:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  4082d0:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  4082e0:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  4082f8:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  408308:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  408318:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  408330:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  408340:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  408350:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  408368:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  408378:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  408388:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  4083a0:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  4083b0:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  4083c0:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  4083d8:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  4083e8:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  4083f8:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  408410:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  408420:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  408430:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  408448:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  408458:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  408468:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  408480:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  408490:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  4084a0:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  4084c8:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  4084d8:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  4084f4:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  40850c:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  40851c:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  40852c:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  408544:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  408554:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  408564:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  40857c:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  40858c:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  40859c:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  4085ac:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  4085bc:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  4085cc:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  4085dc:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  4085ec:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  4085fc:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  40860c:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  408624:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  408634:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  408644:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  408660:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  40867c:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  408698:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  4086a8:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  4086b8:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  4086d0:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  4086ec:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  408708:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  408724:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  408740:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  40875c:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  408778:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  408794:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  4087a4:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  4087b4:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  4087c4:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4087d4:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4087e4:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4087f4:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  408804:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  408814:	0000 0000 2020 2020 2020 0020 2020 2020     ....       .    
  408824:	2020 2020 0000 0000 2e25 6631 0000 0000         ....%.1f....
  408834:	6964 7473 003a 0000                         dist:...

0040883c <_global_impure_ptr>:
  40883c:	0038 2040 4e49 0046 6e69 0066 414e 004e     8.@ INF.inf.NAN.
  40884c:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40885c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40886c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40887c:	296c 0000 0030 0000                         l)..0...

00408884 <blanks.7223>:
  408884:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408894 <zeroes.7224>:
  408894:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4088a4:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  4088b4:	0000 0000                                   ....

004088b8 <__mprec_bigtens>:
  4088b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4088c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4088d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

004088e0 <__mprec_tens>:
  4088e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4088f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  408900:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  408910:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  408920:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  408930:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  408940:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  408950:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  408960:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  408970:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  408980:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  408990:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4089a0:	9db4 79d9 7843 44ea                         ...yCx.D

004089a8 <p05.6055>:
  4089a8:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4089b8:	4f50 4953 0058 0000 002e 0000               POSIX.......

004089c4 <_ctype_>:
  4089c4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4089d4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4089e4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4089f4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  408a04:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  408a14:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  408a24:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408a34:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408a44:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00408ac8 <_init>:
  408ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408aca:	bf00      	nop
  408acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408ace:	bc08      	pop	{r3}
  408ad0:	469e      	mov	lr, r3
  408ad2:	4770      	bx	lr

00408ad4 <__init_array_start>:
  408ad4:	004054e5 	.word	0x004054e5

00408ad8 <__frame_dummy_init_array_entry>:
  408ad8:	00400165                                e.@.

00408adc <_fini>:
  408adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408ade:	bf00      	nop
  408ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408ae2:	bc08      	pop	{r3}
  408ae4:	469e      	mov	lr, r3
  408ae6:	4770      	bx	lr

00408ae8 <__fini_array_start>:
  408ae8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 7dd0 0040 0e0a 7d20               .....}@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <ul_flash_in_wait_mode>:
2040001c:	0000 0020                                   .. .

20400020 <SystemCoreClock>:
20400020:	0900 003d 0000 0000                         ..=.....

20400028 <freq>:
20400028:	e584 469e d658 40c0                         ...FX..@

20400030 <_impure_ptr>:
20400030:	0038 2040 0000 0000                         8.@ ....

20400038 <impure_data>:
20400038:	0000 0000 0324 2040 038c 2040 03f4 2040     ....$.@ ..@ ..@ 
	...
204000e0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000f0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400460 <__atexit_recursive_mutex>:
20400460:	0cc0 2040                                   ..@ 

20400464 <__malloc_av_>:
	...
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 
2040085c:	0854 2040 0854 2040 085c 2040 085c 2040     T.@ T.@ \.@ \.@ 

2040086c <__malloc_sbrk_base>:
2040086c:	ffff ffff                                   ....

20400870 <__malloc_trim_threshold>:
20400870:	0000 0002                                   ....

20400874 <__global_locale>:
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400954:	7c29 0040 77e9 0040 0000 0000 89c4 0040     )|@..w@.......@.
20400964:	89c0 0040 8860 0040 8860 0040 8860 0040     ..@.`.@.`.@.`.@.
20400974:	8860 0040 8860 0040 8860 0040 8860 0040     `.@.`.@.`.@.`.@.
20400984:	8860 0040 8860 0040 ffff ffff ffff ffff     `.@.`.@.........
20400994:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009bc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
